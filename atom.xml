<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AILS</title>
  
  <subtitle>Focus on Artificial Intelligence for Life Sciences (AILS)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wvdon.com/"/>
  <updated>2023-04-08T07:47:32.627Z</updated>
  <id>http://wvdon.com/</id>
  
  <author>
    <name>Weidong Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 多线程</title>
    <link href="http://wvdon.com/2023/03/21/python/multi_threading/"/>
    <id>http://wvdon.com/2023/03/21/python/multi_threading/</id>
    <published>2023-03-20T16:11:41.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局解释器锁（GIL）："><a href="#全局解释器锁（GIL）：" class="headerlink" title="全局解释器锁（GIL）："></a>全局解释器锁（GIL）：</h2><p>Python 代码的执行是由 Python 虚拟机(又名解释器主循环)进行控制的，python在设计的时候考虑的是在主循环中同时只能有一个控制线程在执行，就像单核 CPU系统中的多进程一样。尽管 Python 解释器中可以运行多个线程，但是在任意给定时刻只有一个线程会被解释器执行。</p><a id="more"></a><p>对 Python 虚拟机的访问是由全局解释器锁(GIL)控制的。这个锁就是用来保证同时只能有一个线程运行的。在多线程环境中，Python 虚拟机将按照下面所述的方式执行：</p><p>​    1.设置 GIL。<br>​    2.切换进一个线程去运行。<br>​    3.执行下面操作之一。<br>​        a.指定数量的字节码指令。<br>​        b.线程主动让出控制权(可以调用 time.sleep(0)来完成)。<br>​    4.把线程设置回睡眠状态(切换出线程)。<br>​    5.解锁 GIL。<br>​    6.重复上述步骤</p><p><strong>当调用外部代码(即，任意 C/C++扩展的内置函数)时，GIL 会保持锁定，直至函数执行结束。</strong></p><blockquote><p>对于任意面向 I/O 的 Python 例程(调用了内置的操作系统 C 代码的那种)， GIL 会在 I/O 调用前被释放，以允许其他线程在 I/O 执行的时候运行。而对于那些没有太 多 I/O 操作的代码而言，更倾向于在该线程整个时间片内始终占有处理器.<br>所以<strong>I/O 密集型的 Python 程序要比计算密集型的代码能够更好地利用多线程环境。</strong></p></blockquote><p>GIL的存在使得Python多线程编程暂时无法充分利用多处理器的优势，这种限制也许使很多人感到沮丧，但事实上这并不意味着我们需要放弃多线程。对于只含纯Python的代码也许使用多线程并不能提高运行速率，但在以下几种情况，如<strong>等待外部资源返回</strong>，或者<strong>为了提高用户体验而建立反应灵活的用户界面</strong>，或者<strong>多用户应用程序</strong>中，多线程仍然是一个比较好的解决方案。</p><p>在 CPython 中，由于存在 <a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-global-interpreter-lock" target="_blank" rel="noopener">全局解释器锁</a>，同一时刻只有一个线程可以执行 Python 代码（虽然某些性能导向的库可能会去除此限制）。 如果你想让你的应用更好地利用多核心计算机的计算资源，推荐你使用 <a href="https://docs.python.org/zh-cn/3.10/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener"><code>multiprocessing</code></a> 或 <a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>concurrent.futures.ProcessPoolExecutor</code></a>。 但是，如果你想要同时运行多个 I/O 密集型任务，则多线程仍然是一个合适的模型。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><blockquote><p><strong>推荐优先使用threading模块</strong></p></blockquote><p>Python为多线程编程提供了两个非常简单明了的模块：thread和threading，另外还有Queue。</p><ul><li>thread 模块：提供了基本的线程和锁定支持;</li><li>threading 模块：提供了更高级别、功能更全面的线程管理；</li><li>Queue模块，用户可以创建一个队列数据结构，用于在多线程之间进行共享</li></ul><p>简单来说：<strong>thread模块提供了多线程底层支持模块，以低级原始的方式来处理和控制线程，使用起来较为复杂；而threading模块基于thread进行包装，将线程的操作对象化，在语言层面提供了丰富的特性</strong>。</p><p>使用threading的原因：</p><ol><li>threading模块对同步原语的支持更为完善和丰富。就线程的同步和互斥来说，thread模块只提供了一种锁类型thread.LockType，而threading模块中不仅有Lock指令锁、RLock可重入指令锁，还支持条件变量Condition、信号量Semaphore、BoundedSemaphore以及Event事件等。</li><li>threading模块在主线程和子线程交互上更为友好，threading中的join()方法能够阻塞当前上下文环境的线程，直到调用此方法的线程终止或到达指定的timeout（可选参数）。利用该方法可以方便地控制主线程和子线程以及子线程之间的执行。</li><li>thread模块不支持守护线程。thread模块中主线程退出的时候，所有的子线程不论是否还在工作，都会被强制结束，并且没有任何警告也没有任何退出前的清理工作</li></ol><p>创建线程：</p><ul><li>继承Thread类，重写它的run()方法</li><li>创建一个threading.Thread对象，在它的初始化函数（<strong>init</strong>()）中将可调用对象作为参数传入。<strong>推荐优先使用threading模块</strong></li></ul><p><a href="https://docs.python.org/zh-cn/3.10/library/threading.html?highlight=threading#module-threading" target="_blank" rel="noopener">相关参数</a></p><p>关于线程信息的函数：</p><ul><li><code>threading.active_count()</code>：返回当前存活的Thread对象数量。</li><li><code>threading.current_thread()</code>：返回当前线程的Thread对象。</li><li><code>threading.enumerate()</code>：列表形式返回所有存活的Thread对象。</li><li><code>threading.main_thread()</code>：返回主Thread对象。</li></ul><p>Thread对象的方法及属性：</p><ul><li><code>Thread.name</code>：线程的名字，没有语义，可以相同名称。</li><li><code>Thread.ident</code>：线程标识符，非零整数。</li><li><code>Thread.Daemon</code>：是否为守护线程。</li><li><code>Thread.is_alive()</code>：是否存活。</li><li><code>Thread.start()</code>：开始线程活动。若多次调用抛出RuntimeError。</li><li><code>Thread.run()</code>：用来重载的，</li><li><code>Thread.join(timeout=None)</code>：等待直到线程正常或异常结束。尚未开始抛出RuntimeError</li><li><code>Thread(group=None, target=None, name=None, args=(), kwargs={}, *, deamon=None)</code>：构造函数。</li></ul><h3 id="让主线程等待子线程结束-join"><a href="#让主线程等待子线程结束-join" class="headerlink" title="让主线程等待子线程结束 join"></a>让主线程等待子线程结束 join</h3><p>假如要让主线程等子线程，那么可以使用Thread.join()方法。join可以让运行这条语句的主线程在此阻塞（等待），直到子线程结束，再放行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"开始做任务1啦"</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)  <span class="comment"># 用time.sleep模拟任务耗时</span></span><br><span class="line">    print(<span class="string">"任务1结束啦"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"这里是主线程"</span>)</span><br><span class="line">    <span class="comment"># 创建线程对象</span></span><br><span class="line">    t1 = Thread(target=task1)</span><br><span class="line">    <span class="comment"># t1.setDaemon(True)  # 设置为守护进程，必须在start之前</span></span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    t1.start()</span><br><span class="line">    <span class="comment"># 阻塞</span></span><br><span class="line">    t1.join()</span><br><span class="line">    print(<span class="string">"主线程结束了"</span>)</span><br></pre></td></tr></table></figure><p>锁对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threading</span>.<span class="title">Lock</span></span></span><br><span class="line"><span class="class"><span class="title">acquire</span><span class="params">(blocking=True, timeout=- <span class="number">1</span>)</span></span></span><br><span class="line"><span class="class"><span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="class">#递归锁对象:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threading</span>.<span class="title">RLock</span></span></span><br></pre></td></tr></table></figure><p><strong>RLock</strong>的R表示Reentrant，如果用RLock，那么在同一个线程中可以对它多次acquire，同时也要用相同数目的release来释放锁。这个东西的意义在于避免<strong>死锁</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"开始做一个任务啦"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 用time.sleep模拟任务耗时</span></span><br><span class="line">    print(<span class="string">"这个任务结束啦"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"这里是主线程"</span>)</span><br><span class="line">    <span class="comment"># 创建线程对象</span></span><br><span class="line">    t1 = Thread(target=task)</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    print(<span class="string">"主线程依然可以干别的事"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Thread.__init__(self)  <span class="comment"># 必须步骤</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>  <span class="comment"># 入口是名字为run的方法</span></span><br><span class="line">        print(<span class="string">"开始做一个任务啦"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 用time.sleep模拟任务耗时</span></span><br><span class="line">        print(<span class="string">"这个任务结束啦"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"这里是主线程"</span>)</span><br><span class="line">    <span class="comment"># 创建线程对象</span></span><br><span class="line">    t1 = NewThread()</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    print(<span class="string">"主线程依然可以干别的事"</span>)</span><br></pre></td></tr></table></figure><h3 id="使用Queue使多线程编程更安全"><a href="#使用Queue使多线程编程更安全" class="headerlink" title="使用Queue使多线程编程更安全"></a>使用Queue使多线程编程更安全</h3><h3 id="线程池-thread-pool"><a href="#线程池-thread-pool" class="headerlink" title="线程池 thread pool"></a>线程池 thread pool</h3><h2 id="multiprocessing-—-基于进程的并行"><a href="#multiprocessing-—-基于进程的并行" class="headerlink" title="multiprocessing — 基于进程的并行"></a><a href="https://docs.python.org/zh-cn/3.10/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener"><code>multiprocessing</code></a> — 基于进程的并行</h2><p><a href="https://docs.python.org/zh-cn/3.10/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener"><code>multiprocessing</code></a> 是一个支持使用与 <a href="https://docs.python.org/zh-cn/3.10/library/threading.html#module-threading" target="_blank" rel="noopener"><code>threading</code></a> 模块类似的 API 来产生进程的包。 <a href="https://docs.python.org/zh-cn/3.10/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener"><code>multiprocessing</code></a> 包同时提供了本地和远程并发操作，通过使用子进程而非线程有效地绕过了 <a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-global-interpreter-lock" target="_blank" rel="noopener">全局解释器锁</a>。 因此，<a href="https://docs.python.org/zh-cn/3.10/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener"><code>multiprocessing</code></a> 模块允许程序员充分利用给定机器上的多个处理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">multiprocessing.Process(group=<span class="literal">None</span>, target=<span class="literal">None</span>, name=<span class="literal">None</span>, args=(), kwargs=&#123;&#125;, *, daemon=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">参数介绍：</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    1. group默认为None（目前未使用）</span></span><br><span class="line"><span class="string">    2. target代表调用对象，即子进程执行的任务</span></span><br><span class="line"><span class="string">    3. name为进程名称</span></span><br><span class="line"><span class="string">    4. args调用对象的位置参数元组，args=(value1, value2, ...)</span></span><br><span class="line"><span class="string">    5. kwargs调用对象的字典，kwargs=&#123;key1:value1, key2:value2, ...&#125;    </span></span><br><span class="line"><span class="string">    6. daemon表示进程是否为守护进程，布尔值　　 　</span></span><br><span class="line"><span class="string">方法介绍：　　</span></span><br><span class="line"><span class="string">Process.start() 启动进程，并调用子进程中的run()方法　　</span></span><br><span class="line"><span class="string">Process.run() 进程启动时运行的方法，在自定义时必须要实现该方法　　</span></span><br><span class="line"><span class="string">Process.terminate() 强制终止进程，不进行清理操作，如果Process创建了子进程，会导致该进程变成僵尸进程　　Process.join() 阻塞进程使主进程等待该进程终止　　</span></span><br><span class="line"><span class="string">Process.kill() 与terminate()相同　　</span></span><br><span class="line"><span class="string">Process.is_alive() 判断进程是否还存活，如果存活，返回True　　</span></span><br><span class="line"><span class="string">Process.close() 关闭进程对象，并清理资源，如果进程仍在运行则返回错误　　</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><strong>在Windows中，由于没有fork(Linux中创建进程的机制)，在创建进程的时候会import启动该文件，而在import文件的时候又会再次运行整个文件，如果把Process()放在 if <strong>name</strong> == ‘<strong>main</strong>‘ 判断之外，则Process()在被import的时候也会被运行，导致无限递归创建子进程导致报错，所以在Windows系统下，必须把Process()放在 if <strong>name</strong> == ‘<strong>main</strong>‘ 的判断保护之下。</strong></li><li><strong>在子进程中不能使用input，因为输入台只显示在主进程中，故如果在子进程中使用input，会导致报错</strong></li></ul><h3 id="Process实例"><a href="#Process实例" class="headerlink" title="Process实例"></a>Process实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span>: Hello World'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    p = Process(target=main, args=(<span class="string">'LovefishO'</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 开始进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 阻塞进程</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h3 id="Process类实现"><a href="#Process类实现" class="headerlink" title="Process类实现"></a>Process类实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewProcess</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 执行父类的init()</span></span><br><span class="line">        super().__init__()  </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建新参数</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在自定义Process类时，必须实现run()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>: Hello World'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个新的子进程，并传入参数</span></span><br><span class="line">    np = NewProcess(<span class="string">'LovefishO'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 开始子进程</span></span><br><span class="line">    np.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加入阻塞，保证主进程在子进程之后结束</span></span><br><span class="line">    np.join()</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'主进程结束'</span>)      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># LovefishO: Hello World</span></span><br><span class="line"><span class="comment"># 主进程结束</span></span><br></pre></td></tr></table></figure><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>正常情况下，当子进程和主进程都结束时，程序才会结束。但是当我们需要在主进程结束时，由该主进程创建的子进程也必须跟着结束时，就需要使用守护进程。当一个子进程为守护进程时，在主进程结束时，该子进程也会跟着结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span>: Hello World'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建守护进程, 设置daemon = True</span></span><br><span class="line">    p = Process(target=main, daemon=<span class="literal">True</span>, args=(<span class="string">'LovefishO'</span>,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始进程</span></span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 阻塞进程</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a><strong>Pool</strong></h3><p>Pool类可以提供指定数量的进程供用户调用，当有新的请求提交到Pool中时，如果池还没有满，就会创建一个新的进程来执行请求。如果池满，请求就会告知先等待，直到池中有进程结束，才会创建新的进程来执行这些请求。</p><p>使用map：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="comment"># fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(fn * fn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    testFL = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    print(<span class="string">'shunxu:'</span>)  <span class="comment"># 顺序执行(也就是串行执行，单进程)</span></span><br><span class="line">    s = time.time()</span><br><span class="line">    <span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">        run(fn)</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    print(<span class="string">"顺序执行时间："</span>, int(t1 - s))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'concurrent:'</span>)  <span class="comment"># 创建多个进程，并行执行</span></span><br><span class="line">    pool = Pool(<span class="number">3</span>)  <span class="comment"># 创建拥有3个进程数量的进程池</span></span><br><span class="line">    <span class="comment"># testFL:要处理的数据列表，run：处理testFL列表中数据的函数</span></span><br><span class="line">    pool.map(run, testFL)</span><br><span class="line">    pool.close()  <span class="comment"># 关闭进程池，不再接受新的进程</span></span><br><span class="line">    pool.join()  <span class="comment"># 主进程阻塞等待子进程的退出</span></span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(<span class="string">"并行执行时间："</span>, int(t2 - t1))</span><br></pre></td></tr></table></figure><p>使用apply_async：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'concurrent:'</span>)  <span class="comment"># 创建多个进程，并行执行</span></span><br><span class="line">pool = Pool(<span class="number">3</span>)  <span class="comment"># 创建拥有3个进程数量的进程池</span></span><br><span class="line"><span class="comment"># testFL:要处理的数据列表，run：处理testFL列表中数据的函数</span></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">pool.apply_async(run, (fn,))</span><br><span class="line">pool.close()  <span class="comment"># 关闭进程池，不再接受新的进程</span></span><br><span class="line">pool.join()  <span class="comment"># 主进程阻塞等待子进程的退出</span></span><br><span class="line"> t2 = time.time()</span><br><span class="line"> print(<span class="string">"并行执行时间："</span>, int(t2 - t1))</span><br></pre></td></tr></table></figure><p>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；异步，多个线程同时执行</p><h4 id="使用tqdm多线程监控"><a href="#使用tqdm多线程监控" class="headerlink" title="使用tqdm多线程监控"></a>使用tqdm多线程监控</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> Pool(<span class="number">5</span>) <span class="keyword">as</span> p:</span><br><span class="line">        print(list((tqdm(p.imap(f, range(<span class="number">10</span>)), total=<span class="number">10</span>, desc=<span class="string">'监视进度'</span>))))</span><br></pre></td></tr></table></figure><h4 id="共享变量参数"><a href="#共享变量参数" class="headerlink" title="共享变量参数"></a>共享变量参数</h4><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://blog.kamino.link/2021/03/01/Python-Multithreading-in-detail/" target="_blank" rel="noopener">https://blog.kamino.link/2021/03/01/Python-Multithreading-in-detail/</a></p><p><a href="https://docs.python.org/zh-cn/3.10/library/multiprocessing.html#programming-guidelines" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.10/library/multiprocessing.html#programming-guidelines</a></p><p><a href="https://www.cnblogs.com/lovefisho/p/16202006.html" target="_blank" rel="noopener">https://www.cnblogs.com/lovefisho/p/16202006.html</a></p><p><a href="https://www.cnblogs.com/ailiailan/p/11850710.html" target="_blank" rel="noopener">https://www.cnblogs.com/ailiailan/p/11850710.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;全局解释器锁（GIL）：&quot;&gt;&lt;a href=&quot;#全局解释器锁（GIL）：&quot; class=&quot;headerlink&quot; title=&quot;全局解释器锁（GIL）：&quot;&gt;&lt;/a&gt;全局解释器锁（GIL）：&lt;/h2&gt;&lt;p&gt;Python 代码的执行是由 Python 虚拟机(又名解释器主循环)进行控制的，python在设计的时候考虑的是在主循环中同时只能有一个控制线程在执行，就像单核 CPU系统中的多进程一样。尽管 Python 解释器中可以运行多个线程，但是在任意给定时刻只有一个线程会被解释器执行。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://wvdon.com/categories/python/"/>
    
    
      <category term="python" scheme="http://wvdon.com/tags/python/"/>
    
      <category term="thread" scheme="http://wvdon.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Bioinformatics with Python</title>
    <link href="http://wvdon.com/2023/03/01/bio/BioinformaticsWithPython/"/>
    <id>http://wvdon.com/2023/03/01/bio/BioinformaticsWithPython/</id>
    <published>2023-03-01T02:11:41.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Prepare my software：</p><p>“Anaconda, as it has become the de-facto standard for data science and bioinformatics. Also, it is the distribution that will allow you to install software from <strong><a href="https://bioconda.github.io/" target="_blank" rel="noopener">Bioconda</a></strong>”</p><a id="more"></a><p>Package：</p><table><thead><tr><th>Package</th><th>Purpose</th><th>Package</th><th></th></tr></thead><tbody><tr><td>pandas</td><td></td><td>DendroPY</td><td>phylogenetics</td></tr><tr><td>Numpy</td><td></td><td>PyMol</td><td>Molecular visualization</td></tr><tr><td>Scipy</td><td></td><td>scikit-learn</td><td>ML tools</td></tr><tr><td>Biopython</td><td></td><td>Cpython</td><td>High performance for Big data</td></tr><tr><td>seaborn</td><td></td><td>Numba</td><td>High performance for Big data</td></tr><tr><td>rpy2</td><td>R interface</td><td>Dask</td><td>Parallel processing for Big Data</td></tr><tr><td>PyVCF</td><td>NGS</td><td><a href="https://jupytext.readthedocs.io/" target="_blank" rel="noopener">jupytext</a>/lab</td><td></td></tr><tr><td>Pysam</td><td>NGS</td><td>R</td><td></td></tr><tr><td>HTSeq</td><td>NGS processing</td><td></td><td></td></tr></tbody></table><center>A table showing the various software packages that are useful in bioinformatics</center><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>01 install base conda env </span><br><span class="line">conda create -n bioinformatics_base python=3.10</span><br><span class="line">conda activate bioinformatics_base</span><br><span class="line"><span class="meta">#</span> why use base env? 不同类型的包太多了。新的任务可以clone base env ,在此基础上install special packages.</span><br><span class="line"><span class="meta">#</span>we can use </span><br><span class="line"><span class="meta">#</span> conda create -n scikit-learn --clone bioinformatics_base</span><br><span class="line"><span class="meta">#</span> conda activate scikit-learn &amp; conda install scikit-learn</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>02 add the bioconda and conda-forge channels to our source list</span><br><span class="line">conda config --add channels bioconda</span><br><span class="line">conda config --add channels conda-forge</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>03 install packages</span><br><span class="line"><span class="meta">#</span> install from requirements </span><br><span class="line"><span class="meta">#</span>conda list -e &gt; reqiurements.txt</span><br><span class="line">conda install --yes --file requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>04 install R from conda</span><br><span class="line">conda install rpy2 r-essentials r-gridextra</span><br></pre></td></tr></table></figure><p>Requirements.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">biopython==1.79</span><br><span class="line">jupyterlab==3.2.1</span><br><span class="line">jupytext==1.13</span><br><span class="line">matplotlib==3.4.3</span><br><span class="line">numpy==1.21.3</span><br><span class="line">pandas==1.3.4</span><br><span class="line">scipy==1.7.1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> env for R</span><br><span class="line">create -n bioinformatics_r --clone bioinformatics_base</span><br><span class="line">conda activate bioinformatics_r</span><br><span class="line">conda install r-ggplot2=3.3.5 r-lazyeval r-gridextra rpy2</span><br></pre></td></tr></table></figure><h3 id="Aligment"><a href="#Aligment" class="headerlink" title="Aligment"></a>Aligment</h3><blockquote><p>“pysam, a Python wrapper to the SAMtools C API”</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install –c bioconda pysam</span><br></pre></td></tr></table></figure><p>pandas</p>]]></content>
    
    <summary type="html">
    
      Using Python to slove computational Biology Problems!总结用python解决计算生物学问题
    
    </summary>
    
      <category term="machineLearning" scheme="http://wvdon.com/categories/machineLearning/"/>
    
    
      <category term="bio" scheme="http://wvdon.com/tags/bio/"/>
    
      <category term="computational Biology" scheme="http://wvdon.com/tags/computational-Biology/"/>
    
      <category term="Python" scheme="http://wvdon.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Diffusion Models For Life Science</title>
    <link href="http://wvdon.com/2023/02/08/machineLearning/diffusion/"/>
    <id>http://wvdon.com/2023/02/08/machineLearning/diffusion/</id>
    <published>2023-02-08T02:11:41.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Diffusion models 在CV和NLP上大展风采。在蛋白设计上由于蛋白质主链几何结构和序列结构关系的复杂性限制了其应用。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="Protein-Structure-Key-Task"><a href="#Protein-Structure-Key-Task" class="headerlink" title="Protein Structure Key Task"></a><strong>Protein Structure Key Task</strong></h3><p><strong>Protein structure prediction</strong></p><a id="more"></a><ul><li>AlphaFold</li><li>RosettaFold</li></ul><p><strong>Protein design</strong></p><ul><li>ProteinMPNN</li><li>RFjoint Inpainting</li><li>RFDiffusion</li></ul><p><img src="https://lh4.googleusercontent.com/v1Kch3n_sT-uC7_KbdbnIR87e4vnAb3nlJw1IPkm9QpRoerfu-LpPXeKj6ysfBW9cE10H-hdNjhVd9vQsjR6USTdN8HR6cULAhgnp3NMBHw2M_0OWydWYHHZ0OcJJUreXHL4HcBSXqgP_1A5IzK9YSq8SQ=s2048" alt="img"></p><center>In April 2019, Baker gave a TED talk titled "5 challenges we could solve by designing new proteins"</center><h3 id="Computational-Protein-Design-Workflow"><a href="#Computational-Protein-Design-Workflow" class="headerlink" title="Computational Protein Design Workflow"></a><strong>Computational Protein Design Workflow</strong></h3><p><img src="https://lh6.googleusercontent.com/nvabB164XGsMkiRp93XnDvaU8oHu7kQ3uYFV1zbFYbGI_U9549ZmVV0g9cMeCzfmUCAaeqPRXePdo7r0LDp8bHl8lOw4QLVGnthqaoSMtj6wDQeQBY4oAE4g2ph2aADjSXnUi-mA4nSMxmRuMKqLuRQEXw=s2048" alt="img"></p><p><img src="https://lh3.googleusercontent.com/IM0S-rw3Mvefwyahtx6oJ8B-HfTUXUXmu-A-TVBY9LIXkK_L15YFDqvnSDbkwMT7WzP_uLoSDwZyT0U4hientvxPlAXqU7UlDGwa1zYyDjmB6SOSBXK0ou4dhCi9XI3HifbUFvTrT0JG3m3GrJmvz0rqpQ=s2048" alt="img"></p><center>Motifs can have various Functions and sources</center><h3 id="Evaluation-for-Designing-proteins"><a href="#Evaluation-for-Designing-proteins" class="headerlink" title="Evaluation for Designing proteins"></a><strong>Evaluation for Designing proteins</strong></h3><img src="https://lh6.googleusercontent.com/FKpajpuYp7fHU1TJ_wkwMeoDSuYvyaoTamd7yexEOKCFgsNyh_SVtGdnnFuMMxCzBknlMBzddSwUV48UPSKTMZ6fPLMloV8flLMAGOTJ-hFiaPk-C7pkhASOidbZma1uaj-BFSrCVq0KOwc4Srvy3oyEwg=s2048" width="150" height="200" align="center/"><h3 id="State-of-the-art"><a href="#State-of-the-art" class="headerlink" title="State-of-the-art"></a><strong>State-of-the-art</strong></h3><img src="https://web.wvdon.com/20230227223847.png"><center>DALL-E2: An astronaut riding a horse in a photorealistic style</center><p><img src="https://web.wvdon.com/20230227224037.png" alt></p><center>Imagen: A robot couple fine dining with Eiffel Tower in the background</center><h3 id="What-makes-this-hard"><a href="#What-makes-this-hard" class="headerlink" title="What makes this hard?"></a><strong>What makes this hard?</strong></h3><p><strong>Post-AlphaFold, protein design is ‘guess’ &amp; ‘check’</strong></p><ul><li>Naive guessing ? ~20^100 sequences</li><li>!Native structures? Too sparseExisting </li><li>ML tools?<ul><li>Low diversity</li><li>High compute cost</li><li>Short sequences is bad</li></ul></li></ul><h2 id="模型详细介绍"><a href="#模型详细介绍" class="headerlink" title="模型详细介绍"></a>模型详细介绍</h2><h3 id="生成模型"><a href="#生成模型" class="headerlink" title="生成模型"></a>生成模型</h3><p>物理背景，搞物理的很牛，非平衡热力学。（熵增，混乱过程，逆转，从混乱中生成秩序。）</p><p>建模数据的生成概率。</p><p>GAN:生成器。判别器。对抗训练。</p><p>VAE:高维数据，近似。拟合</p><p>Flow:鲜艳分布  </p><p>Diffusion: 线性，隐变量</p><p>两个过程：</p><p>数据-》噪声，</p><p><img src="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/generative-overview.png" alt></p><p>DDPM</p><p><strong>Forward diffusion process gradually adds noise to input data.</strong></p><p><strong>Reverse denoising process generates data by removing noise.</strong></p><p>缺点：</p><ul><li>生成扩散模型的大火，则是始于2020年所提出的<strong><a href="https://link.zhihu.com/?target=https%3A//arxiv.org/abs/2006.11239" target="_blank" rel="noopener">DDPM</a></strong>（Denoising Diffusion Probabilistic Model）。</li><li>DDPM的数学框架在2015年就已经完成了 (<a href="https://arxiv.org/abs/1503.03585" target="_blank" rel="noopener">Sohl-Dickstein et al., 2015</a>)</li><li>DDPM是首次将它在高分辨率图像生成上调试出来了，从而引导出了后面的火热(<strong>DDPM</strong>; <a href="https://arxiv.org/abs/2006.11239" target="_blank" rel="noopener">Ho et al. 2020</a>).</li></ul><p><img src="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/DDPM-algo.png" alt></p><p>The training and sampling algorithms in DDPM (Image source: <a href="https://arxiv.org/abs/2006.11239" target="_blank" rel="noopener">Ho et al. 2020</a>)</p><h3 id="Forward-diffusion-process"><a href="#Forward-diffusion-process" class="headerlink" title="Forward diffusion process"></a>Forward diffusion process</h3><p>$$<br>q(\mathbf{x}<em>t \vert \mathbf{x}</em>{t-1}) = \mathcal{N}(\mathbf{x}<em>t; \sqrt{1 - \beta_t} \mathbf{x}</em>{t-1}, \beta_t\mathbf{I}) \quad<br>q(\mathbf{x}<em>{1:T} \vert \mathbf{x}_0) = \prod^T</em>{t=1} q(\mathbf{x}<em>t \vert \mathbf{x}</em>{t-1})<br>$$</p><h3 id="Reverse-diffusion-process"><a href="#Reverse-diffusion-process" class="headerlink" title="Reverse diffusion process"></a>Reverse diffusion process</h3><p>反向过程就是通过估测噪声，多次迭代逐渐将被破坏的 x<sub>t</sub> 恢复成x<sub>0</sub></p><h3 id="如何训练"><a href="#如何训练" class="headerlink" title="如何训练"></a><strong>如何训练</strong></h3><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>高斯贯穿全部；</p><p>KL散度。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>词汇对应：</p><p>Denoising diffusion probabilistic models (DDPMs)：a powerful class of machine learning models recently demonstrated to generate novel photorealistic images in response to text prompts</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/" target="_blank" rel="noopener">What are Diffusion Models? | Lil’Log</a> </p><p><a href="https://yang-song.github.io/blog/2021/score/" target="_blank" rel="noopener">Yang Song | Generative Modeling by Estimating Gradients of the Data Distribution</a> </p><p><a href="https://github.com/heejkoo/Awesome-Diffusion-Models#molecular-and-material-generation" target="_blank" rel="noopener">Awesome-Diffusion-Models:This repository contains a collection of resources and papers on <strong><em>Diffusion Models</em></strong>.</a></p>]]></content>
    
    <summary type="html">
    
      扩散模型在生命科学上的应用与模型概括
    
    </summary>
    
      <category term="machineLearning" scheme="http://wvdon.com/categories/machineLearning/"/>
    
    
      <category term="bio" scheme="http://wvdon.com/tags/bio/"/>
    
      <category term="machineLearning" scheme="http://wvdon.com/tags/machineLearning/"/>
    
      <category term="Generative_Learning" scheme="http://wvdon.com/tags/Generative-Learning/"/>
    
  </entry>
  
  <entry>
    <title>生信数据挖掘：ATAC-seq,RNA-seq</title>
    <link href="http://wvdon.com/2022/12/19/paper/atac_bio/"/>
    <id>http://wvdon.com/2022/12/19/paper/atac_bio/</id>
    <published>2022-12-18T16:11:41.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ATAC-seq"><a href="#ATAC-seq" class="headerlink" title="ATAC-seq"></a>ATAC-seq</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="染色质开放性-Chromatin-Accessibility"><a href="#染色质开放性-Chromatin-Accessibility" class="headerlink" title="染色质开放性 Chromatin Accessibility"></a><strong>染色质开放性</strong> <strong>Chromatin Accessibility</strong></h4><p>人的DNA链全部展开大约有2m，需要折叠为染色质结构才可以存储到放到细胞核中。染色质的基本结构单位是核小体，核小体再折叠能形成高度压缩的染色质结构。这个过程像我们将文件压缩为zip或者rar的压缩包，只要在使用的时候才会解压出来，平时可以减少它的占用空间。</p><a id="more"></a><p><img src="https://web.wvdon.com/image/chrom.png" alt></p><center>Fig 1: Chromatin Accessibility</center><p>高度折叠的染色质结构在复制和转录时需要暴露出DNA序列，这段暴露的区域就是染色质开放区域，<strong>这个区域可以供转录因子和其他调控元件结合</strong>，所以它与转录调控是密切相关的。</p><p>因此这种致密的核小体结构被破坏后，启动子、增强子等顺式调控元件和反式作用因子可以接近的特性，叫染色质开放性（<strong>Chromatin Accessibility</strong>）。</p><p>为了研究<strong>染色质的开放性</strong>，目前有MNase-seq,Dnase-seq,ATAC-seq等，但是目前最常用的是2013年由斯坦福大学开发的ATAC-seq。与传统的MNase-seq以及DNase-seq相比，其具有可重复性强，实验步骤简单，需要的实验样本量少等优点，因而被广泛应用<sup>1</sup>。</p><p><img src="https://web.wvdon.com/image/image-20221219190711398.png" alt="image-20221219190711398"></p><center> Fig 2: Methods of Researching Chromatin Accessibility a nd ATAC-seq principle</center><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>利用转座酶Tn5会携带特定的已知序列，并且可以结合开放的染色质。Tn5酶对染色质开放区进行打断，在打断的同时加上测序接头，接着进行DNA提取，PCR扩增构建文库。经过测序分析，就可以推断染色质可行性、转录因子结合位点、组蛋白修饰区域和核小体位置。</p><p><img src="https://web.wvdon.com/image/image-20221219193308860.png" alt="image-20221219193308860"></p><center>Fig 3: The Process of Tn5</center><h4 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h4><p>肠上皮化生简称<strong>肠化</strong>，是指正常的胃黏膜上皮被肠型上皮所取代。</p><p>正常情况下，我们的器官各司其职，胃表面生长的是具有分泌胃酸功能的胃黏膜上皮细胞，肠道表面生长的是具有分泌和吸收功能的肠黏膜上皮细胞。但当胃黏膜细胞受到比较严重的损伤后，胃肠黏膜上皮结构出现了一定改变，越长越像邻居家肠黏膜的孩子。看上去就像肠黏膜长错了地方，本该长在肠道上长的结构却出现在了胃黏膜上，就像一片草地长出了树木，树木就显得很突出。</p><p><img src="https://web.wvdon.com/image/20221223150540197.png" alt></p><p>目前的假设是，<strong>胃黏膜腺体的颈部干细胞具有多方面分泌的潜能，在正常时它可以分化成各种胃黏膜的成熟上皮细胞<sup>[9]</sup>。</strong>干细胞不正常工作时肠化进程会加速，从肠化生过渡到胃癌，而<strong>肠化属于胃癌前病变的一种</strong>。</p><p>胃黏膜上皮细胞癌变并非一朝一夕的事情，不是由正常细胞一跃成为癌细胞，而是一个慢性渐进的过程，在发展成恶性肿瘤之前，经历多年持续的癌前变化。<strong>若能及早识别和及早干预，也是一种防止胃癌的有效途径</strong>。</p><p><strong>因此从干细胞水平上能够发现促使正常干细胞分化为肠化细胞的根本原因，对于预防胃癌，以及使肠化逆转显得尤为重要。</strong></p><h4 id="实验设计："><a href="#实验设计：" class="headerlink" title="实验设计："></a>实验设计：</h4><p>针对10个病人，分别采集胃，肠化组织，分为两组（stemness + / - ）进行培养。</p><p>其中<em>阴性对照：正常胃组织，阳性对照：正常十二指肠组织，</em><br>stemness: 位置细胞干性的条件。+ 维持干性，-不维持,IM: + 。 - 。<br>胃窦：A, 胃体：C, 胃角：AC</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>目前已经开源了很多ATAC-seq原始data的预处理与计算，其基本流程为：</p><p><strong>QC-&gt;Alignment-&gt;Remove low quality-&gt; Call Peak</strong> </p><p>针对Call Peak 的结果，可以计算不同组间差异的Peak，或者Motif 富集与转录因子足迹分析，更进一步的可以联合RNA-seq。</p><p><img src="https://web.wvdon.com/image/image-20221219191431029.png" alt="image-20221219191431029"></p><center>Fig 4: Roadmap of a typical ATAC-seq analysis.</center><p>Pipeline:</p><ol><li><p><a href="https://github.com/ENCODE-DCC/atac-seq-pipeline" target="_blank" rel="noopener">ENCODE ATAC-seq pipeline</a></p></li><li><p><a href="https://informatics.fas.harvard.edu/atac-seq-guidelines.html" target="_blank" rel="noopener">ATAC-seq Guidelines form Harvard</a></p></li></ol><p>This pipeline is designed for automated end-to-end quality control and processing of ATAC-seq and DNase-seq data.</p><h4 id="标准"><a href="#标准" class="headerlink" title="标准"></a><strong>标准</strong></h4><blockquote><p>介绍前期质控指标，避免样本问题对后期实验结果的影响，造成错误或返工</p></blockquote><p><strong>比对率：</strong></p><p>正常是超过95%，最低不能低于80%。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以抽取部分样本在nt数据库中进行比对，看map到那些物种中，是否有部分细菌污染</span></span><br><span class="line">zcat ../data/B63_L4_Q803601.R1.fastq.gz | head -n 1000 &gt;B63_1</span><br><span class="line">zcat ../data/B63_L4_Q803601.R2.fastq.gz | head -n 1000 &gt;B63_2</span><br><span class="line"> </span><br><span class="line">awk '&#123;if(NR%4 == 1)&#123;print "&gt;" substr($0, 2)&#125;&#125;&#123;if(NR%4 == 2)&#123;print&#125;&#125;' B63_1 &gt; B63_1.fasta</span><br><span class="line">blastn -task blastn -query B63_1.fasta -db /home/nt -num_threads 6 -out unpaired_blastn.aln</span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地构建db花费时间较多，可以线上。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">B63_atac：73.4</span></span><br><span class="line"><span class="meta">#</span><span class="bash">B60_atac：77.3</span></span><br><span class="line"><span class="meta">#</span><span class="bash">细菌污染</span></span><br></pre></td></tr></table></figure><p><strong>峰值区域的读数比例（FRiP score）</strong>：</p><p>FRiP score应大于0.3，最低不能低于0.2。</p><p>所有映射的读数中，属于被称为峰值区域的部分，即显著富集的峰值中的<strong>可用读数除以所有可用读数</strong>。一般来说，FRiP得分与区域的数量呈正相关.(Landt et al, Genome Research Sept. 2012, 22(9): 1813–1831)</p><p><strong>TSS 富集：</strong></p><p>TSS富集计算是一种信噪比计算。收集一组参考TSSs周围的读数，形成以TSSs为中心、向任一方向延伸2000bp（共计4000bp）的读数总分布。然后，该分布被归一化，即在分布的每个末端侧翼的100bps内取平均读数深度（总共200bp的平均数据），并计算每个位置相对于该平均读数深度的倍数变化。这意味着侧翼应该从1开始，如果在转录起始位点（基因组的高度开放区域）有高的读数信号，那么信号应该增加，直到中间的一个峰值。我们把这个归一化后的分布中心的信号值作为我们的TSS富集度量。用于评估ATAC-seq。</p><p><img src="https://web.wvdon.com/image/tss_e.png" alt></p><center>Fig 5: Transcription Start Site (TSS) Enrichment</center><p><img src="https://web.wvdon.com/image/tss.png" alt></p><center>Fig 6: Transcription Start Site (TSS) Enrichment Standard Value</center><p><strong>文库复杂度测量：</strong></p><p>理想状态值是: NRF&gt;0.9, PBC1&gt;0.9, and PBC2&gt;3. </p><p><img src="https://web.wvdon.com/image/pbc.png" alt></p><center>Fig 7: Non-Redundant Fraction etc. Standard Value</center><p><strong>Non-Redundant Fraction (NRF)</strong> – Number of distinct uniquely mapping reads (i.e. after removing duplicates) / Total number of reads.</p><p><strong>PCR Bottlenecking Coefficient 1 (PBC1)</strong></p><p><strong>PCR Bottlenecking Coefficient 2 (PBC2)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">path= <span class="string">'/media/wvdon/data/wfy/atac/work/'</span></span><br><span class="line">dirs = os.listdir(path)</span><br><span class="line">aaa = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> str(d).endswith(<span class="string">"e"</span>):</span><br><span class="line">        json_path = <span class="string">f'/media/wvdon/data/wfy/atac/work/<span class="subst">&#123;d&#125;</span>/qc/qc.json'</span></span><br><span class="line">        <span class="comment">#print(d)</span></span><br><span class="line">        data = <span class="string">''</span></span><br><span class="line">        <span class="keyword">with</span> open(json_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">            <span class="comment">#print(data)</span></span><br><span class="line">        tss = data[<span class="string">"align_enrich"</span>][<span class="string">'tss_enrich'</span>][<span class="string">'rep1'</span>][<span class="string">'tss_enrich'</span>]</span><br><span class="line">        map_read_prc =data[<span class="string">"align"</span>][<span class="string">'samstat'</span>][<span class="string">'rep1'</span>][<span class="string">'pct_mapped_reads'</span>]</span><br><span class="line">        NRF = data[<span class="string">"lib_complexity"</span>][<span class="string">'lib_complexity'</span>][<span class="string">'rep1'</span>][<span class="string">'NRF'</span>]</span><br><span class="line">        PBC1 = data[<span class="string">"lib_complexity"</span>][<span class="string">'lib_complexity'</span>][<span class="string">'rep1'</span>][<span class="string">'PBC1'</span>]</span><br><span class="line">        aaa.append([d,tss,map_read_prc,NRF,PBC1])</span><br><span class="line">an_data = pd.DataFrame(aaa,columns=[<span class="string">'B'</span>,<span class="string">"tss"</span>,<span class="string">"map_read_prc"</span>,<span class="string">"NRF"</span>,<span class="string">"PBC1"</span>])</span><br><span class="line"></span><br><span class="line">sns.kdeplot(an_data[<span class="string">'PBC1'</span>],cut=<span class="number">0</span>,cumulative=<span class="literal">True</span>,shade=<span class="literal">True</span>,color=<span class="string">"b"</span>)</span><br><span class="line"><span class="comment">#sns.kdeplot(an_data['map_read_prc'],cut=0,cumulative=True,shade=True,color="r")</span></span><br><span class="line">plt.legend(title=<span class="string">"PBC1"</span>)</span><br><span class="line">plt.show()</span><br><span class="line">an_data[<span class="string">'PBC1'</span>].hist()</span><br></pre></td></tr></table></figure><p><img src="https://web.wvdon.com/image/qc_python.png" alt></p><h4 id="差异Peak分析"><a href="#差异Peak分析" class="headerlink" title="差异Peak分析"></a>差异Peak分析</h4><p>差异peak是分析的<strong>第一步，也是基础</strong>。根据实验的设计，可以比较两个组之间差异的Peak.</p><p>以往的几篇文章都推荐使用<a href="https://rdrr.io/bioc/DiffBind/man/DiffBind-package.html" target="_blank" rel="noopener">Diffbind</a>(<em>Differential binding analysis of ChIP-seq peaksets</em>)</p><blockquote><p>目前没有专门为ATAC设计的差异peak 分析工具，不过他们都是计算该区域的counts数据，归一化，对比两个组之间的差异。</p><p>另外HOMER, DBChIP，也能实现同样的需求。</p></blockquote><p><strong>利用Diffbind进行差异Peak分析(PCA,MA,heatmap,Volcano,differ Peak)</strong>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(DiffBind)</span><br><span class="line">csv_path = <span class="string">"/media/wvdon/sdata/atac-seq/after/example5.csv"</span></span><br><span class="line">dbObj &lt;- dba(sampleSheet=csv_path)</span><br><span class="line"></span><br><span class="line">plot(dbObj)</span><br><span class="line"></span><br><span class="line">dbcount &lt;- dba.count(DBA = dbObj,bUseSummarizeOverlaps=<span class="literal">TRUE</span>,bParallel = <span class="literal">FALSE</span>)</span><br><span class="line">save.image(<span class="string">"/media/wvdon/sdata/atac-seq/after/atacafter.RData"</span>)</span><br><span class="line">load(<span class="string">"/media/wvdon/sdata/atac-seq/after/atacafter.RData"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dba_counstrast = dba.contrast(dbcount,categories =</span><br><span class="line">                                DBA_TREATMENT,minMembers = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">bdaaly = dba.analyze(dba_counstrast,method = DBA_DESEQ2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">differ_peak_2 = dba.report(bdaaly,bCounts = <span class="literal">T</span>)</span><br><span class="line">head(diff_peaks2)</span><br><span class="line">diff_peaks_3= subset(differ_peak_2$Fold&gt;=<span class="number">1</span> | differ_peak_2$Fold&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#dba.show(dba_counstrast,bContrasts = T)</span></span><br><span class="line">pma = dba.plotMA(bdaaly,contrast = <span class="number">1</span>)</span><br><span class="line"><span class="comment">#ggsave(file="/media/wvdon/sdata/atac-seq/before/atacMA.svg", plot=pma, width=4, height=4)    </span></span><br><span class="line">dba.plotVolcano(bdaaly,contrast = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">length(differ_peak_2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#hmap=colorRampPalette(c("blue","white","red"))(n=13)</span></span><br><span class="line"><span class="comment">#readscores=dba.plotHeatmap(bdaaly,contrast = 1,#ColAttributes=c(DBA_TREATMENT,DBA_GROUP),</span></span><br><span class="line"> <span class="comment">#                          main = "DESeq2 Differentially Bound Sites",</span></span><br><span class="line">  <span class="comment">#                         correlations = FALSE,scale='row',colScheme = hmap)</span></span><br><span class="line"></span><br><span class="line">dim(readscores@elementMetadata)</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(dplyr)</span><br><span class="line">diff_peaks2 &lt;- bind_cols(as_tibble(granges(differ_peak_2)), as_tibble(mcols(differ_peak_2)))</span><br><span class="line"><span class="keyword">library</span>(pheatmap)</span><br><span class="line">Groups=c(rep(<span class="string">"IMP"</span>,<span class="number">8</span>),rep(<span class="string">"IMN"</span>,<span class="number">8</span>))</span><br><span class="line">heatmap_peak = differ_peak_2@elementMetadata[<span class="number">7</span>:<span class="number">22</span>]</span><br><span class="line">dim(heatmap_peak)</span><br><span class="line"><span class="comment">#write.csv(diff_peaks2, "/media/wvdon/sdata/atac-seq/before/12_18_peak_FDR005.csv")</span></span><br><span class="line"></span><br><span class="line">write.csv(heatmap_peak, <span class="string">"/media/wvdon/sdata/atac-seq/after/12_18heatmap_peak.csv"</span>)</span><br><span class="line">data&lt;-read.csv(<span class="string">"/media/wvdon/sdata/atac-seq/after/12_18heatmap_peak.csv"</span>,header = <span class="literal">T</span>,row.names = <span class="number">1</span>)</span><br><span class="line"><span class="comment">#heatmap_peak.columns=Groups</span></span><br><span class="line"><span class="comment">#colnames(heatmap_peak)</span></span><br><span class="line"></span><br><span class="line">annotation_c&lt;-data.frame(Groups)</span><br><span class="line">rownames(annotation_c)&lt;-colnames(data)</span><br><span class="line">colnames(data)</span><br><span class="line">labels_col=c(<span class="string">'37AC22'</span>,<span class="string">'30A51'</span>,<span class="string">'33A45'</span>,<span class="string">'46A46'</span>,<span class="string">'47A47'</span>,<span class="string">'49AC44'</span>,<span class="string">'13A06'</span>,<span class="string">'54A48'</span>,<span class="string">'37C20'</span>,<span class="string">'30C04'</span>,<span class="string">'33C21'</span>,<span class="string">'46C23'</span>,<span class="string">'47C07'</span>,<span class="string">'49C41'</span>,<span class="string">'13C60'</span>,<span class="string">'54C62'</span>)</span><br><span class="line"></span><br><span class="line">p&lt;-pheatmap(data, cluster_rows = <span class="literal">F</span>,      <span class="comment">#行聚类，列不聚类</span></span><br><span class="line">            cluster_cols = <span class="literal">F</span>,</span><br><span class="line">            show_rownames = <span class="literal">F</span>,       <span class="comment">#不显示行名</span></span><br><span class="line">            clustering_distance_rows = <span class="string">"correlation"</span>,</span><br><span class="line">            show_colnames = <span class="literal">T</span>,      <span class="comment">#显示列明 angle_row="15"，行名旋转15度，列明相似</span></span><br><span class="line">            </span><br><span class="line">            annotation_col = annotation_c,  <span class="comment">#对列进行注释即对列进行分组</span></span><br><span class="line">            <span class="comment">#na_col = "white",</span></span><br><span class="line">            scale = <span class="string">"row"</span>,   <span class="comment">#将数据按行进行标准化</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#设置格子大小 cellheigt=""设置格子高</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#设置格子高</span></span><br><span class="line">            labels_col= labels_col,</span><br><span class="line">            angle_col = <span class="number">90</span>,</span><br><span class="line">            border=<span class="literal">F</span></span><br><span class="line">            ,color = colorRampPalette(colors= c(<span class="string">"blue"</span>,<span class="string">"white"</span>,<span class="string">"red"</span>))(<span class="number">10</span>) </span><br><span class="line">            <span class="comment">#,color = colorRampPalette(c("#FFFF00","#FF0000"))(100)</span></span><br><span class="line">)   </span><br><span class="line">p</span><br><span class="line"><span class="keyword">library</span>(<span class="string">"ggplot2"</span>)</span><br><span class="line"><span class="comment">#some sample data</span></span><br><span class="line"><span class="comment">#BiocManager::install('svglite')</span></span><br><span class="line"><span class="comment">#This actually save the plot in a image</span></span><br><span class="line">ggsave(file=<span class="string">"/media/wvdon/sdata/atac-seq/after/12_18heatmap.svg"</span>, plot=p, width=<span class="number">8</span>, height=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h4 id="Peak-注释"><a href="#Peak-注释" class="headerlink" title="Peak 注释"></a>Peak 注释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r'/home/wvdon/BIO_ATAC/'</span>)</span><br><span class="line"><span class="keyword">from</span> common.pyShell <span class="keyword">import</span>  runShell  </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellAccept</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    预定义命令行参数，接收并存储</span></span><br><span class="line"><span class="string">    必须参数：None</span></span><br><span class="line"><span class="string">    可选参数：</span></span><br><span class="line"><span class="string">    -u / --URL</span></span><br><span class="line"><span class="string">    -t / --threads</span></span><br><span class="line"><span class="string">    -v / --version</span></span><br><span class="line"><span class="string">    @return:返回获取到的命令行参数args，以数据字典格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">try</span>:    <span class="comment"># 异常处理</span></span><br><span class="line">        parser = argparse.ArgumentParser(description=<span class="string">"peak 基因注释"</span>)</span><br><span class="line">        <span class="comment">#@todo 临时写成测试文件。</span></span><br><span class="line">        parser.add_argument(<span class="string">"-u"</span>, <span class="string">"--csv"</span>,required=<span class="literal">False</span>, type=str, help=<span class="string">"peak csv path"</span>,default=<span class="string">'/media/wvdon/sdata/test/12_19_peak_FDR005_remove4.csv'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--version"</span>, type=str, help=<span class="string">"工具版本号:V1.0"</span>)</span><br><span class="line">        parser.add_argument(<span class="string">"-output"</span>,<span class="string">"--output"</span>, type=str,default=<span class="string">'./annotate'</span>,help=<span class="string">'输出路径'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">"-annotatePeaks"</span>,default=<span class="string">'/usr/local/share/bio/homer/bin/annotatePeaks.pl'</span>,help=<span class="string">'-annotatePeaks.pl 执行路径'</span>)</span><br><span class="line">        args = parser.parse_args()  <span class="comment"># 获取参数字典</span></span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peakAnnotion</span><span class="params">(csv_path,work_path)</span>:</span></span><br><span class="line">    bed_path=os.path.join(work_path,<span class="string">'outputPeak.bed'</span>)</span><br><span class="line">    df = pd.read_csv(csv_path).iloc[:,<span class="number">1</span>:<span class="number">11</span>]</span><br><span class="line">    </span><br><span class="line">    df.columns = [<span class="string">'Chromosome'</span>, <span class="string">'Start'</span>, <span class="string">'End'</span>,<span class="string">'width'</span>,<span class="string">'Strand'</span>,<span class="string">'C'</span>,<span class="string">'N'</span>,<span class="string">'P'</span>,<span class="string">'Fold'</span>,<span class="string">'pv'</span>]</span><br><span class="line">    df[[<span class="string">'Chromosome'</span>, <span class="string">'Start'</span>, <span class="string">'End'</span>,<span class="string">'Strand'</span>]].to_csv(bed_path,header=<span class="literal">None</span>,sep=<span class="string">'\t'</span>,index=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    shell = <span class="string">f'<span class="subst">&#123;args.annotatePeaks&#125;</span>  <span class="subst">&#123;bed_path&#125;</span> hg38 &gt; <span class="subst">&#123;work_path&#125;</span>/outputPeakAnnotate.txt'</span></span><br><span class="line">    print(<span class="string">f'exectue shell <span class="subst">&#123;shell&#125;</span>'</span>)</span><br><span class="line">    status_code = runShell(shell,timeout = <span class="number">120</span>)</span><br><span class="line">    <span class="keyword">if</span> status_code==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">f'success annotate,export Peak Annotate file :<span class="subst">&#123;work_path&#125;</span>/outputPeakAnnotate.txt'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       print(<span class="string">f"Exectue '<span class="subst">&#123;shell&#125;</span>' Failed"</span>) </span><br><span class="line">    gene = pd.read_table(<span class="string">f'<span class="subst">&#123;work_path&#125;</span>/outputPeakAnnotate.txt'</span>,sep=<span class="string">'\t'</span>)</span><br><span class="line">    ids_list = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> gene.iloc[:,<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">if</span> len(str(k))&gt;<span class="number">1</span>:</span><br><span class="line">            ids_list.append(int(str(k)[<span class="number">2</span>:])<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ids_list.append(<span class="number">0</span>)</span><br><span class="line">    gene[<span class="string">'ids'</span>] = ids_list</span><br><span class="line">    gene.sort_values(<span class="string">'ids'</span>).to_csv(<span class="string">f'<span class="subst">&#123;work_path&#125;</span>/peak_outputPeakAnnotate_sorted.csv'</span>)</span><br><span class="line">    </span><br><span class="line">    atac_gene = gene.sort_values(<span class="string">'ids'</span>)</span><br><span class="line">    atac_gene[<span class="string">'Fold'</span>]=df[<span class="string">'Fold'</span>]</span><br><span class="line"></span><br><span class="line">    output_gene_path = <span class="string">f'<span class="subst">&#123;work_path&#125;</span>/peak_outputPeakAnnotate_sorted_conact.csv'</span></span><br><span class="line">    atac_gene.to_csv(output_gene_path)</span><br><span class="line">    list_annotion = []</span><br><span class="line">    <span class="keyword">for</span> an <span class="keyword">in</span> atac_gene[<span class="string">'Annotation'</span>]:</span><br><span class="line">        list_annotion.append(str(an).split(<span class="string">' ('</span>)[<span class="number">0</span>])</span><br><span class="line">    dict=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> list_annotion:</span><br><span class="line">        dict[key]=dict.get(key,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    peakAnnotionPie(work_path,dict)</span><br><span class="line">    peakUpDownPieAndBar(work_path,output_gene_path)</span><br><span class="line">    <span class="keyword">return</span> output_gene_path</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peakUpDownPieAndBar</span><span class="params">(work_path,data_path)</span>:</span></span><br><span class="line">    data = pd.read_csv(data_path)</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    x = np.arange(<span class="number">0</span>,math.pi*<span class="number">2</span>,<span class="number">0.05</span>)</span><br><span class="line">    up=data[data[<span class="string">'Fold'</span>]&gt;<span class="number">0</span>][<span class="string">'Fold'</span>]</span><br><span class="line">    down = data[data[<span class="string">'Fold'</span>]&lt;<span class="number">0</span>][<span class="string">'Fold'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(up) &gt; len(down):</span><br><span class="line">        up_bins = <span class="number">200</span></span><br><span class="line">        down_bins = int(<span class="number">2000</span>/len(up)*len(down))</span><br><span class="line">        exp = (<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line">        sits = <span class="number">221</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        down_bins = <span class="number">200</span></span><br><span class="line">        up_bins = int(<span class="number">2000</span>/len(down)*len(up))</span><br><span class="line">        ex = (<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line">        sits = <span class="number">222</span></span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax1.hist(down,bins=down_bins,color=<span class="string">'orange'</span>)</span><br><span class="line">    ax1.hist(up,bins=up_bins,color=<span class="string">'red'</span>)</span><br><span class="line">    ax2 = fig.add_subplot(sits,facecolor=<span class="string">'r'</span>)</span><br><span class="line">    ax2.pie([len(up),len(down)],shadow=<span class="literal">True</span>,colors=[<span class="string">'orange'</span>,<span class="string">'red'</span>],explode=exp,labels=[<span class="string">'colsed'</span>,<span class="string">'open'</span>],autopct=<span class="string">'%1.1f%%'</span>)</span><br><span class="line">    ax2.set_title(<span class="string">f'Total:<span class="subst">&#123;len(data)&#125;</span>'</span>)</span><br><span class="line">    plt.savefig(<span class="string">f'<span class="subst">&#123;work_path&#125;</span>/percent_atac_pie.svg'</span>,dpi=<span class="number">300</span>)</span><br><span class="line">    print(<span class="string">'plot annotion pie_bar done!'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peakAnnotionPie</span><span class="params">(work_path,dict)</span>:</span></span><br><span class="line">    expodes = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>)</span><br><span class="line">    colors = [<span class="string">'red'</span>,<span class="string">'orange'</span>,<span class="string">'yellow'</span>,<span class="string">'green'</span>,<span class="string">'purple'</span>,<span class="string">'blue'</span>,<span class="string">'black'</span>,<span class="string">'brown'</span>]</span><br><span class="line">    plt.pie(dict.values(),explode=expodes,labels=dict.keys(),shadow=<span class="literal">True</span>,colors=colors,autopct=<span class="string">'%1.1f%%'</span>)</span><br><span class="line">    <span class="comment">## 用于显示为一个长宽相等的饼图</span></span><br><span class="line">    plt.axis(<span class="string">'equal'</span>)</span><br><span class="line">    <span class="comment">#保存并显示</span></span><br><span class="line">    plt.savefig(<span class="string">f'<span class="subst">&#123;work_path&#125;</span>/pie_annotion.svg'</span>,dpi=<span class="number">300</span>)</span><br><span class="line">    print(<span class="string">'plot annotion pie done!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    root_path = os.getcwd()</span><br><span class="line">    </span><br><span class="line">    args = shellAccept()</span><br><span class="line">    work_path = args.output</span><br><span class="line">    csv_path = args.csv</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(work_path):</span><br><span class="line">        os.makedirs(work_path)</span><br><span class="line">    output_gene_path = peakAnnotion(csv_path,work_path)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pyShell</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    return 0 : Success , else: Fail</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runShell</span><span class="params">(command,timeout=<span class="number">5</span>)</span>:</span></span><br><span class="line">    ret = subprocess.run(command,shell=<span class="literal">True</span>,stdout=subprocess.PIPE,stderr=subprocess.PIPE,encoding=<span class="string">"utf-8"</span>,timeout=timeout)</span><br><span class="line">    <span class="keyword">return</span> ret.returncode</span><br></pre></td></tr></table></figure><h4 id="Motif"><a href="#Motif" class="headerlink" title="Motif"></a>Motif</h4><p>peak注释虽然提供了功能解释，但并没有直接解释底层机制。开放的染色质可以通过转录因子影响转录，转录因子通过识别和结合 DNA 上的特定序列(<em>TFBS:TF 结合位点</em>)来促进转录。而事实上转录因子通过与组蛋白或非组蛋白的竞争以及与辅因子的合作来调节转录。</p><p>有两种类型的基序或基于 TF 的分析方法(<strong>研究TF调控</strong>)：</p><ul><li>基序频率或活动的基于序列的预测</li><li>TF 占用的足迹。</li></ul><p>JASPAR是现在用的最多的一个motif 数据库，事实上存的就是一些转录因子对应的位置权重矩阵（PWM），其中有的是实验的结果，还有的是计算预测出来的。</p><p>工具：</p><ul><li>TFBSTools</li><li><strong>HOMER</strong></li><li>MEME FIMO</li></ul><p>原理都是一样的，基于PWM矩阵，然后在序列里面扫描搜索。</p><blockquote><p>一直有一个疑问，对于motif扫描的时候，我们是应该用差异的区域，还是全部的区域？。差异的区域中全部的还是仅上调的区域？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/share/bio/homer/bin/findMotifsGenome.pl out.bed hg38 first -len 6,8,10,12,14</span><br></pre></td></tr></table></figure><blockquote><p>对于hommer,其result 有两个，一部分是能够和已有数据库中，匹配到的，另外一部分是基于序列预测出来了的，可能没有任何的生物学意义。</p></blockquote><p>对于HINT 也发现能够做motif 富集。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgt-motifanalysis --enrichment --organism mm9 --input-matrix Matrix_CDP_cDC.txt match/random_regions.bed</span><br></pre></td></tr></table></figure><h4 id="TF-Footprints"><a href="#TF-Footprints" class="headerlink" title="TF Footprints"></a>TF Footprints</h4><p> 除了motif，TF Footprints是另外一种研究转录因子调控的方法。原理是TF 与 DNA 结合会阻止结合位点内的 Tn5 切割，就会形成一个深渊低谷一样的峰值分布。</p><p>对于检测方法，目前都是基于Boyle 提出的变种隐马尔可夫模型HMM，即在每个碱基使用归一化和平滑的片段计数来检测不同的状态，例如足迹、侧翼和背景。其中目前用的比较多的是针对ATAC数据的HINT-ATAC。</p><p>最近的 HINT-ATAC 也使用 HMM，但只有 HINT-ATAC 校正了链特异性 Tn5 切割偏差.</p><p><a href="https://reg-gen.readthedocs.io/en/latest/hint/introduction.html" target="_blank" rel="noopener">Hint install introduction</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> need bam and bed file <span class="keyword">for</span> input </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># rep twice</span></span></span><br><span class="line">rgt-hint footprinting --atac-seq --paired-end --output-prefix=fp_paired ATAC.bam ATACPeaks.bed</span><br><span class="line">gt-motifanalysis matching --organism=hg38 --input-files IMN.bed IMP.bed  --output-location motif</span><br><span class="line">rgt-hint differential --organism=hg38 --bc --nc 16 --mpbs-files=motif/IMN_mpbs.bed,motif/IMP_mpbs.bed --reads-files=IMN.bam,IMP.bam --conditions=IMN,IMP --output-location=tfprinting</span><br></pre></td></tr></table></figure><blockquote><p>@todo 针对单组数据，对于重复数据，两组，还代解决code。</p></blockquote><h2 id="RNA-seq-联合分析"><a href="#RNA-seq-联合分析" class="headerlink" title="RNA-seq 联合分析"></a>RNA-seq 联合分析</h2><p>通过 RNA-seq 定性或定量地将染色质可及性的变化与感兴趣的基因表达的变化联系起来，直观地，我们可以发现 DE 基因是否在相应的 TSS 周围也具有显着差异的染色质可及性，可以推断 DE 基因受与开放染色质中特定基序或足迹相关的 TF 调节.</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a><strong>案例：</strong></h3><h4 id="1-PECA：转录因子TF，染色质调控因子CR和调控元件RE相互作用网络推断的新方法（Cell-Stem-Cell-2019-）"><a href="#1-PECA：转录因子TF，染色质调控因子CR和调控元件RE相互作用网络推断的新方法（Cell-Stem-Cell-2019-）" class="headerlink" title="1. PECA：转录因子TF，染色质调控因子CR和调控元件RE相互作用网络推断的新方法（Cell Stem Cell  2019 ）"></a><strong>1. PECA：转录因子TF，染色质调控因子CR和调控元件RE相互作用网络推断的新方法</strong>（<em>Cell Stem Cell</em>  2019 ）</h4><p><img src="https://web.wvdon.com/peca.png" alt="image-20221222165742726"></p><center>Fig: Schematic overview of the method for constructing TF-chromatin transcriptional regulatory network</center><p><strong>可以使用 PECA<sup>[7]</sup> 方法重建调控网络。</strong>中科院王勇教授团队，利用匹配的基因表达和染色质可及性数据刻画转录因子和调控元件结合调控下游基因表达的数学模型，构建了描绘细胞状态转化的染色质调控网络，通过网络分析鉴定出TFAP2C和p63分别为表面外胚层起始和角质形成细胞成熟的关键因子.</p><p><a href="https://github.com/SUwonglab/PECA" target="_blank" rel="noopener">PECA Github</a></p><h4 id="2-鸡胚的体节分化过程，挖掘关键的TF和Enhancer（nature-communications-2021）"><a href="#2-鸡胚的体节分化过程，挖掘关键的TF和Enhancer（nature-communications-2021）" class="headerlink" title="2. 鸡胚的体节分化过程，挖掘关键的TF和Enhancer（nature communications 2021）"></a>2. 鸡胚的体节分化过程，挖掘关键的TF和Enhancer（nature communications 2021）</h4><p><img src="https://web.wvdon.com/image/PSM.png" alt></p><h4 id="3-揭示酒精诱导的抗焦虑过程中的表观基因组学和转录组学相互作用（Molecular-P-s-ychiatry-2022）"><a href="#3-揭示酒精诱导的抗焦虑过程中的表观基因组学和转录组学相互作用（Molecular-P-s-ychiatry-2022）" class="headerlink" title="3. 揭示酒精诱导的抗焦虑过程中的表观基因组学和转录组学相互作用（Molecular P s ychiatry 2022）"></a>3. 揭示酒精诱导的抗焦虑过程中的表观基因组学和转录组学相互作用（Molecular P s ychiatry 2022）</h4><p><img src="https://web.wvdon.com/image/89241671709615_.pic.jpg" alt></p><center>Fig.n This model depicts the ability of acute ethanol to rapidly alter the epigenome in the amygdala and produce transcriptomic change</center><p><strong>featureCounts</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">featureCounts -T 16 -p -t exon -g gene_id -a /home/wvdon/atac/gene/Homo_sapiens.GRCh38.106.gtf -o all_new_feature.txt \</span><br><span class="line">/media/wvdon/MY-datas/Release_Datas_20210429/mRNA/bams/B87.sorted.bam</span><br></pre></td></tr></table></figure><p>RNA-seq 数据分析（差异基因，火山图，热图，富集分析）</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">base &lt;- read.table(<span class="string">"/media/wvdon/sdata/atac-seq/before/all_new_feature.txt"</span>,row.names = <span class="number">1</span> ,header=<span class="literal">T</span>,sep = <span class="string">'\t'</span>)</span><br><span class="line">basedata=base[<span class="number">6</span>:ncol(base)]</span><br><span class="line">group_list &lt;- factor(c(rep(<span class="string">"IM"</span>,<span class="number">8</span>), rep(<span class="string">"NC"</span>,<span class="number">8</span>)))</span><br><span class="line">table(group_list)</span><br><span class="line">colData &lt;- data.frame(row.names=colnames(basedata),group_list=group_list)</span><br><span class="line">head(basedata)</span><br><span class="line">colnames(colData)</span><br><span class="line">ncol(basedata)</span><br><span class="line">nrow(colData)</span><br><span class="line"><span class="keyword">library</span>(DESeq2)</span><br><span class="line">dds &lt;- DESeqDataSetFromMatrix(countData = basedata,colData = colData,</span><br><span class="line">                              design = ~ group_list)</span><br><span class="line">dds_2 &lt;- DESeq(dds)</span><br><span class="line">resultsNames(dds_2)</span><br><span class="line">res &lt;- results(dds_2)</span><br><span class="line">diff_gene_deseq2 &lt;-subset(res, padj &lt; <span class="number">0.05</span> )</span><br><span class="line"></span><br><span class="line">up_DEG &lt;- subset(res, padj &lt; <span class="number">0.05</span> &amp; log2FoldChange &gt; <span class="number">1</span>)</span><br><span class="line">down_DEG &lt;- subset(res, padj &lt; <span class="number">0.05</span> &amp; log2FoldChange &lt; -<span class="number">1</span>)</span><br><span class="line">dim(up_DEG)</span><br><span class="line">dim(down_DEG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#BiocManager::install("biomaRt")</span></span><br><span class="line"><span class="keyword">library</span>(biomaRt)</span><br><span class="line">human &lt;- useMart(<span class="string">'ensembl'</span>,dataset = <span class="string">"hsapiens_gene_ensembl"</span>)</span><br><span class="line">gene_id = row.names(diff_gene_deseq2)</span><br><span class="line">gene_name&lt;-getBM(attributes=c(<span class="string">"ensembl_gene_id"</span>,<span class="string">"external_gene_name"</span>),filters = <span class="string">"ensembl_gene_id"</span>,values =gene_id , mart = human)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RNA-seq,火山图, heatmap</span></span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(ggrepel)  <span class="comment">#用于标记的包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(pheatmap)</span><br><span class="line">row.names(assay(dds_2))</span><br><span class="line">head(assay(dds_2))</span><br><span class="line">rownames(gene_name)=gene_name$ensembl_gene_id</span><br><span class="line">final_rna =merge(gene_name,assay(dds_2), by = <span class="string">"row.names"</span>,all=<span class="literal">F</span>)</span><br><span class="line">dim(assay(dds_2)) <span class="comment"># =103 </span></span><br><span class="line"></span><br><span class="line">head(final_rna)</span><br><span class="line">heat_map_data=final_rna[<span class="number">4</span>:ncol(final_rna)]</span><br><span class="line">dim(heat_map_data)</span><br><span class="line"></span><br><span class="line">Groups=c(rep(<span class="string">"IM"</span>,<span class="number">8</span>),rep(<span class="string">"NC"</span>,<span class="number">8</span>))</span><br><span class="line">annotation_c&lt;-data.frame(Groups)</span><br><span class="line">annotation_c&lt;-data.frame(Groups)</span><br><span class="line">rownames(annotation_c)&lt;-colnames(heat_map_data)</span><br><span class="line">data&lt;-log2(heat_map_data+<span class="number">1</span>)</span><br><span class="line">colnames(data)</span><br><span class="line"><span class="comment">#rownames(data)=final_rna$external_gene_name</span></span><br><span class="line">ac = c(<span class="string">"37AC73"</span>,<span class="string">"30A72"</span>,<span class="string">"33A37"</span>,<span class="string">"46A94"</span>,<span class="string">"47A84"</span>,<span class="string">"49AC90"</span>,<span class="string">"13A87"</span>,<span class="string">"54A80"</span>,</span><br><span class="line"><span class="string">"37C74"</span>,<span class="string">"30C78"</span>,<span class="string">"33C82"</span>,<span class="string">"46C81"</span>,<span class="string">"47C79"</span>,<span class="string">"49C93"</span>,<span class="string">"13C64"</span>,<span class="string">"54C62"</span>)</span><br><span class="line">p&lt;-pheatmap(data, cluster_rows = <span class="literal">T</span>,      <span class="comment">#行聚类，列不聚类</span></span><br><span class="line">            cluster_cols = <span class="literal">F</span>,</span><br><span class="line">            show_rownames = <span class="literal">F</span>,       <span class="comment">#不显示行名</span></span><br><span class="line">            </span><br><span class="line">            show_colnames = <span class="literal">T</span>,      <span class="comment">#显示列明 angle_row="15"，行名旋转15度，列明相似</span></span><br><span class="line">            </span><br><span class="line">            annotation_col = annotation_c,  <span class="comment">#对列进行注释即对列进行分组</span></span><br><span class="line">            <span class="comment">#na_col = "white",</span></span><br><span class="line">            scale = <span class="string">"row"</span>,   <span class="comment">#将数据按行进行标准化</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#设置格子大小 cellheigt=""设置格子高</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#设置格子高</span></span><br><span class="line">            labels_col= ac,</span><br><span class="line">            angle_col = <span class="number">30</span>,</span><br><span class="line">            border=<span class="literal">F</span></span><br><span class="line">            ,color = colorRampPalette(colors= c(<span class="string">"blue"</span>,<span class="string">"white"</span>,<span class="string">"red"</span>))(<span class="number">10</span>) </span><br><span class="line">            <span class="comment">#,color = colorRampPalette(c("#FFFF00","#FF0000"))(100)</span></span><br><span class="line">)  </span><br><span class="line">p</span><br><span class="line">ggsave(file=<span class="string">"/media/wvdon/sdata/atac-seq/before/heatmap_rna.svg"</span>, plot=p, width=<span class="number">8</span>, height=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">final_rna_vo =merge(gene_name,DataFrame(diff_gene_deseq2), by = <span class="string">"row.names"</span>,all=<span class="literal">F</span>)</span><br><span class="line">write.csv(final_rna_vo,<span class="string">'/media/wvdon/sdata/atac-seq/before/vo.csv'</span>)</span><br><span class="line"></span><br><span class="line">data&lt;-read.csv(<span class="string">'/media/wvdon/sdata/atac-seq/before/vo.csv'</span>)</span><br><span class="line">data$log2FoldChange=-data$log2FoldChange</span><br><span class="line">cut_off_pvalue=<span class="number">0.05</span></span><br><span class="line">data$external_gene_name</span><br><span class="line">PvalueLimit = <span class="number">5</span></span><br><span class="line">data$label=ifelse(-log10(data$pvalue) &gt; PvalueLimit , as.character(data$external_gene_name), <span class="string">''</span>)</span><br><span class="line">data$group&lt;-as.factor(ifelse(data$pvalue &lt;= <span class="number">0.05</span> &amp; abs(data$log2FoldChange) &gt;=<span class="number">0</span>,</span><br><span class="line">                             ifelse(data$log2FoldChange&lt;=<span class="number">0</span>  ,<span class="string">'down'</span>,<span class="string">'up'</span>),<span class="string">'NS'</span>))</span><br><span class="line"></span><br><span class="line">this_tile &lt;- paste0(<span class="string">'Cutoff for logFC is abs 1.0 and pvalue is 0.05'</span>,</span><br><span class="line">                    <span class="string">'\nThe number of up gene is 59'</span>,</span><br><span class="line">                    <span class="string">'\nThe number of down gene is 43'</span>)                 </span><br><span class="line"></span><br><span class="line">p &lt;- ggplot(</span><br><span class="line">  <span class="comment">#设置数据</span></span><br><span class="line">  data, </span><br><span class="line">  aes(x = log2FoldChange, </span><br><span class="line">      y = -log10(pvalue), </span><br><span class="line">      colour=group)) +</span><br><span class="line">  geom_point(alpha=<span class="number">0.4</span>, size=<span class="number">3.5</span>) +</span><br><span class="line">  ggtitle( this_tile ) +</span><br><span class="line">  <span class="comment">#scale_fill_manual(values=c("#d2dae2","#546de5"))+</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 辅助线</span></span><br><span class="line">  geom_vline(xintercept=c(-<span class="number">1</span>,<span class="number">1</span>),lty=<span class="number">4</span>,col=<span class="string">"black"</span>,lwd=<span class="number">0.8</span>) +</span><br><span class="line">  geom_hline(yintercept = -log10(cut_off_pvalue),lty=<span class="number">4</span>,col=<span class="string">"black"</span>,lwd=<span class="number">0.8</span>) +</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 坐标轴</span></span><br><span class="line">  labs(x=<span class="string">"log2(fold change)"</span>,</span><br><span class="line">       y=<span class="string">"-log10 (p-value)"</span>)+scale_color_manual(values = c( <span class="string">'green'</span>,<span class="string">'red'</span>))+</span><br><span class="line">  theme_bw()+ </span><br><span class="line">  </span><br><span class="line">  <span class="comment">#theme(plot.title = element_text(vjust = -30,size=12), </span></span><br><span class="line">  <span class="comment">#      legend.position="right", </span></span><br><span class="line">  <span class="comment">#      legend.title = element_blank(),</span></span><br><span class="line">  <span class="comment">#)+</span></span><br><span class="line">  geom_text_repel(aes(x = log2FoldChange,                   <span class="comment"># geom_text_repel 标记函数</span></span><br><span class="line">                      y = -<span class="number">1</span>*log10(pvalue),          </span><br><span class="line">                      label=label),                       </span><br><span class="line">                  max.overlaps = <span class="number">10000</span>,                    <span class="comment"># 最大覆盖率，当点很多时，有些标记会被覆盖，调大该值则不被覆盖，反之。</span></span><br><span class="line">                  size=<span class="number">5</span>,                                  <span class="comment"># 字体大小</span></span><br><span class="line">                  box.padding=unit(<span class="number">0.5</span>,<span class="string">'lines'</span>),           <span class="comment"># 标记的边距</span></span><br><span class="line">                  point.padding=unit(<span class="number">0.1</span>, <span class="string">'lines'</span>), </span><br><span class="line">                  segment.color=<span class="string">'black'</span>,      </span><br><span class="line">                  show.legend=<span class="literal">FALSE</span>)   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例</span></span><br><span class="line"><span class="comment">#p+ggtitle(this_tile)</span></span><br><span class="line">p</span><br><span class="line">ggsave(file=<span class="string">"/media/wvdon/sdata/atac-seq/before/vo_rna.svg"</span>, plot=p, width=<span class="number">8</span>, height=<span class="number">8</span>)</span><br><span class="line">write.csv(data,<span class="string">'/media/wvdon/sdata/atac-seq/before/p005_filter_rna_before.csv'</span>)</span><br><span class="line"></span><br><span class="line">human &lt;- useMart(<span class="string">'ensembl'</span>,dataset = <span class="string">"hsapiens_gene_ensembl"</span>)</span><br><span class="line">gene_id = row.names(res)</span><br><span class="line">gene_name&lt;-getBM(attributes=c(<span class="string">"ensembl_gene_id"</span>,<span class="string">"external_gene_name"</span>),filters = <span class="string">"ensembl_gene_id"</span>,values =gene_id , mart = human)</span><br><span class="line"></span><br><span class="line">res$log2FoldChange=-res$log2FoldChange</span><br><span class="line">rownames(gene_name)=gene_name$ensembl_gene_id</span><br><span class="line">all_before_rna = merge(gene_name,DataFrame(res), by = <span class="string">"row.names"</span>,all=<span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line">write.csv(all_before_rna,<span class="string">'/media/wvdon/sdata/atac-seq/before/all_before_rna.csv'</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://web.wvdon.com/image/conact.png" alt></p><center>Fig. The Summary of ATAC & RNA-seq</center><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>Yan, Feng, et al. “From reads to insight: a hitchhiker’s guide to ATAC-seq data analysis.” <em>Genome biology</em> 21.1 (2020): 1-16.</li><li>Krishnan, H. R. <em>et al.</em> Unraveling the epigenomic and transcriptomic interplay during alcohol-induced anxiolysis. <em>Mol. Psychiatry</em> (2022) doi:10.1038/s41380-022-01732-2.</li><li>Mok, G. F. <em>et al.</em> Characterising open chromatin in chick embryos identifies cis-regulatory elements important for paraxial mesoderm formation and axis extension. <em>Nat. Commun.</em> <strong>12</strong>, 1157 (2021).</li><li>RS ∗, GB †. DiffBind: Differential binding analysis of ChIP- Seq peak data. </li><li>Li, Z., Schulz, M. H., Look, T., Begemann, M., Zenke, M., &amp; Costa, I. G. (2019). <a href="https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1642-2" target="_blank" rel="noopener">Identification of transcription factor binding sites using ATAC-seq</a>. Genome Biology, 20(1), 45.</li><li>Duren Z, Chen X, Xin J, et al. Time course regulatory analysis based on paired expression and chromatin accessibility data[J]. Genome research, 2020, 30(4): 622-634.</li><li>Li, Lingjie, et al. “TFAP2C-and p63-dependent networks sequentially rearrange chromatin landscapes to drive human epidermal lineage commitment.” <em>Cell Stem Cell</em> 24.2 (2019): 271-284</li><li>Quinlan, AR, Hall IM. BEDTools: a flexible suite of utilities for comparing genomic features. Bioinformatics 2010;26:841-842</li><li>“肠化”到底是怎么回事？什么情况下会癌变？<a href="https://view.inews.qq.com/a/20210205A0CTTC00" target="_blank" rel="noopener">https://view.inews.qq.com/a/20210205A0CTTC00</a></li></ol><h2 id="Software-Version"><a href="#Software-Version" class="headerlink" title="Software Version"></a>Software Version</h2><table><thead><tr><th>macs2 ==2.2.4</th><th></th></tr></thead><tbody><tr><td>bwa ==0.7.17</td><td></td></tr><tr><td>bowtie2 ==2.3.4.3</td><td></td></tr><tr><td>pipeline (v2.1.3)</td><td></td></tr><tr><td>Homer</td><td></td></tr><tr><td>HINT-ATAC</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>所有的代码都被上传到GitHub，<a href="https://github.com/wvdon/BIO_ATAC" target="_blank" rel="noopener">https://github.com/wvdon/BIO_ATAC</a></p><blockquote><p>目前是个人私人仓库，后续会开放。</p></blockquote>]]></content>
    
    <summary type="html">
    
      描述ATAC-seq与RNA-seq数据挖掘与联合分析的思路和心得总结。能够反复回顾，检查自己做的是否有些许错误的地方，另外也能过给想要了解的同学提供一些思路，避免走太多弯路。
    
    </summary>
    
      <category term="bio" scheme="http://wvdon.com/categories/bio/"/>
    
    
      <category term="bio" scheme="http://wvdon.com/tags/bio/"/>
    
      <category term="atac" scheme="http://wvdon.com/tags/atac/"/>
    
  </entry>
  
  <entry>
    <title>打造可以提升科研效率的工具</title>
    <link href="http://wvdon.com/2022/08/19/mac/"/>
    <id>http://wvdon.com/2022/08/19/mac/</id>
    <published>2022-08-18T16:11:41.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac-添加扩展词典（提高外刊文献阅读效率）"><a href="#Mac-添加扩展词典（提高外刊文献阅读效率）" class="headerlink" title="Mac 添加扩展词典（提高外刊文献阅读效率）"></a>Mac 添加扩展词典（提高外刊文献阅读效率）</h3><blockquote><p>mac三指点击查询词汇非常方便，但是自带的词典(Dictionary)很多专业性词汇都查不出来</p></blockquote><p><a href="https://placeless.net/blog/macos-dictionaries" target="_blank" rel="noopener">Placeless</a> 为mac 构建了一份可以添加的Mac词典（柯林斯高阶英汉双解学习词典）</p><a id="more"></a><p>目前已经停更了，版本到2019年的</p><p>链接地址：<a href="https://1drv.ms/f/s!AHfwbyaw226qhig" target="_blank" rel="noopener">one drive</a> ，<a href="https://pan.baidu.com/s/1B6N1Z_sk_tMckw3yNlvuNA" target="_blank" rel="noopener">百度网盘：ejee</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mac-添加扩展词典（提高外刊文献阅读效率）&quot;&gt;&lt;a href=&quot;#Mac-添加扩展词典（提高外刊文献阅读效率）&quot; class=&quot;headerlink&quot; title=&quot;Mac 添加扩展词典（提高外刊文献阅读效率）&quot;&gt;&lt;/a&gt;Mac 添加扩展词典（提高外刊文献阅读效率）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;mac三指点击查询词汇非常方便，但是自带的词典(Dictionary)很多专业性词汇都查不出来&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://placeless.net/blog/macos-dictionaries&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Placeless&lt;/a&gt; 为mac 构建了一份可以添加的Mac词典（柯林斯高阶英汉双解学习词典）&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="mac" scheme="http://wvdon.com/tags/mac/"/>
    
      <category term="tools" scheme="http://wvdon.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>使用frp远程访问Jupyter Notebook</title>
    <link href="http://wvdon.com/2021/01/21/linux/frp/"/>
    <id>http://wvdon.com/2021/01/21/linux/frp/</id>
    <published>2021-01-21T14:39:41.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<p>利用frp实现外网访问局域网内的服务。</p><a id="more"></a><h2 id="frp穿透"><a href="#frp穿透" class="headerlink" title="frp穿透"></a>frp穿透</h2><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">软件下载&amp;官方文档</a> </p><p>可以通过下面的链接直接下载。</p><p><a href="http://web.wvdon.com/frp_0.29.0_linux_amd64.tar.gz" target="_blank" rel="noopener">下载链接</a></p><h3 id="配置本地与服务端："><a href="#配置本地与服务端：" class="headerlink" title="配置本地与服务端："></a>配置本地与服务端：</h3><ol><li>下载解压  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf  frp_0.29.0_linux_amd64.tar.gz`</span><br></pre></td></tr></table></figure><ol start="2"><li>服务器配置：frpc.ini</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br></pre></td></tr></table></figure><p>启动 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c./frps.ini&amp;</span><br></pre></td></tr></table></figure><ol start="3"><li>客户端配置 frps.ini</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 111.111.110.211 #你的服务器ip</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8888 #要映射的jupyter端口</span><br><span class="line">custom_domains = xxx.xxx.com # 映射到访问的web ,不加www 。另外需要提前将域名解析到服务器ip</span><br><span class="line">nohup ./frpc -c./frpc.ini&amp;</span><br></pre></td></tr></table></figure><ol start="4"><li>后台启动 jupyter notebook </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure><p>使用cat查看是否jupyter启动端口和映射端口一致</p><p><code>cat nohup.out</code> 一致就不需要再管了，如果不一致可以使用 ps -aux找到该进程，然后kill -9 id 杀死，重新配置然后再启动。</p><p>此时可以通过web:8080端口访问穿透的Jupyter了。</p><h3 id="解决403-问题"><a href="#解决403-问题" class="headerlink" title="解决403 问题"></a>解决403 问题</h3><p>如果遇到远程访问403，说明本地是不允许访问的。</p><p>可以通过以下方法解决403 不允许访问。</p><ol><li>进到python环境里面先设置密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()#设置自己的密码，例如123</span><br><span class="line">#然后两次输入确认生成加密字符串</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/646855/1611238111397-1bac0fe1-11ec-42f6-8b77-a127cd7917c0.png" alt="image.png"></p><p>记住上面产生的密码</p><ol start="2"><li>进行配置允许访问</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br><span class="line">c.NotebookApp.allow_remote_access = True  #允许远程访问</span><br><span class="line">c.NotebookApp.allow_root = True          #允许root访问</span><br><span class="line">c.NotebookApp.ip=&apos;*&apos;                     # 所有ip皆可访问  </span><br><span class="line">c.NotebookApp.password = &apos;上面复制的那个字符串&apos;&apos;    </span><br><span class="line">c.NotebookApp.open_browser = False       # 禁止自动打开浏览器  </span><br><span class="line">c.NotebookApp.port =8888                 # 端口</span><br><span class="line">c.NotebookApp.notebook_dir = &apos;设置Notebook启动进入的目录&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后后台启动jupyter notebook</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/lawrencelue/article/details/107848856" target="_blank" rel="noopener">参考链接</a>:</p><p><a href="https://github.com/fatedier/frp/tree/master" target="_blank" rel="noopener">官网文档解读链接</a></p>]]></content>
    
    <summary type="html">
    
      利用frp实现外网访问局域网内的服务。
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="frp" scheme="http://wvdon.com/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>先做好一件事，才能做好更多事</title>
    <link href="http://wvdon.com/2020/06/05/plan/%E5%85%88%E5%81%9A%E5%A5%BD%E4%B8%80%E4%BB%B6%E4%BA%8B%EF%BC%8C%E6%89%8D%E8%83%BD%E5%81%9A%E5%A5%BD%E6%9B%B4%E5%A4%9A%E4%BA%8B/"/>
    <id>http://wvdon.com/2020/06/05/plan/先做好一件事，才能做好更多事/</id>
    <published>2020-06-05T04:40:00.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<p><em>——用十年的沉淀，成为一名业界优秀的软件工程师</em></p><blockquote><p>ps :某次老师需要上交的工作职业规划</p></blockquote><p><strong>先引用之前与久哥的对话（百度T9架构师）：</strong></p><blockquote><p>他问，“如果让你用10年的时间学习数据库，你能不能成为这个领域的专家？”<br>我说，“应该可以吧”<br>他说，“你现在20，10年后也才30，30岁就能成为某个领域的专家，为什么不去做呢？你看看周围有多少30岁的人还一事无成，而那个时候的你已经是数据库的专家了。”</p></blockquote><a id="more"></a><h3 id="职业方向："><a href="#职业方向：" class="headerlink" title="职业方向："></a>职业方向：</h3><p><strong>软件开发工程师-数据挖掘/存储/计算/分布式方向</strong></p><h3 id="技术宗旨："><a href="#技术宗旨：" class="headerlink" title="技术宗旨："></a>技术宗旨：</h3><p>职业的发展并不只是需要技术栈的学习，当我进入到职场时需要面临的更多的是帮助公司如果实现盈利或拓展业务，而这则从我的职业思考中进行展开（如图）：<br><img src="https://img-blog.csdnimg.cn/20200605201735728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="知识："><a href="#知识：" class="headerlink" title="知识："></a>知识：</h4><p>知识是我能进入到职场进行生存的基石，比如我对 machine learning 和计算机相关知识和理论的储备</p><h4 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h4><p>人是会制造并且使用工具的高等动物，良好的工具能帮我高效率的解决当下问题。例如spark、Pytorch、xgboost等</p><h4 id="逻辑："><a href="#逻辑：" class="headerlink" title="逻辑："></a>逻辑：</h4><p>能够把握模型直接的逻辑性，并且提高解决问题和思维发散的能力。 </p><h4 id="业务："><a href="#业务：" class="headerlink" title="业务："></a>业务：</h4><p>业务是一个公司的现金流，可以让技术更好的切合业务模型。比如展示广告和搜索广告在构建模型时的区别联系，如何根据公司的 business model 制定模型的 objective</p><h3 id="十年规划"><a href="#十年规划" class="headerlink" title="十年规划"></a>十年规划</h3><h4 id="1-3年：¬¬"><a href="#1-3年：¬¬" class="headerlink" title="1-3年：¬¬"></a>1-3年：¬¬</h4><ol><li>技术上持续精进</li><li>提高学历</li><li>提高语言交流与阅读能力</li><li>提高自我认知</li><li>自律</li><li>断舍离<h4 id="3-7年："><a href="#3-7年：" class="headerlink" title="3-7年："></a>3-7年：</h4></li><li>技术深度</li><li>提高职场能力</li><li>把握系统架构</li><li>基金股票</li><li>注重积累<h4 id="7-10年："><a href="#7-10年：" class="headerlink" title="7-10年："></a>7-10年：</h4></li><li>技术广度¬¬</li><li>提高业务与管理能力</li><li>投资理财</li><li>身体健康</li></ol><p>==十年很短，你可不要太当真哦，所以我想用十年的沉淀，去成为一名业界优秀的软件工程师。==<br>                                                                                                                by wvdon  2020年06月05日</p>]]></content>
    
    <summary type="html">
    
      When I was just a little girl, I asked my mother, &quot;What will I be? Will I be pretty? Will I be rich?&quot; Here&#39;s what she said to me：&quot;Que sera, sera, Whatever will be, will be; The future&#39;s not ours to see.&quot;
    
    </summary>
    
      <category term="plan" scheme="http://wvdon.com/categories/plan/"/>
    
    
      <category term="work" scheme="http://wvdon.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘上分思路</title>
    <link href="http://wvdon.com/2020/03/20/%E6%AF%94%E8%B5%9B%E6%80%9D%E8%B7%AF-%E9%98%85%E8%AF%BB/"/>
    <id>http://wvdon.com/2020/03/20/比赛思路-阅读/</id>
    <published>2020-03-20T07:50:39.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<p>比赛思路-阅读</p><p><a href="https://www.secrss.com/articles/15352" target="_blank" rel="noopener">https://www.secrss.com/articles/15352</a></p><p>BERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!</p><p><img src="https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg" alt></p><ul><li><p>每一个模型的基础上，进行10折交叉验证</p></li><li><p>利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。</p></li><li><p>模型融合+gru</p><p><img src="https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png" alt></p></li></ul><a id="more"></a><p>假图片</p><p><strong>基本统计特征：</strong></p><ul><li><p>图片尺寸</p></li><li><p>图片后缀类型</p></li><li><p>图片模式（RGB、灰度等）</p></li><li><p>清晰度、亮度</p></li><li><p>直方图分布特征</p></li><li><p>各通道的均值方差等统计特征</p></li></ul><p><strong>特征意义：</strong></p><ul><li>关键特征包括图片尺寸和清晰度特征</li><li>图片尺寸可以识别图片的来源，比如手机截图的尺寸和相机照片尺寸截然不同</li></ul><p>一般认为图像越清晰越是真的，因为图像经过ps篡改之后清晰度会下降，还有一种可能性是谣言往往传播得更快，传播过程中的每一次保存和发送都可能会降低清晰度</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛思路-阅读&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.secrss.com/articles/15352&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.secrss.com/articles/15352&lt;/a&gt;&lt;/p&gt;&lt;p&gt;BERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg&quot; alt&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每一个模型的基础上，进行10折交叉验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模型融合+gru&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png&quot; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="machineLearning" scheme="http://wvdon.com/categories/machineLearning/"/>
    
    
      <category term="数据处理" scheme="http://wvdon.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="比赛" scheme="http://wvdon.com/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>文本特征处理</title>
    <link href="http://wvdon.com/2020/02/27/%E6%96%87%E6%9C%AC%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    <id>http://wvdon.com/2020/02/27/文本特征提取/</id>
    <published>2020-02-27T07:50:39.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本特征提取"><a href="#文本特征提取" class="headerlink" title="文本特征提取"></a>文本特征提取</h1><p><a href="https://www.cnblogs.com/ljhdo/p/10578047.html" target="_blank" rel="noopener">参考</a></p><p>机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据</p><h3 id="One-Hot"><a href="#One-Hot" class="headerlink" title="One-Hot"></a>One-Hot</h3><p>One-Hot方法很简单，但是它的问题也很明显：</p><ul><li>没有考虑单词之间的相对位置，任意两个词之间都是孤立的；</li><li>如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；</li></ul><a id="more"></a><p><strong>One-Hot表示的应用</strong></p><p>sklearn使用词袋（Bag of Words）和TF-IDF模型来表示文本数据，这两个模型都是One-Hot表示的应用，其中，词袋模型对应的就是文档向量。</p><h3 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h3><p>词袋模型（BoW）是用于文本表示的最简单的方法， BoW把文本转换为文档中单词出现次数的矩阵，该模型只关注文档中是否出现给定的单词和单词出现频率，而舍弃文本的结构、单词出现的顺序和位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CountVectorizer(input=’content’, encoding=’utf<span class="number">-8</span>’, decode_error=’strict’, strip_accents=<span class="literal">None</span>, </span><br><span class="line">                lowercase=<span class="literal">True</span>,    preprocessor=<span class="literal">None</span>, tokenizer=<span class="literal">None</span>, stop_words=<span class="literal">None</span>, </span><br><span class="line">                token_pattern=’(?u)\b\w\w+\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class="line">                max_df=<span class="number">1.0</span>, min_df=<span class="number">1</span>, max_features=<span class="literal">None</span>, vocabulary=<span class="literal">None</span>, binary=<span class="literal">False</span>, </span><br><span class="line">                dtype=&lt;<span class="class"><span class="keyword">class</span> ‘<span class="title">numpy</span>.<span class="title">int64</span>’&gt;)</span></span><br></pre></td></tr></table></figure><p>常用参数注释:</p><ul><li>input：默认值是content，表示输入的是顺序的字符文本</li><li>decode_error：默认为strict，遇到不能解码的字符将报UnicodeDecodeError错误，设为ignore将会忽略解码错误</li><li>lowercase：默认值是True，在分词（Tokenize）之前把文本中的所有字符转换为小写。</li><li>preprocessor：预处理器，在分词之前对文本进行预处理，默认值是None</li><li>tokenizer：分词器，把文本字符串拆分成各个单词（token），默认值是None</li><li>analyzer：用于预处理和分词，可设置为string类型，如’word’, ‘char’, ‘char_wb’，默认值是word</li><li>stop_words：停用词表，如果值是english，使用内置的英语停用词列表；如果是一个列表，那么使用该列表作为停用词，设为None且max_df∈[0.7, 1.0)将自动根据当前的语料库建立停用词表</li><li>ngram_range：tuple（min_n，max_n），表示ngram模型的范围</li><li>max_df：可以设置为范围在[0.0 1.0]的浮点数，也可以设置为没有范围限制的整数，默认为1.0。这个参数的作用是作为一个阈值，当构造语料库的词汇表时，如果某个词的document frequence大于max_df，这个词不会被当作关键词。如果这个参数是float，则表示词出现的次数与语料库文档数的百分比，如果是int，则表示词出现的次数。如果参数中已经给定了vocabulary，则这个参数无效</li><li>min_df：类似于max_df，不同之处在于如果某个词的document frequence小于min_df，则这个词不会被当作关键词</li><li>max_features：对所有关键词的term frequency进行降序排序，只取前max_features个作为关键词集</li><li>vocabulary：默认为None，自动从输入文档中构建关键词集，也可以是一个字典或可迭代对象。</li><li>binary：默认为False，一个关键词在一篇文档中可能出现n次；如果binary=True，非零的n将全部置为1，这对需要布尔值输入的离散概率模型的有用的</li><li><strong>dtype</strong> ：用于设置fit_transform() 或 transform()函数返回的矩阵元素的数据类型</li></ul><p>模型的属性和方法：</p><ul><li>vocabulary_：词汇表，字典类型</li><li>get_feature_names()：所有文本的词汇，列表型</li><li>stop_words_：停用词列表</li></ul><p>模型的主要方法：</p><ul><li>fit(raw_document)：拟合模型，对文本分词，并构建词汇表等</li><li>transform(raw_documents)：把文档转换为文档-词矩阵</li><li>fit_transform(raw_documents)：拟合文档，并返回该文档的文档-词矩阵</li></ul><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>TF-IDF模型用于对特征信息量进行缩放，当一个词在特定的文档中经常出现，而在其他文档中出现的频次很低，那么给予该词较高的权重；当一次词在多个文档中出现的频次都很高，那么给予该词较低的权重。如果一次单词在特定的文档中出现的频次很高，而在其他文档中出现的频次很低，那么这个单词很可能是该文档独有的词，能够很好地描述该文档。</p><p><strong>1，TF-IDF模型计算原理</strong></p><p>TF（ Term Frequency）是词频，表示每个单词在文档中的数量（频数），TF依赖于BoW模型的输出。</p><p>IDF（Inverse Document Frequency）是逆文档频率，代表一个单词的普遍成都，当一个词越普遍（即有大量文档包含这个词）时，其IDF值越低；反之，则IDF值越高。IDF是包含该单词的文档数量和文档总数的对数缩放比例</p><p><img src="https://img-blog.csdnimg.cn/20210110162720178.png#pic_center" alt="在这里插入图片描述"></p><p>TF-IDF（术语频率 - 逆文档频率）模型是TF和IDF相乘的结果：TF-IDF=TF*IDF。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TfidfVectorizer(input=’content’, encoding=’utf<span class="number">-8</span>’, decode_error=’strict’, strip_accents=<span class="literal">None</span>, </span><br><span class="line">                lowercase=<span class="literal">True</span>,    preprocessor=<span class="literal">None</span>, tokenizer=<span class="literal">None</span>, stop_words=<span class="literal">None</span>, </span><br><span class="line">                token_pattern=’(?u)\b\w\w+\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class="line">                max_df=<span class="number">1.0</span>, min_df=<span class="number">1</span>, max_features=<span class="literal">None</span>, vocabulary=<span class="literal">None</span>, binary=<span class="literal">False</span>, </span><br><span class="line">                dtype=dtype=&lt;class ‘numpy.float64’&gt;, </span><br><span class="line">                norm=’l2’, use_idf=<span class="literal">True</span>, smooth_idf=<span class="literal">True</span>, sublinear_tf=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>大部分参数和CountVectorizer相同，TfidfVectorizer独有的参数注释：</p><ul><li>norm=’l2’：每个输出行具备单位规范，当引用’l2’范式时，所有向量元素的平方和为1；当应用l2范数时，两个向量之间的余弦相似度是它们的点积。 *’l1’：向量元素的绝对值之和为1。</li><li>use_idf=True：启用IDF来重新加权</li><li>smooth_idf=True：平滑idf权重，向文档-词频矩阵的所有位置加1，就像存在一个额外的文档，只包含词汇表中的每个术语一次，目的是为了防止零分裂。</li><li>sublinear_tf=False：应用次线性tf缩放，默认值是False</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文本特征提取&quot;&gt;&lt;a href=&quot;#文本特征提取&quot; class=&quot;headerlink&quot; title=&quot;文本特征提取&quot;&gt;&lt;/a&gt;文本特征提取&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/ljhdo/p/10578047.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;p&gt;机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据&lt;/p&gt;&lt;h3 id=&quot;One-Hot&quot;&gt;&lt;a href=&quot;#One-Hot&quot; class=&quot;headerlink&quot; title=&quot;One-Hot&quot;&gt;&lt;/a&gt;One-Hot&lt;/h3&gt;&lt;p&gt;One-Hot方法很简单，但是它的问题也很明显：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;没有考虑单词之间的相对位置，任意两个词之间都是孤立的；&lt;/li&gt;
&lt;li&gt;如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="machineLearning" scheme="http://wvdon.com/categories/machineLearning/"/>
    
    
      <category term="nlp" scheme="http://wvdon.com/tags/nlp/"/>
    
      <category term="特征处理" scheme="http://wvdon.com/tags/%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Sklearn-记录</title>
    <link href="http://wvdon.com/2019/12/27/machineLearning/sklearn%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81-%E4%BB%A5%E5%85%8D%E5%BF%98%E4%BA%86/"/>
    <id>http://wvdon.com/2019/12/27/machineLearning/sklearn学习代码-以免忘了/</id>
    <published>2019-12-27T12:12:51.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>scikit-learn：</p><ul><li>简单高效的数据挖掘和数据分析工具</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://scikit-learn.org/stable/user_guide.html" target="_blank" rel="noopener">scikit-learn 官方文档</a></p><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><h4 id="Fitting-and-predicting-estimator-basics"><a href="#Fitting-and-predicting-estimator-basics" class="headerlink" title="Fitting and predicting: estimator basics"></a>Fitting and predicting: estimator basics</h4><a id="more"></a><ul><li><a href="https://scikit-learn.org/stable/glossary.html#term-estimators" target="_blank" rel="noopener">estimators</a> 提供一系列封装好的机器学习算法。</li><li><a href="https://scikit-learn.org/stable/glossary.html#term-fit" target="_blank" rel="noopener">fit</a> ：fit到模型数据。</li></ul><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">clf = RandomForestClassifier(random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 2 samples, 3 features</span></span><br><span class="line">X = [[ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],[<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">1</span>]  <span class="comment"># classes of each sample</span></span><br><span class="line">clf.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict</span></span><br><span class="line">y_pred = clf.predict(X)</span><br></pre></td></tr></table></figure><h4 id="Transformers-and-pre-processors"><a href="#Transformers-and-pre-processors" class="headerlink" title="Transformers and pre-processors"></a>Transformers and pre-processors</h4><ul><li><a href="https://scikit-learn.org/stable/modules/compose.html#column-transformer" target="_blank" rel="noopener">ColumnTransformer</a> : 不同特征的转换处理</li></ul><p>sklearn.preprocessing 包含了比较多的数据预处理方法(放缩，编码)，能在pipeline应用的同时，也是安全的da ta leakage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StandardScaler</span><br><span class="line">OneHotEncoder</span><br><span class="line">CountVectorizer</span><br><span class="line">----</span><br></pre></td></tr></table></figure><h4 id="Pipelines-chaining-pre-processors-and-estimators"><a href="#Pipelines-chaining-pre-processors-and-estimators" class="headerlink" title="Pipelines: chaining pre-processors and estimators"></a>Pipelines: chaining pre-processors and estimators</h4><p>整合数据预处理与模型评估到一个pipeline上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment">#同过make_pipeline 把pre-processors 和 estimators整合到一块。</span></span><br><span class="line"><span class="comment"># create a pipeline object</span></span><br><span class="line">pipe = make_pipeline(</span><br><span class="line">    StandardScaler(),</span><br><span class="line">    LogisticRegression()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load the iris dataset and split it into train and test sets</span></span><br><span class="line">X, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit the whole pipeline</span></span><br><span class="line">pipe.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># we can now use it like any other estimator</span></span><br><span class="line">accuracy_score(pipe.predict(X_test), y_test)</span><br></pre></td></tr></table></figure><h4 id="Model-evaluation"><a href="#Model-evaluation" class="headerlink" title="Model evaluation"></a>Model evaluation</h4><ul><li><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate" target="_blank" rel="noopener"><code>cross_validate</code></a> </p></li><li><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html#sklearn.model_selection.train_test_split" target="_blank" rel="noopener"><code>train_test_split</code></a></p></li></ul><p>预测的数据，有时候不能很好的拟合到test数据，可能是泛化能力不好，也有可能是数据的split导致的train和test两部分数据的差异。可以利用交叉验证，在不同划分的数据上都进行拟合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_regression</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_validate</span><br><span class="line"></span><br><span class="line">X, y = make_regression(n_samples=<span class="number">1000</span>, random_state=<span class="number">0</span>)</span><br><span class="line">lr = LinearRegression()</span><br><span class="line"></span><br><span class="line">result = cross_validate(lr, X, y)  <span class="comment"># defaults to 5-fold CV</span></span><br><span class="line">result[<span class="string">'test_score'</span>]  <span class="comment"># r_squa</span></span><br></pre></td></tr></table></figure><p><img src="https://scikit-learn.org/stable/_images/grid_search_workflow.png" alt="Grid Search Workflow"></p><h4 id="Automatic-parameter-searches"><a href="#Automatic-parameter-searches" class="headerlink" title="Automatic parameter searches"></a>Automatic parameter searches</h4><ul><li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html#sklearn.model_selection.RandomizedSearchCV" target="_blank" rel="noopener"><code>RandomizedSearchCV</code></a></li></ul><p>Scikit-learn 提供了自动超参数的搜索工具。把最好的参数fit到模型上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">X, y = fetch_california_housing(return_X_y=<span class="literal">True</span>)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define the parameter space that will be searched over</span></span><br><span class="line">param_distributions = &#123;<span class="string">'n_estimators'</span>: randint(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">                       <span class="string">'max_depth'</span>: randint(<span class="number">5</span>, <span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># now create a searchCV object and fit it to the data</span></span><br><span class="line">search = RandomizedSearchCV(estimator=RandomForestRegressor(random_state=<span class="number">0</span>),</span><br><span class="line">                            n_iter=<span class="number">5</span>,</span><br><span class="line">                            param_distributions=param_distributions,</span><br><span class="line">                            random_state=<span class="number">0</span>)</span><br><span class="line">search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">search.best_params_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the search object now acts like a normal random forest estimator</span></span><br><span class="line"><span class="comment"># with max_depth=9 and n_estimators=4</span></span><br><span class="line">search.score(X_test, y_test)</span><br></pre></td></tr></table></figure><h2 id="pre-processing"><a href="#pre-processing" class="headerlink" title="pre-processing"></a>pre-processing</h2><p><a href="https://www.kaggle.com/code/alexisbcook/data-leakage/tutorial" target="_blank" rel="noopener">Data Leakage</a><br>Why? :independence between training and testing data.</p><p>how to prevent it:Using a pipeline for cross-validation and searching will largely keep you from this common pitfall</p><h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h2><h3 id="sklearn-datasets"><a href="#sklearn-datasets" class="headerlink" title="sklearn datasets"></a>sklearn datasets</h3><p>提供一些导入，在线下载及本地生成数据集的方法。</p><blockquote><p>sklearn.datasets模块主要提供了一些导入、在线下载及本地生成数据集的方法，可以通过dir或help命令查看，我们会发现主要有三种形式：load_<dataset_name>、fetch_<dataset_name>及make_<dataset_name>的方法</dataset_name></dataset_name></dataset_name></p></blockquote><h3 id="train-test-split"><a href="#train-test-split" class="headerlink" title="train_test_split"></a>train_test_split</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_splitX_train,X_test,y_train,y_test = train_test_split(X,y,random_state = <span class="number">2003</span>)</span><br></pre></td></tr></table></figure><h3 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets, linear_model <span class="comment"># 引用 sklearn库，主要为了使用其中的线性回归模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集，把数据写入到numpy数组</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 引用numpy库，主要用来做科学计算</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt   <span class="comment"># 引用matplotlib库，主要用来画图</span></span><br><span class="line">data = np.array([[<span class="number">152</span>,<span class="number">51</span>],[<span class="number">156</span>,<span class="number">53</span>],[<span class="number">160</span>,<span class="number">54</span>],[<span class="number">164</span>,<span class="number">55</span>],</span><br><span class="line">                 [<span class="number">168</span>,<span class="number">57</span>],[<span class="number">172</span>,<span class="number">60</span>],[<span class="number">176</span>,<span class="number">62</span>],[<span class="number">180</span>,<span class="number">65</span>],</span><br><span class="line">                 [<span class="number">184</span>,<span class="number">69</span>],[<span class="number">188</span>,<span class="number">72</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出数组的大小</span></span><br><span class="line">print(data.shape)</span><br><span class="line">x = data[:,<span class="number">0</span>].reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">y  = data[:,<span class="number">1</span>]</span><br><span class="line"><span class="comment"># TODO 1. 实例化一个线性回归的模型</span></span><br><span class="line">regr = linear_model.LinearRegression()</span><br><span class="line"><span class="comment"># TODO 2. 在x,y上训练一个线性回归模型。 如果训练顺利，则regr会存储训练完成之后的结果模型</span></span><br><span class="line"><span class="comment"># TODO 3. 画出身高与体重之间的关系</span></span><br><span class="line">regr.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出已训练</span></span><br><span class="line">plt.plot(x, regr.predict(x), color=<span class="string">'blue'</span>)<span class="comment"># 画x,y轴的标题</span></span><br><span class="line">plt.xlabel(<span class="string">'height (cm)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'weight (kg)'</span>)</span><br><span class="line">plt.show() <span class="comment"># 展示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用已经训练好的模型去预测身高为163的人的体重</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Standard weight for person with 163 is %.2f"</span>% regr.predict([[<span class="number">163</span>]]))</span><br></pre></td></tr></table></figure><h3 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h3><p>模型的泛化能力:它在新的环境中的适应能力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifierclf = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)clf.fit(X_train,y_train)correct = np.count_nonzero((clf.predict(X_test)==y_test==<span class="literal">True</span>)print(<span class="string">"auc is：%3.f"</span>%(corrrect/len(X_test))</span><br></pre></td></tr></table></figure><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><p>把数据集分为训练集和测试集</p><blockquote><p>常用的交叉验证技术叫做K折交叉验证(K-fold Cross Validation)。 我们先把训练数据再分成训练集和验证集，之后使用训练集来训练模型，然后再验证集上评估模型的准确率。举个例子，比如一个模型有个参数叫\alphaα，我们一开始不清楚要选择0.1还是1，所以这时候我们进行了交叉验证：把所有训练集分成K块，依次对每一个\alphaα值评估它的准确率。下面的动画讲述了如何使用K折交叉验证选出最合适的参数值。  </p></blockquote><blockquote><p>leave_one_out交叉验证，也就是每次只把一个样本当做验证数据，剩下的其他数据都当做是训练样本。  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form sklearn.model_selection import GirdSearchCVknn = KNeighborsClassifier()clf = GirdSearchCV(knn,parameters,cv=5)clf.fit(x,y)</span><br><span class="line">clf.best_score_clf.best_params_</span><br></pre></td></tr></table></figure><ul><li>绝对不能把测试数据用在交叉验证的过程中</li></ul><h3 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h3><p>目的是为了：消除有些变量变化的影响</p><p>1 线性归一化（Min-max normalization）</p><p>线性归一化指的是把特征值的范围映射到[0,1]区间</p><p>x_new  = (x - min())/(max()-min())</p><p>2 标准差标准化 （Z-score Normalization）</p><p>特征值映射到均值为0，标准差为1的正态分布 x_new = (x-mean(x)/std(x)</p><p>mean(x) x 的平均值 std(x) x的标注差</p><h2 id="KNN总结："><a href="#KNN总结：" class="headerlink" title="KNN总结："></a>KNN总结：</h2><ul><li>knn 是一个及其简单的算法</li><li>算法比较适合低纬空间</li><li>KNN 在训练过程中实质上不需要做任何事情，所以训练本身不产生任何时间上的消耗。</li></ul><p>merry-based  instance -based  (实际上没有训练学习的过程)</p><ul><li>KNN预测的时候要循环所以的样本数据，复杂度依赖于样本个数，达成KNN应用在大数据的瓶颈。。</li></ul><h3 id="结构化数据与非结构化数据"><a href="#结构化数据与非结构化数据" class="headerlink" title="结构化数据与非结构化数据"></a>结构化数据与非结构化数据</h3><p>非结构化数据：简单来讲，文本、图片、声音、视频这些都属于非结构化数据，需要做进一步的处理 结构化的数据指的是存放在数据库里的年龄，身高等这种信息</p><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p>图像来说，此过程相对简单。一般可以通过Python自带的库来读取图片，并把图片数据存放在矩阵(Matrix)或者张量(Tensor)里  <strong>- 图片是由像素来构成的，比如256*256或者128*128。两个值分别代表长宽上的像素。这个值越大图片就会越清晰。另外，对于彩色的图片，一个像素点一般由三维数组来构成，分别代表的是R,G,B三种颜色。除了RGB，其实还有其他常用的色彩空间。如果使用RGB来表示每一个像素点，一个大小为128*128像素的图片实际大小为128*128*3，是一个三维张量的形式。</strong>  </p><h4 id="图片特征"><a href="#图片特征" class="headerlink" title="图片特征"></a>图片特征</h4><ul><li><p>颜色特征(color histigram)</p></li><li><p>SIFT (Scale-invariant feature transfarm)</p><p>它是一个局部的特征，它会试图去寻找图片中的拐点这类的关键点，然后再通过一系列的处理最终得到一个SIFT向量</p></li><li><p>HOG (Histogram of Oriented Grandient) </p><p>通过计算和统计图像局部区域的梯度方向直方图来构建特征.由于HOG是在图像的局部方格单元上操作，所以它对图像几何的和光学的形变都能保持很好的不变性   </p></li></ul><h4 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h4><ul><li><p>对于一个中小型图片，它的大小一般大于256<em>256</em>3。如果把它转换成向量，其实维度的大小已经几十万了。这会导致消耗非常大的计算资源，所以一般情况下我们都会尝试对图片做一些降维操作。其实特征提取过程我们自然地可以理解为是降维过程。</p></li><li><p>降维操作会更好地保留图片中重要的信息，同时也帮助过滤掉无用的噪声  </p></li><li><p><strong>PCA(Principal Component Analysis)</strong>， (常用的降维工具)</p></li><li><p>它是一种无监督的学习方法，可以把高维的向量映射到低维的空间里。它的核心思路是对数据做线性的变换，然后在空间里选择信息量最大的Top K维度作为新的特征值     </p></li></ul><h3 id="matplotlib-pyplot（画图，展示图片）"><a href="#matplotlib-pyplot（画图，展示图片）" class="headerlink" title="matplotlib.pyplot（画图，展示图片）"></a>matplotlib.pyplot（画图，展示图片）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt# 读取图片img = plt.imread(&apos;&apos;)print(img.shape)plt.imshow(im445555555555555g)</span><br></pre></td></tr></table></figure><h3 id="缺失值次5"><a href="#缺失值次5" class="headerlink" title="缺失值次5"></a>缺失值次5</h3><p>删除缺失的行 或者缺失的列</p><p>填补缺失值:</p><ul><li>均值，最小值，最大值，特殊值填充 ,中位值</li></ul><h3 id="特征编码"><a href="#特征编码" class="headerlink" title="特征编码"></a>特征编码</h3><p>把非数值型数据转为数值型</p><p><strong>数据独热编码(one-hot encoding)</strong> 标签编码</p><p>标签编码不能直接作为特征输入到模型中，</p><p>因为1,2,3,,,,连续的特征标签，模型是会认为这些类别是有大小关系的。</p><p>而独热编码是平行的。</p><blockquote><p>如果我们直接把类别特征看作是具体的数比如0，1，2… 那这时候，数与数之间是有大小关系的，比如2要大于1，1要大于0，而且这些大小相关的信息必然会用到模型当中  但这就跟原来特征的特点产生了矛盾，因为对于深度学习，数据分析来说它们之间并不存在所谓的“大小”，可以理解为平行关系。所以对于这类特征来说，直接用0，1，2.. 的方式来表示是存在问题的，所以结论是不能这么做。  </p></blockquote><p><strong>数值型的变量</strong> 可以当做特征直接输入，也可以进行离散化操作  </p>]]></content>
    
    <summary type="html">
    
      Scikit-learn is an open source machine learning library that supports supervised and unsupervised learning. It also provides various tools for model fitting, data preprocessing, model selection, model evaluation, and many other utilities
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="sklearn" scheme="http://wvdon.com/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/"/>
    <id>http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/</id>
    <published>2019-10-18T07:50:39.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210110163536333.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>unnatural 石原里美 入坑了她的美</p></blockquote><h2 id="Linux基本知识"><a href="#Linux基本知识" class="headerlink" title="Linux基本知识"></a>Linux基本知识</h2><h5 id="查询命令-man"><a href="#查询命令-man" class="headerlink" title="查询命令 man"></a>查询命令 man</h5><p>linux的命令和参数太多，而且容易记错，我们可以通过man [命令] 来查看如何命令的使用文档，这才是学习命令最好的办法。</p><a id="more"></a><p>其次要首先搞懂：文件，用户与组的概念。</p><p><code>man ls</code></p><p>or</p><p><code>ls --help</code> 会以中文展示出来。</p><p>Tips:</p><ul><li>Use the manual man for more information on commands.</li><li>If you want to rerun a command you can use the up-arrow key to recall the previous entry.</li><li>You can press TAB to ask your shell to try to complete a file name. It is convenient! Always try to have the shell fill in the filename for you, that way you will never mistype these”</li></ul><p>摘录来自: “The Biostar Handbook: 2nd Edition。” Apple Books. </p><h2 id="Linux的文件权限和目录配置"><a href="#Linux的文件权限和目录配置" class="headerlink" title="Linux的文件权限和目录配置"></a>Linux的文件权限和目录配置</h2><h5 id="用户组与用户"><a href="#用户组与用户" class="headerlink" title="用户组与用户"></a>用户组与用户</h5><p><img src="!%5B%E5%9C%A8%E8%BF%99%E9%87%8C%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%5D(http://img-blog.csdnimg.cn/20210110163703465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70#pic_center" alt="1571385663320"></p><p>其中 老王家就代表一个用户组 ，单个人代表为用户。</p><blockquote><ul><li>linux的用户是记录在<br>/etc/passwd</li><li>密码记录在<br>/etc/shadow</li><li>所有的组记录在<br>/etc/group</li></ul></blockquote><h6 id="添加新用户-："><a href="#添加新用户-：" class="headerlink" title="添加新用户 ："></a>添加新用户 ：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser wvdon </span><br><span class="line"><span class="meta">#</span>修改所添加用户的密码</span><br><span class="line">passwd wvdon</span><br></pre></td></tr></table></figure><p>添加用户之后可以把用户添加到相应的组中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd lab</span><br><span class="line"><span class="meta">#</span> 将用户添加到组里面</span><br><span class="line">sudo useradd -g labuser la</span><br></pre></td></tr></table></figure><p> 新建的用户如果想使用root,将bashrc  copy 过去。</p><p>如果新建的用户没有用户目录，就新建一下用户目录。</p><p><code>sudo cp /home/wvdon/.bashrc /home/labuser/.bashrc</code></p><h5 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h5><p>文件的权限被分为 可读(read) 可写(write) 可执行（execute） 简称为 r w x</p><p>用数字表示 r:4 w:2 x:1</p><p>文件显示的权限</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>  -rw-rw-r-- 1 wuweidong061 wvdon    0 Oct 18 23:08 testfile.txt</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>①第一个符合 为 d 或者 - 分别代表 文件夹或者文件<br>②2-4符号代表所属用户的权限 rw- 即可读可写（4+2+0）<br>③5-7符号代表所属用户组的权限 rw- 即可读可写（4+2+0）<br>④8-10符号代表其他用户的权限为r–仅读(4)<br>⑤代表连接数<br>⑥代表 文件所有者 wuweidong061<br>⑦代表 文件所属用户组 wvdon<br>⑧时间代表文件最后修改的时间<br>⑨文件名</p></blockquote></blockquote><h5 id="修改文件用户与权限的三个命令"><a href="#修改文件用户与权限的三个命令" class="headerlink" title="修改文件用户与权限的三个命令"></a>修改文件用户与权限的三个命令</h5><h6 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>chgrp=change group</span><br><span class="line"><span class="meta">#</span>修改用户组</span><br><span class="line">-R 递归更改(连着文件夹下的目录和文件都进行更改)</span><br><span class="line">chgrp user filename</span><br></pre></td></tr></table></figure><h6 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>chown=change owner</span><br><span class="line"><span class="meta">#</span>修改文件所属者</span><br><span class="line">chown [-R] 账户名称 文件或目录</span><br></pre></td></tr></table></figure><h6 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>chmod = chmod mode</span><br><span class="line"><span class="meta">#</span>更改文件的权限</span><br><span class="line"><span class="meta">#</span>一个文件共有三种权限分别是w r x，同时一个文件也对三种用户组状态设置权限 所有者用户② 用户组③ 其他用户④</span><br><span class="line"><span class="meta">#</span>更改权限的方法有三种，</span><br><span class="line"><span class="meta">#</span>1 利用对应的数值</span><br><span class="line">chmod 777 filename</span><br><span class="line"><span class="meta">#</span>2 利用对应的身份状态设置</span><br><span class="line"><span class="meta">#</span> a u g o代表 all[所有用户] user[文件所有者] group[用户所有组] other[其他用户] </span><br><span class="line"><span class="meta">#</span>设置类型可以为 + - =</span><br><span class="line">chmod u=rwx,g=rx,o=x filename</span><br><span class="line"><span class="meta">#</span>增加或者减少文件的权限 可以通过 </span><br><span class="line"><span class="meta">#</span>chmod [用户类型][设置类型 + -][权限w r x] filename</span><br><span class="line"><span class="meta">#</span>例如添加w或者减去x</span><br><span class="line">chmod a+w filename</span><br><span class="line">chmod a-x filename</span><br></pre></td></tr></table></figure><h5 id="对文件与目录的常见操作"><a href="#对文件与目录的常见操作" class="headerlink" title="对文件与目录的常见操作"></a>对文件与目录的常见操作</h5><h3 id="1-ls"><a href="#1-ls" class="headerlink" title="1. ls"></a>1. ls</h3><p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ls [-aAdfFhilnrRSt] file|dir</span><br><span class="line">-a ：列出全部的文件</span><br><span class="line">-d ：仅列出目录本身</span><br><span class="line">-l ：以长数据串行列出，包含文件的属性与权限等等数据</span><br></pre></td></tr></table></figure><h3 id="2-cd"><a href="#2-cd" class="headerlink" title="2. cd"></a>2. cd</h3><p>更换当前目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><h3 id="3-mkdir"><a href="#3-mkdir" class="headerlink" title="3. mkdir"></a>3. mkdir</h3><p>创建目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir [-mp] 目录名称</span><br><span class="line">-m ：配置目录权限</span><br><span class="line">-p ：递归创建目录</span><br></pre></td></tr></table></figure><h3 id="4-rmdir"><a href="#4-rmdir" class="headerlink" title="4. rmdir"></a>4. rmdir</h3><p>删除目录，目录必须为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br><span class="line">-p ：递归删除目录</span><br></pre></td></tr></table></figure><h3 id="5-touch"><a href="#5-touch" class="headerlink" title="5. touch"></a>5. touch</h3><p>更新文件时间或者建立新文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># touch [-acdmt] filename</span><br><span class="line">-a ： 更新 atime</span><br><span class="line">-c ： 更新 ctime，若该文件不存在则不建立新文件</span><br><span class="line">-m ： 更新 mtime</span><br><span class="line">-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=&quot;日期或时间&quot;</span><br><span class="line">-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure><h3 id="6-cp"><a href="#6-cp" class="headerlink" title="6. cp"></a>6. cp</h3><p>复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp [-adfilprsu] source destination</span><br><span class="line">-a ：相当于 -dr --preserve=all</span><br><span class="line">-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身</span><br><span class="line">-i ：若目标文件已经存在时，在覆盖前会先询问</span><br><span class="line">-p ：连同文件的属性一起复制过去</span><br><span class="line">-r ：递归复制</span><br><span class="line">-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制</span><br><span class="line">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了</span><br></pre></td></tr></table></figure><h3 id="7-rm"><a href="#7-rm" class="headerlink" title="7. rm"></a>7. rm</h3><p>删除文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># rm [-fir] 文件或目录</span><br><span class="line">-r ：递归删除</span><br></pre></td></tr></table></figure><h3 id="8-mv"><a href="#8-mv" class="headerlink" title="8. mv"></a>8. mv</h3><p>移动文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mv [-fiu] source destination</span><br><span class="line"># mv [options] source1 source2 source3 .... directory</span><br><span class="line">-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br></pre></td></tr></table></figure><p>“How do I view the data one page at a time”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more file</span><br></pre></td></tr></table></figure><p>Biostat:</p><p><code>cat SGD_features.tab |cut -f 2|sort |uniq -c|sort -rn|head</code></p><p>tree </p><p>Rsync|scp</p><p><a href="http://c.biancheng.net/linux/sed.html" target="_blank" rel="noopener">Sed</a></p><p>cut</p><p>awk</p><h2 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h2><p><code>$1,$2 可以在终端依次接受参数。</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for name in *.fastq; do</span><br><span class="line">    echo cutadapt -l 20 $name -o $name.trimmed.fq</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin=$(date +%s -d $class)</span><br><span class="line">current_date=&quot;`date +%s`&quot;</span><br><span class="line">current=$(($current_date-28800-$begin))</span><br><span class="line">echo $(($current/60</span><br></pre></td></tr></table></figure><p><code>md5sum chr22.fa.gz &gt;md5.txt</code></p><p><code>md5sum -c md5.txt</code></p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>Ctrl + Z : 终止执行<br>Ctrl + C :暂停执行，挂到后台。<br>jobs :查看在后台执行的进程<br><strong>&amp;</strong> ： 命令末尾加上，可在后台执行。<br>fg n: 将命令进程号码为N的命令进程放到前台执行<br>bg n ：将命令进程号码为N的命令进程放到后台执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup comand &amp;&gt;nohup.out</span><br><span class="line"><span class="built_in">fg</span> 3</span><br></pre></td></tr></table></figure><h2 id="附表"><a href="#附表" class="headerlink" title="附表"></a>附表</h2><h3 id="命令缩写一览表"><a href="#命令缩写一览表" class="headerlink" title="命令缩写一览表"></a>命令缩写一览表</h3><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>每每都会忘记linux命令，不过我记得全拼的时候可能就能想起来了。                                                                                                     </p><p>​                                                                                                                                                                              </p><blockquote><p>wc :word counter(计算行数,单词数，字母数)   “prints the number of <strong>lines, words, and characters</strong> in the stream:”</p><p>ls：list(列出目录内容)</p><p>cd：Change Directory（改变目录）</p><p>su:switch user 切换用户</p><p>rpm:redhat package manager 红帽子打包管理器</p><p>pwd:print work directory 打印当前目录显示出当前工作目录的绝对路径</p><p>ps: process status(进程状态，类似于 windows 的任务管理器)</p><p>常用参数：－auxf</p><p>ps -auxf 显示进程状态</p><p>df: disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</p><p>rpm：即 RedHat Package Management，是 RedHat 的发明之一</p><p>rmdir：Remove Directory（删除目录）</p><p>rm：Remove（删除目录或文件）</p><p>cat: concatenate 连锁 cat file1 file2&gt;&gt;file3把文件1和文件2的内容联合起来放到 file3中</p><p>insmod: install module,载入模块</p><p>ln -s : link -soft 创建一个软链接，相当于创建一个快捷方式</p><p>mkdir：Make Directory(创建目录</p><p>touch</p><p>man: Manual</p><p>pwd：Print working directory</p><p>su：Swith user</p><p>cd：Change directory</p><p>ls：List files</p><p>ps：Process Status</p><p>mkdir：Make directory</p><p>rmdir：Remove directory</p><p>mkfs: Make file system</p><p>fsck：File system check</p><p>cat: Concatenate</p><p>uname: Unix name</p><p>df: Disk free</p><p>du: Disk usage</p><p>lsmod: List modules</p><p>mv: Move file</p><p>rm: Remove file</p><p>cp: Copy file</p><p>ln: Link files</p><p>fg: Foreground</p><p>bg: Background</p><p>chown: Change owner</p><p>chgrp: Change group</p><p>chmod: Change mode</p><p>umount: Unmount</p><p>dd: 本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”</p><p>tar：Tape archive</p><p>ldd：List dynamic dependencies</p><p>insmod：Install module</p><p>rmmod：Remove module</p><p>lsmod：List module</p><p>文件结尾的”rc”（如.bashrc、.xinitrc 等）：Resource configuration</p><p>Knnxxx / Snnxxx（位于 rcx.d 目录下）：K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）</p><p>.a（扩展名 a）：Archive，static library</p><p>.so（扩展名 so）：Shared object，dynamically linked library</p><p>.o（扩展名 o）：Object file，complied result of C/C++ source file</p><p>RPM：Red hat package manager</p><p>dpkg：Debian package manager</p><p>apt：Advanced package tool（Debian 或基于 Debian 的发行版中提供）</p><p>bin = BINaries</p><p>/dev = DEVices</p><p>/etc = ETCetera</p><p>/lib = LIBrary</p><p>/proc = PROCesses</p><p>/sbin = Superuser BINaries</p><p>/tmp = TeMPorary</p><p>/usr = Unix Shared Resources</p><p>/var = VARiable ?</p><p>FIFO = First In, First Out</p><p>GRUB = GRand Unified Bootloader</p><p>IFS = Internal Field Seperators</p><p>Tk = ToolKit</p><p>VT = Video Terminal</p><p>YaST = Yet Another Setup Tool</p><p>apache = “a patchy” server</p><p>apt = Advanced Packaging Tool</p><p>ar = archiver</p><p>as = assembler</p><p>awk = “Aho Weiberger and Kernighan” 三个作者的姓的第一个字母</p><p>bash = Bourne Again SHell</p><p>bc = Basic (Better) Calculator</p><p>bg = BackGround</p><p>biff = 作者 Heidi Stettner 在 U.C.Berkely 养的一条狗,喜欢对邮递员汪汪叫。</p><p>cal = CALendar</p><p>cat = CATenate</p><p>cd = Change Directory</p><p>chgrp = CHange GRouP</p><p>chmod = CHange MODe</p><p>chown = CHange OWNer</p><p>chsh = CHange SHell</p><p>cmp = compare</p><p>cobra = Common Object Request Broker Architecture</p><p>comm = common</p><p>cp = CoPy</p><p>cpio = CoPy In and Out</p><p>cpp = C Pre Processor</p><p>cron = Chronos 希腊文时间</p><p>cups = Common Unix Printing System</p><p>cvs = Current Version System</p><p>daemon = Disk And Execution MONitor</p><p>dc = Desk Calculator</p><p>dd = Disk Dump</p><p>df = Disk Free</p><p>diff = DIFFerence</p><p>dmesg = diagnostic message</p><p>du = Disk Usage</p><p>ed = editor</p><p>egrep = Extended GREP</p><p>elf = Extensible Linking Format</p><p>elm = ELectronic Mail</p><p>emacs = Editor MACroS</p><p>eval = EVALuate</p><p>ex = EXtended</p><p>exec = EXECute</p><p>fd = file descriptors</p><p>fg = ForeGround</p><p>fgrep = Fixed GREP</p><p>fmt = format</p><p>fsck = File System ChecK</p><p>fstab = FileSystem TABle</p><p>fvwm = F*** Virtual Window Manager</p><p>gawk = GNU AWK</p><p>gpg = GNU Privacy Guard</p><p>groff = GNU troff</p><p>hal = Hardware Abstraction Layer</p><p>joe = Joe’s Own Editor</p><p>ksh = Korn SHell</p><p>lame = Lame Ain’t an MP3 Encoder</p><p>lex = LEXical analyser</p><p>lisp = LISt Processing = Lots of Irritating Superfluous Parentheses</p><p>ln = LiNk</p><p>lpr = Line PRint</p><p>ls = list</p><p>lsof = LiSt Open Files</p><p>m4 = Macro processor Version 4</p><p>man = MANual pages</p><p>mawk = Mike Brennan’s AWK</p><p>mc = Midnight Commander</p><p>mkfs = MaKe FileSystem</p><p>mknod = MaKe NODe</p><p>motd = Message of The Day</p><p>mozilla = MOsaic GodZILLa</p><p>mtab = Mount TABle</p><p>mv = MoVe</p><p>nano = Nano’s ANOther editor</p><p>nawk = New AWK</p><p>nl = Number of Lines</p><p>nm = names</p><p>nohup = No HangUP</p><p>nroff = New ROFF</p><p>od = Octal Dump</p><p>passwd = PASSWorD</p><p>pg = pager</p><p>pico = PIne’s message COmposition editor</p><p>pine = “Program for Internet News &amp; Email” = “Pine is not Elm”</p><p>ping = 拟声又 = Packet InterNet Grouper</p><p>pirntcap = PRINTer CAPability</p><p>popd = POP Directory</p><p>pr = pre</p><p>printf = PRINT Formatted</p><p>ps = Processes Status</p><p>pty = pseudo tty</p><p>pushd = PUSH Directory</p><p>pwd = Print Working Directory</p><p>rc = runcom = run command, rc 还是 plan9的 shell</p><p>rev = REVerse</p><p>rm = ReMove</p><p>rn = Read News</p><p>roff = RunOFF</p><p>rpm = RPM Package Manager = RedHat Package Manager</p><p>rsh, rlogin, rvim 中的 r = Remote</p><p>rxvt = ouR XVT</p><p>seamoneky = 我</p><p>sed = Stream EDitor</p><p>seq = SEQuence</p><p>shar = SHell ARchive</p><p>slrn = S-Lang rn</p><p>ssh = Secure SHell</p><p>ssl = Secure Sockets Layer</p><p>stty = Set TTY</p><p>su = Substitute User</p><p>svn = SubVersioN</p><p>tar = Tape ARchive</p><p>tcsh = TENEX C shell</p><p>tee = T (T 形水管接口)</p><p>telnet = TEminaL over Network</p><p>termcap = terminal capability</p><p>terminfo = terminal information</p><p>tex = τ</p><p>wc  word counter</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>鸟哥的linux私房菜 第三版 </p><p><a href="https://cyc2018.github.io/CS-Notes/#/notes/Linux" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes/#/notes/Linux</a></p><p><a href="https://blog.csdn.net/sinat_29742125/article/details/52818115" target="_blank" rel="noopener">命令缩写</a></p><p><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">查询手册</a></p>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="linux" scheme="http://wvdon.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo:使用记录</title>
    <link href="http://wvdon.com/2019/09/27/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://wvdon.com/2019/09/27/Hexo的使用笔记/</id>
    <published>2019-09-27T15:42:57.000Z</published>
    <updated>2023-04-08T07:47:32.623Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。</p></blockquote><p>文件头</p><blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt; ---</span></span><br><span class="line"><span class="string">&gt; title: '题目'</span></span><br><span class="line"><span class="string">&gt; date: 2019-08-02 15:50:39</span></span><br><span class="line"><span class="string">&gt; tags: </span></span><br><span class="line"><span class="string">&gt;   - 1</span></span><br><span class="line"><span class="string">&gt;   - 2</span></span><br><span class="line"><span class="string">&gt;   - 3</span></span><br><span class="line"><span class="string">&gt; categories: [分类]</span></span><br><span class="line"><span class="string">&gt; mathjax: true</span></span><br><span class="line"><span class="string">&gt; description: 描述</span></span><br><span class="line"><span class="string">&gt; ---</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><a id="more"></a><blockquote></blockquote><p>备忘：</p><blockquote><p>hexo s 部署到本地</p><p>hexo g 生成静态文件</p><p>hexo d 部署到github上</p></blockquote><p>重新部署本地时</p><blockquote><p>安装node.js  url地址是 </p><p><a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a> 。（高版本在同步到git 可能会出现问题<code>TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</code>）</p><p>选择低版本 <code>https://nodejs.org/dist/v12.4.0/node-v12.4.0-x64.msi</code></p><p>npm安装 <code>npm install -g hexo-cli</code> </p></blockquote><p><code>&lt;!-- more --&gt;</code> 可以手动截取显示的字数。</p>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="hexo" scheme="http://wvdon.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘：Python使用随机森林预测泰坦尼克号生存</title>
    <link href="http://wvdon.com/2019/09/09/machineLearning/titanc/"/>
    <id>http://wvdon.com/2019/09/09/machineLearning/titanc/</id>
    <published>2019-09-09T04:20:00.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><ul><li>Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况</li></ul><p>数据来源kaggle</p><a id="more"></a><h2 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1 数据预处理"></a>1 数据预处理</h2><h3 id="1-1-读入数据"><a href="#1-1-读入数据" class="headerlink" title="1.1 读入数据"></a>1.1 读入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data_train = pd.read_csv(<span class="string">r'train.csv'</span>)</span><br><span class="line">data_test = pd.read_csv(<span class="string">r'test.csv'</span>)</span><br><span class="line">data_train.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><h3 id="1-2-训练集与数据集"><a href="#1-2-训练集与数据集" class="headerlink" title="1.2 训练集与数据集"></a>1.2 训练集与数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_test.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>3</td>      <td>Kelly, Mr. James</td>      <td>male</td>      <td>34.5</td>      <td>0</td>      <td>0</td>      <td>330911</td>      <td>7.8292</td>      <td>NaN</td>      <td>Q</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>3</td>      <td>Wilkes, Mrs. James (Ellen Needs)</td>      <td>female</td>      <td>47.0</td>      <td>1</td>      <td>0</td>      <td>363272</td>      <td>7.0000</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>2</td>      <td>Myles, Mr. Thomas Francis</td>      <td>male</td>      <td>62.0</td>      <td>0</td>      <td>0</td>      <td>240276</td>      <td>9.6875</td>      <td>NaN</td>      <td>Q</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>3</td>      <td>Wirz, Mr. Albert</td>      <td>male</td>      <td>27.0</td>      <td>0</td>      <td>0</td>      <td>315154</td>      <td>8.6625</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>3</td>      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>      <td>female</td>      <td>22.0</td>      <td>1</td>      <td>1</td>      <td>3101298</td>      <td>12.2875</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><h3 id="1-2-1-查看数据完整性"><a href="#1-2-1-查看数据完整性" class="headerlink" title="1.2.1 查看数据完整性"></a>1.2.1 查看数据完整性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_train.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns):PassengerId    891 non-null int64Survived       891 non-null int64Pclass         891 non-null int64Name           891 non-null objectSex            891 non-null objectAge            714 non-null float64SibSp          891 non-null int64Parch          891 non-null int64Ticket         891 non-null objectFare           891 non-null float64Cabin          204 non-null objectEmbarked       889 non-null objectdtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><p>总共有891组数据，其中age是714条，Cabin是204条，共计12个变量</p><blockquote><p>乘客ID，存活情况，船票级别，乘客姓名，性别，年龄，船上的兄弟姐妹以及配偶的人数，船上的父母以及子女的人数，船票编号，船票费用，所在船舱，登船的港口</p></blockquote><h3 id="1-2-2-查看训练数据描述信息"><a href="#1-2-2-查看训练数据描述信息" class="headerlink" title="1.2.2 查看训练数据描述信息"></a>1.2.2 查看训练数据描述信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_train.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>    </tr>  </thead>  <tbody>    <tr>      <td>count</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>714.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <td>mean</td>      <td>446.000000</td>      <td>0.383838</td>      <td>2.308642</td>      <td>29.699118</td>      <td>0.523008</td>      <td>0.381594</td>      <td>32.204208</td>    </tr>    <tr>      <td>std</td>      <td>257.353842</td>      <td>0.486592</td>      <td>0.836071</td>      <td>14.526497</td>      <td>1.102743</td>      <td>0.806057</td>      <td>49.693429</td>    </tr>    <tr>      <td>min</td>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.420000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <td>25%</td>      <td>223.500000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>20.125000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>7.910400</td>    </tr>    <tr>      <td>50%</td>      <td>446.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>28.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>14.454200</td>    </tr>    <tr>      <td>75%</td>      <td>668.500000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>38.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>31.000000</td>    </tr>    <tr>      <td>max</td>      <td>891.000000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>80.000000</td>      <td>8.000000</td>      <td>6.000000</td>      <td>512.329200</td>    </tr>  </tbody></table></div><p>mean代表各项的均值，获救率为0.383838</p><h3 id="1-3-1-年龄数据简化分组"><a href="#1-3-1-年龄数据简化分组" class="headerlink" title="1.3.1  年龄数据简化分组"></a>1.3.1  年龄数据简化分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_ages</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="comment">#把缺失值补上，方便分组</span></span><br><span class="line">    df.Age = df.Age.fillna(<span class="number">-0.5</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment">#把Age分为不同区间,-1到0,1-5,6-12...,60以上,放到bins里，八个区间，对应的八个区间名称在group_names那</span></span><br><span class="line">    bins = (<span class="number">-1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">60</span>, <span class="number">120</span>)</span><br><span class="line">    group_names = [<span class="string">'Unknown'</span>, <span class="string">'Baby'</span>, <span class="string">'Child'</span>, <span class="string">'Teenager'</span>, <span class="string">'Student'</span>, <span class="string">'Young Adult'</span>, <span class="string">'Adult'</span>, <span class="string">'Senior'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开始对数据进行离散化，pandas.cut就是这个功能</span></span><br><span class="line">    catagories = pd.cut(df.Age,bins,labels=group_names)</span><br><span class="line">    df.Age = catagories</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>简化Cabin，就是取字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_cabin</span><span class="params">(df)</span>:</span></span><br><span class="line">    df.Cabin = df.Cabin.fillna(<span class="string">'N'</span>)</span><br><span class="line">    df.Cabin = df.Cabin.apply(<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>简化工资，也就是分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_fare</span><span class="params">(df)</span>:</span></span><br><span class="line">    df.Fare = df.Fare.fillna(<span class="number">-0.5</span>)</span><br><span class="line">    bins = (<span class="number">-1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">1000</span>)</span><br><span class="line">    group_names = [<span class="string">'Unknown'</span>, <span class="string">'1_quartile'</span>, <span class="string">'2_quartile'</span>, <span class="string">'3_quartile'</span>, <span class="string">'4_quartile'</span>]</span><br><span class="line">    catagories = pd.cut(df.Fare,bins,labels=group_names)</span><br><span class="line">    df.Fare = catagories</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>删除无用信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_drop</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.drop([<span class="string">'Name'</span>,<span class="string">'Ticket'</span>,<span class="string">'Embarked'</span>],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>整合一遍，凑成新表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_features</span><span class="params">(df)</span>:</span></span><br><span class="line">    df = simplify_ages(df)</span><br><span class="line">    df = simplify_cabin(df)</span><br><span class="line">    df = simplify_fare(df)</span><br><span class="line">    df = simplify_drop(df)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>执行读取新表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#必须要再读取一遍原来的表，不然会报错,不仅训练集要简化，测试集也要，两者的特征名称要一致</span></span><br><span class="line">data_train = pd.read_csv(<span class="string">r'train.csv'</span>)</span><br><span class="line">data_train = transform_features(data_train)</span><br><span class="line">data_test = transform_features(data_test)</span><br><span class="line">data_train.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Cabin</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>Student</td>      <td>1</td>      <td>0</td>      <td>1_quartile</td>      <td>N</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>Adult</td>      <td>1</td>      <td>0</td>      <td>4_quartile</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>Young Adult</td>      <td>0</td>      <td>0</td>      <td>1_quartile</td>      <td>N</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>Young Adult</td>      <td>1</td>      <td>0</td>      <td>4_quartile</td>      <td>C</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>Young Adult</td>      <td>0</td>      <td>0</td>      <td>2_quartile</td>      <td>N</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#data_train=data_train.drop(["PassengerId","Cabin","Name"],axis=1)</span></span><br><span class="line">data_train.head(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>S</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>195</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>58.0</td>      <td>0</td>      <td>0</td>      <td>PC 17569</td>      <td>146.5208</td>      <td>C</td>    </tr>    <tr>      <td>196</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>NaN</td>      <td>0</td>      <td>0</td>      <td>368703</td>      <td>7.7500</td>      <td>Q</td>    </tr>    <tr>      <td>197</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>42.0</td>      <td>0</td>      <td>1</td>      <td>4579</td>      <td>8.4042</td>      <td>S</td>    </tr>    <tr>      <td>198</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>NaN</td>      <td>0</td>      <td>0</td>      <td>370370</td>      <td>7.7500</td>      <td>Q</td>    </tr>    <tr>      <td>199</td>      <td>0</td>      <td>2</td>      <td>female</td>      <td>24.0</td>      <td>0</td>      <td>0</td>      <td>248747</td>      <td>13.0000</td>      <td>S</td>    </tr>  </tbody></table><p>200 rows × 9 columns</p></div><p>选取我们需要的那几个列作为输入， 对于票价和姓名我就舍弃了，姓名没什么用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'PassengerId'</span>,<span class="string">'Survived'</span>,<span class="string">'Pclass'</span>,<span class="string">'Sex'</span>,<span class="string">'Age'</span>,<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>,<span class="string">'Fare'</span>,<span class="string">'Embarked'</span>]</span><br><span class="line">data_tr=data_train[cols].copy()</span><br><span class="line">data_tr.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'PassengerId'</span>,<span class="string">'Pclass'</span>,<span class="string">'Sex'</span>,<span class="string">'Age'</span>,<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>,<span class="string">'Fare'</span>,<span class="string">'Embarked'</span>]</span><br><span class="line">data_te=data_test[cols].copy()</span><br><span class="line">data_te.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>3</td>      <td>male</td>      <td>34.5</td>      <td>0</td>      <td>0</td>      <td>7.8292</td>      <td>Q</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>3</td>      <td>female</td>      <td>47.0</td>      <td>1</td>      <td>0</td>      <td>7.0000</td>      <td>S</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>2</td>      <td>male</td>      <td>62.0</td>      <td>0</td>      <td>0</td>      <td>9.6875</td>      <td>Q</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>3</td>      <td>male</td>      <td>27.0</td>      <td>0</td>      <td>0</td>      <td>8.6625</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>3</td>      <td>female</td>      <td>22.0</td>      <td>1</td>      <td>1</td>      <td>12.2875</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_tr.isnull().sum()</span><br><span class="line">data_te.isnull().sum()</span><br></pre></td></tr></table></figure><pre><code>PassengerId     0Pclass          0Sex             0Age            86SibSp           0Parch           0Fare            1Embarked        0dtype: int64</code></pre><p>填充数据，，，，，，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age_mean = data_tr[<span class="string">'Age'</span>].mean()</span><br><span class="line">data_tr[<span class="string">'Age'</span>] = data_tr[<span class="string">'Age'</span>].fillna(age_mean)</span><br><span class="line">data_tr[<span class="string">'Embarked'</span>] = data_tr[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br><span class="line">data_tr.isnull().sum()</span><br></pre></td></tr></table></figure><pre><code>PassengerId    0Survived       0Pclass         0Sex            0Age            0SibSp          0Parch          0Fare           0Embarked       0dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_tr.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>    </tr>  </tbody></table></div><p>用数组特征化编码年龄和S C Q等等，，因为随机森林的输入需要数值，字符不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import numpy as np</span></span><br><span class="line">age_mean = data_te[<span class="string">'Age'</span>].mean()</span><br><span class="line">data_te[<span class="string">'Age'</span>] = data_te[<span class="string">'Age'</span>].fillna(age_mean)</span><br><span class="line">age_mean = data_te[<span class="string">'Fare'</span>].mean()</span><br><span class="line">data_te[<span class="string">'Fare'</span>] = data_te[<span class="string">'Fare'</span>].fillna(age_mean)</span><br><span class="line"><span class="comment">#data_te.replace(np.na, 0, inplace=True)</span></span><br><span class="line"><span class="comment">#data_te.replace(np.inf, 0, inplace=True)</span></span><br><span class="line">data_te[<span class="string">'Sex'</span>]= data_te[<span class="string">'Sex'</span>].map(&#123;<span class="string">'female'</span>:<span class="number">0</span>, <span class="string">'male'</span>: <span class="number">1</span>&#125;).astype(int)</span><br><span class="line">data_te[<span class="string">'Embarked'</span>]= data_te[<span class="string">'Embarked'</span>].map(&#123;<span class="string">'S'</span>:<span class="number">0</span>, <span class="string">'C'</span>: <span class="number">1</span>,<span class="string">'Q'</span>:<span class="number">2</span>&#125;).astype(int)</span><br><span class="line">data_te.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>3</td>      <td>1</td>      <td>34.5</td>      <td>0</td>      <td>0</td>      <td>7.8292</td>      <td>2</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>3</td>      <td>0</td>      <td>47.0</td>      <td>1</td>      <td>0</td>      <td>7.0000</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>2</td>      <td>1</td>      <td>62.0</td>      <td>0</td>      <td>0</td>      <td>9.6875</td>      <td>2</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>3</td>      <td>1</td>      <td>27.0</td>      <td>0</td>      <td>0</td>      <td>8.6625</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>3</td>      <td>0</td>      <td>22.0</td>      <td>1</td>      <td>1</td>      <td>12.2875</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_tr[<span class="string">'Sex'</span>]= data_tr[<span class="string">'Sex'</span>].map(&#123;<span class="string">'female'</span>:<span class="number">0</span>, <span class="string">'male'</span>: <span class="number">1</span>&#125;).astype(int)</span><br><span class="line">data_tr[<span class="string">'Embarked'</span>]= data_tr[<span class="string">'Embarked'</span>].map(&#123;<span class="string">'S'</span>:<span class="number">0</span>, <span class="string">'C'</span>: <span class="number">1</span>,<span class="string">'Q'</span>:<span class="number">2</span>&#125;).astype(int)</span><br><span class="line">data_tr.head()</span><br><span class="line"><span class="comment">#data_tr = pd.get_dummies(data_tr=data_tr,columns=['Embarked'])</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>0</td>    </tr>  </tbody></table></div><h2 id="2-数据可视化"><a href="#2-数据可视化" class="headerlink" title="2 数据可视化"></a>2 数据可视化</h2><h3 id="2-1-年龄和生存率之间的关系"><a href="#2-1-年龄和生存率之间的关系" class="headerlink" title="2.1  年龄和生存率之间的关系"></a>2.1  年龄和生存率之间的关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">'Embarked'</span>,y=<span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data=data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5875e3c8&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20210110162140990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>female的获救率大于 male,(应该是男士都比较绅士吧，即使面对死亡，也希望将最后的机会留给女生，，电影感悟）</li><li>获救率 C 男性女性都是最高，Q时男性最低，S 时 女性最低</li><li>男性的获救率低于女性的三分之一</li></ul><h3 id="2-2-所做的位置和生存率之间的关系"><a href="#2-2-所做的位置和生存率之间的关系" class="headerlink" title="2.2 所做的位置和生存率之间的关系"></a>2.2 所做的位置和生存率之间的关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pointplot(x=<span class="string">'Pclass'</span>,y=<span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data=data_train,palette=&#123;<span class="string">'male'</span>:<span class="string">'blue'</span>,<span class="string">'female'</span>:<span class="string">'pink'</span>&#125;,</span><br><span class="line">             marker=[<span class="string">'*'</span>,<span class="string">"o"</span>],linestyle=[<span class="string">'-'</span>,<span class="string">'--'</span>])</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee586f70b8&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20210110164700555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>等级越高获救率越高</li><li>女性大于男性</li></ul><h3 id="2-3-生存率与年龄的关系"><a href="#2-3-生存率与年龄的关系" class="headerlink" title="2.3 生存率与年龄的关系"></a>2.3 生存率与年龄的关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x = <span class="string">'Age'</span>,y = <span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee587238d0&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20210110164809985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>男性大于女性</li><li>student的生存率最低,bady的生存率最高</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x = <span class="string">'Cabin'</span>,y = <span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee585b0748&gt;</code></pre><p>​    </p><p><img src="https://img-blog.csdnimg.cn/20210110164859598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x = <span class="string">'Fare'</span>,y = <span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5852b390&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20210110164953458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-建立模型"><a href="#3-建立模型" class="headerlink" title="3 建立模型"></a>3 建立模型</h2><h3 id="3-1-随机森林"><a href="#3-1-随机森林" class="headerlink" title="3.1 随机森林"></a>3.1 随机森林</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_all = data_tr.drop([<span class="string">'PassengerId'</span>,<span class="string">'Survived'</span>],axis=<span class="number">1</span>)<span class="comment">#主要是乘客ID也没啥用，删就删了吧</span></span><br><span class="line">y_all = data_tr[<span class="string">'Survived'</span>]</span><br><span class="line">p = <span class="number">0.2</span> <span class="comment">#用 百分之20作为测试集</span></span><br><span class="line"></span><br><span class="line">X_train,X_test, y_train, y_test = train_test_split(X_all,y_all,test_size=p, random_state=<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> make_scorer, accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择分类器的类型，我没试过其他的哦，因为在这个案例中，有人做过试验发现随机森林模型是最好的，所以选了它。呜呜，我下次试试其他的</span></span><br><span class="line">clf = RandomForestClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以通过定义树的各种参数，限制树的大小，防止出现过拟合现象哦，也可以通过剪枝来限制，但sklearn中的决策树分类器目前不支持剪枝</span></span><br><span class="line">parameters = &#123;<span class="string">'n_estimators'</span>: [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>], </span><br><span class="line">              <span class="string">'max_features'</span>: [<span class="string">'log2'</span>, <span class="string">'sqrt'</span>,<span class="string">'auto'</span>], </span><br><span class="line">              <span class="string">'criterion'</span>: [<span class="string">'entropy'</span>, <span class="string">'gini'</span>],        <span class="comment">#分类标准用熵，基尼系数</span></span><br><span class="line">              <span class="string">'max_depth'</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>], </span><br><span class="line">              <span class="string">'min_samples_split'</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">              <span class="string">'min_samples_leaf'</span>: [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是用于比较参数好坏的评分，使用'make_scorer'将'accuracy_score'转换为评分函数</span></span><br><span class="line">acc_scorer = make_scorer(accuracy_score)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动调参，GridSearchCV，它存在的意义就是自动调参，只要把参数输进去，就能给出最优化的结果和参数</span></span><br><span class="line"><span class="comment">#GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。</span></span><br><span class="line">grid_obj = GridSearchCV(clf,parameters,scoring=acc_scorer)</span><br><span class="line">grid_obj = grid_obj.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将clf设置为参数的最佳组合</span></span><br><span class="line">clf = grid_obj.best_estimator_</span><br><span class="line"></span><br><span class="line"><span class="comment">#将最佳算法运用于数据中</span></span><br><span class="line">clf.fit(X_train,y_train)</span><br></pre></td></tr></table></figure><pre><code>/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.  warnings.warn(CV_WARNING, FutureWarning)/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_search.py:814: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.  DeprecationWarning)RandomForestClassifier(bootstrap=True, class_weight=None, criterion=&apos;entropy&apos;,                       max_depth=5, max_features=&apos;sqrt&apos;, max_leaf_nodes=None,                       min_impurity_decrease=0.0, min_impurity_split=None,                       min_samples_leaf=1, min_samples_split=3,                       min_weight_fraction_leaf=0.0, n_estimators=4,                       n_jobs=None, oob_score=False, random_state=None,                       verbose=0, warm_start=False)</code></pre><h3 id="3-2-预测"><a href="#3-2-预测" class="headerlink" title="3.2 预测"></a>3.2 预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">predictions = clf.predict(X_test)</span><br><span class="line">print(accuracy_score(y_test,predictions))</span><br><span class="line">data_tr</span><br></pre></td></tr></table></figure><pre><code>0.8268156424581006</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>22.000000</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>38.000000</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>26.000000</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>35.000000</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>35.000000</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>886</td>      <td>887</td>      <td>0</td>      <td>2</td>      <td>1</td>      <td>27.000000</td>      <td>0</td>      <td>0</td>      <td>13.0000</td>      <td>0</td>    </tr>    <tr>      <td>887</td>      <td>888</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>19.000000</td>      <td>0</td>      <td>0</td>      <td>30.0000</td>      <td>0</td>    </tr>    <tr>      <td>888</td>      <td>889</td>      <td>0</td>      <td>3</td>      <td>0</td>      <td>29.699118</td>      <td>1</td>      <td>2</td>      <td>23.4500</td>      <td>0</td>    </tr>    <tr>      <td>889</td>      <td>890</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>26.000000</td>      <td>0</td>      <td>0</td>      <td>30.0000</td>      <td>1</td>    </tr>    <tr>      <td>890</td>      <td>891</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>32.000000</td>      <td>0</td>      <td>0</td>      <td>7.7500</td>      <td>2</td>    </tr>  </tbody></table><p>891 rows × 9 columns</p></div><h3 id="3-3-预测test文件"><a href="#3-3-预测test文件" class="headerlink" title="3.3 预测test文件"></a>3.3 预测test文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">predictions = clf.predict(data_te.drop(<span class="string">'PassengerId'</span>,axis=<span class="number">1</span>))</span><br><span class="line">output = pd.DataFrame(&#123;<span class="string">'Passengers'</span>:data_te[<span class="string">'PassengerId'</span>],<span class="string">'Survived'</span>:predictions&#125;)</span><br><span class="line">output.to_csv(<span class="string">r'test1.csv'</span>)</span><br><span class="line">output.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Passengers</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="3-4-提交到kaggle官网"><a href="#3-4-提交到kaggle官网" class="headerlink" title="3.4 提交到kaggle官网"></a>3.4 提交到kaggle官网</h3><p>结果是 0.77990<br>hhhhhhhh还是比较满意的<br>下次用深度学习试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据来源kaggle&lt;/p&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="http://wvdon.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="随机森林" scheme="http://wvdon.com/tags/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
    
      <category term="kaggle" scheme="http://wvdon.com/tags/kaggle/"/>
    
      <category term="数据挖掘" scheme="http://wvdon.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Git:分布式版本控制</title>
    <link href="http://wvdon.com/2019/08/28/Git-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://wvdon.com/2019/08/28/Git-分布式版本控制/</id>
    <published>2019-08-28T15:42:57.000Z</published>
    <updated>2023-04-08T07:47:32.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><h4 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h4><blockquote><p>git是一种分布式版本控制系统</p></blockquote><h5 id="什么是版本控制系统："><a href="#什么是版本控制系统：" class="headerlink" title="什么是版本控制系统："></a>什么是版本控制系统：</h5><blockquote></blockquote><h5 id="什么是分布式-amp-集中式："><a href="#什么是分布式-amp-集中式：" class="headerlink" title="什么是分布式&amp;集中式："></a>什么是分布式&amp;集中式：</h5><blockquote><p> 优势：</p><p>SVN</p></blockquote><h5 id="Git的历史："><a href="#Git的历史：" class="headerlink" title="Git的历史："></a>Git的历史：</h5><blockquote><p> 2002年大神Linus 为了管理Linux源码，花了两个星期使用c语言编写的。</p></blockquote><a id="more"></a><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><p>windows上在<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网</a>下载安装即可<br>命令行验证一下 git 是否安装完成。</p><p>ubuntu 上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h3><h4 id="1、建立与连接远程仓库"><a href="#1、建立与连接远程仓库" class="headerlink" title="1、建立与连接远程仓库"></a>1、建立与连接远程仓库</h4><p>建立git仓库</p><figure class="highlight plain"><figcaption><span>init```  </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">添加项目中的文件  </span><br><span class="line"></span><br><span class="line">```git add *```  </span><br><span class="line"></span><br><span class="line">提交到仓库</span><br><span class="line"></span><br><span class="line">```git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure><p>与远程仓库建立关联  </p><figure class="highlight plain"><figcaption><span>remote add origin</span><a href="https://github.com/wvdon/learn_tools.git```" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">上传之前pull一下</span><br><span class="line"></span><br><span class="line">```git pull origin master```  </span><br><span class="line"></span><br><span class="line">上传到GitHub远程仓库（master分支）</span><br><span class="line"></span><br><span class="line">```git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="2、git基本操作"><a href="#2、git基本操作" class="headerlink" title="2、git基本操作"></a>2、git基本操作</h4><p>查看仓库状态</p><p><code>git status</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰git教程</a></p><p>精通Git（第2版）</p><p><img src="C:%5CUsers%5Cwvdon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567175758887.png" alt="1567175758887"></p>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="git" scheme="http://wvdon.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>LaTex:排版系统</title>
    <link href="http://wvdon.com/2019/07/19/LaTex-%E6%8E%92%E7%89%88%E7%B3%BB%E7%BB%9F/"/>
    <id>http://wvdon.com/2019/07/19/LaTex-排版系统/</id>
    <published>2019-07-18T16:11:41.000Z</published>
    <updated>2023-04-08T07:47:32.623Z</updated>
    
    <content type="html"><![CDATA[<p>最后更新时间:2019.10.24</p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>LaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。<br>目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。</p><a id="more"></a><blockquote><ol><li>有些站点不支持LaTex语法的我们可以借助<a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">在线 LaTeX 编辑器</a> 进行转换，然后复制为html代码插入进去</li><li>hexo的许多主题都是支持LaTex的，只需在文章头文字部分设置 mathjax: true</li></ol></blockquote><h3 id="LaTex常用语法："><a href="#LaTex常用语法：" class="headerlink" title="LaTex常用语法："></a>LaTex常用语法：</h3><p>$$<br>LaTex公式<br>$$</p><h4 id="分数表示"><a href="#分数表示" class="headerlink" title="分数表示"></a>分数表示</h4><blockquote><p>\frac{1}{2} 代表分数<br>$$<br>\frac{1}{2}<br>$$</p></blockquote><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><blockquote><p>_{}下标  ^{} 上标</p><p>C_{n}^{m}代表<br>$$<br>C_{n}^{m}<br>$$</p></blockquote><p>求和压缩符合</p><blockquote><p>\sum_{i=0}^{n}{(x_i+y_i)}</p><p>\prod_{i=0}^{n}{x_i\cdot{y_i}}_</p><p>\lim_{x\to0}\frac{sinx}{x}_</p><p>\int_{a}^{b}{sinx}dx</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\sum{i=0}^{n}{(x_i&plus;y_i)}\" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\sum{i=0}^{n}{(x_i&plus;y_i)}\" title="\sum{i=0}^{n}{(x_i+y_i)}\"></a></p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\prod{i=0}^{n}{x_i\cdot{y_i}}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\prod{i=0}^{n}{x_i\cdot{y_i}}" title="\prod{i=0}^{n}{x_i\cdot{y_i}}"></a></p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\lim{x\to0}\frac{sinx}{x}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\lim{x\to0}\frac{sinx}{x}" title="\lim{x\to0}\frac{sinx}{x}"></a></p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\int_{a}^{b}{sinx}dx" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\int_{a}^{b}{sinx}dx" title="\int_{a}^{b}{sinx}dx"></a></p></blockquote><p>根号 </p><blockquote><p> \sqrt[x]{y}</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\sqrt[x]{y}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\sqrt[x]{y}" title="\sqrt[x]{y}"></a></p></blockquote><p>图片的插入与引用：</p><p>引用<code>如图\ref{fig1}</code> {}为label内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \includegraphics[width=17cm]&#123;figure/m3.png&#125;</span><br><span class="line">    \caption&#123;高通量检测预测系统研究方案&#125;</span><br><span class="line">    \label&#123;fig1&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line">\subsection&#123;研究方法&#125;</span><br><span class="line">\subsection&#123;技术路线&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/endlesscoding/p/9797237.html" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最后更新时间:2019.10.24&lt;/p&gt;&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;LaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。&lt;br&gt;目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="LaTex" scheme="http://wvdon.com/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>《浪潮之巅》计算机行业的发展规律</title>
    <link href="http://wvdon.com/2019/04/01/the-top-of-wave/"/>
    <id>http://wvdon.com/2019/04/01/the-top-of-wave/</id>
    <published>2019-04-01T15:34:19.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h3><hr><blockquote><p>英特尔公司创始人戈登·摩尔 在1956年提出 ，<strong>至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月</strong>。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展</p></blockquote><a id="more"></a><p>通常我们可以看到，一般新的处理器发布一年半之后，价格会开始大幅下调；</p><p>​       摩尔定律主导着IT行业的发展。首先，为了不断提升芯片的性能，IT公司必须在比较短的时间内完成下一代产品的开发。因此这就要求这些公司必须要投入大量的资金进行研发，这使得每个产品的市场不会有太多的竞争者</p><blockquote><p>这也是这么多年来国内无法生产与国外性能和技术相同的处理器的原因</p></blockquote><h3 id="安迪-比尔定律"><a href="#安迪-比尔定律" class="headerlink" title="安迪-比尔定律"></a>安迪-比尔定律</h3><hr><blockquote><p> 摩尔定律给我们带来了一个希望，即是如果我今天认为计算机太贵买不起，我可以等到18个月之后就可以用一般的价钱买到相同配置的计算机。如果大家都等到几个月之后再买电脑的话，电脑的销量就会降低很多，开发人员也没有动力去更新计算机了</p></blockquote><p>然而事实上是个人电脑的销售一直在持续增长。</p><p><strong>安迪-比尔定律：比尔要拿走安迪所给的（What Andy gives,Bill takes away).</strong></p><blockquote>  安迪：原英特尔CEO安迪·格鲁夫。  比尔：微软公司创始人比尔·盖茨</blockquote><p>​    在过去的几十年里，英特尔的处理器速度每18个月翻一番，计算机的内存和硬盘容量则以更快的速度发展，但是，微软的操作系统和应用软件越来越慢，也越做越大。所以现在的计算机比着10年前快了上百倍，但是软件的运行速度感觉上和之前的差不多。即使是同样功能的软件，今天的比着昨天的占用硬件资源多就在所难免了。</p><p>​    相应的产生了一条生态链：以微软为首的软件开发商吃掉硬件提升带来的全部好处，迫使用户更新计算机，让惠普，戴尔，联想这些公司收益，而这些公司再向英特尔，希捷，三星，金士顿等厂家订购芯片，内存和硬盘等硬件。然后各个公司分别获利，按照摩尔定律预定的速度发展，提升硬件的性能，为微软的下一步更新软件，吃掉硬件性能做准备。</p><p>就这样，安迪-比尔定律把原本属于耐用消费品的电脑，手机等商品变成了消耗性商品，刺激着整个IT行业的发展。</p><h3 id="反摩尔定律"><a href="#反摩尔定律" class="headerlink" title="反摩尔定律"></a>反摩尔定律</h3><hr><p>​     Googel前CEO埃里克·施密特指出：<strong><em>一个IT公司如果今天和18个月之前卖掉同样的产品，他的营业额就要降低一半。对于IT公司反摩尔定律是非常可怕的，因为一个公司付出了相同的劳动，却只得到之前一半的收入，</em></strong></p><blockquote>  反摩尔定律逼着所有的硬件设备公司必须要赶得上摩尔定律规定的更新速度。<p>  反摩尔定律使得IT企业不可能像石油工业或飞机制造业那样只追求量变，而必须要不断的寻找革命性的创造发明。</p><p>  反摩尔定律同时使得新兴的小公司有可能在发展新技术方面和大公司处在同一个起跑线上。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>  苹果公司是一个例外，它是通过硬件实现软件的价值，因此在过去的10多年他的产品成为了一种时尚和潮流。  由于安迪-比尔定律的作用，在IT工业的产业链中，处于上游的是“看不见摸不着”的软件和IT服务业，而下是”看得见摸得着“的硬件和半导体。从事IT业，想要获得高额利润，就得从上游入手，从微软，Google,facebook，无一不是。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摩尔定律&quot;&gt;&lt;a href=&quot;#摩尔定律&quot; class=&quot;headerlink&quot; title=&quot;摩尔定律&quot;&gt;&lt;/a&gt;摩尔定律&lt;/h3&gt;&lt;hr&gt;&lt;blockquote&gt;
&lt;p&gt;英特尔公司创始人戈登·摩尔 在1956年提出 ，&lt;strong&gt;至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月&lt;/strong&gt;。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://wvdon.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="摩尔定律" scheme="http://wvdon.com/tags/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B/"/>
    
      <category term="安迪比尔定律" scheme="http://wvdon.com/tags/%E5%AE%89%E8%BF%AA%E6%AF%94%E5%B0%94%E5%AE%9A%E5%BE%8B/"/>
    
      <category term="反摩尔定律" scheme="http://wvdon.com/tags/%E5%8F%8D%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18下破解xmind8</title>
    <link href="http://wvdon.com/2019/02/10/xmind/"/>
    <id>http://wvdon.com/2019/02/10/xmind/</id>
    <published>2019-02-10T04:10:30.000Z</published>
    <updated>2023-04-08T07:47:32.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h2><p>  xmind8安装包 <a href="https://www.xmind.cn/download/xmind8" target="_blank" rel="noopener">官网地址</a></p><p>  破解文件  <a href="https://github.com/wvdon/soft/blob/master/xmind/XMind_amd64.tar.gz" target="_blank" rel="noopener">下载地址</a></p><p>  平台:ubuntu 18.04lts</p><p>将下载的安装包解压到指定目录<br><code>unzip xmind-8-update8-linux.zip</code><br>解压破解文件 将下载的破解文件解压到XMind_amd64/ 并选择替换<br>修改host</p><a id="more"></a><pre><code>sudo vim /etc/hosts</code></pre><p>在最后添加</p><pre><code>127.0.0.1 www.xmind.net</code></pre><p>安装软件 回到安装目录 </p><p><img src="https://img-blog.csdnimg.cn/20190803130354496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70" alt></p><p>执行<br><code>sudo ./setup.sh</code><br>进入XMind_amd64/ 点击运行XMind</p><p>点击 帮助 序列号<br>输入 邮箱（随便输入）<br>输入序列号（复制下面的）<br><code>XAka34A2rVRYJ4XBIU35UZMUEEF64CMMIYZCK2FZZUQNODEKUHGJLFMSLIQMQUCUBXRENLK6NZL37JXP4PZXQFILMQ2RG5R7G4QNDO3PSOEUBOCDRYSSXZGRARV6MGA33TN2AMUBHEL4FXMWYTTJDEINJXUAV4BAYKBDCZQWVF3LWYXSDCXY546U3NBGOI3ZPAP2SO3CSQFNB7VVIY123456789012345</code></p><p>激活成功 </p><p><img src="https://img-blog.csdnimg.cn/2019080313040536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dlRG9uX3Q=,size_16,color_FFFFFF,t_70" alt></p><h2 id="创建桌面快捷方式"><a href="#创建桌面快捷方式" class="headerlink" title="创建桌面快捷方式"></a>创建桌面快捷方式</h2><p>进入到XMind_amd64/并创建运行脚本文件<br><code>vim run.sh</code><br>输入以下<br><code>cd /usr/soft/xmind/xmind-8-update8-linux/XMind_amd64/</code><br><code>/usr/soft/xmind/xmind-8-update8-linux/XMind_amd64/XMind</code><br>为run.sh加上可执行权限<br><code>chmod +x ./run.sh</code><br>进入到applications目录下<br><code>cd /usr/share/applications/</code><br>创建xmind.desktopp<br><code>sudo vim xmind.desktop</code></p><p>输入以下</p><pre><code>[Desktop Entry]Name=XMindExec=/usr/soft/xmind/xmind-8-update8-linux/XMind_amd64/run.shIcon=/home/wvdon/space/down/macOS11/apps/128/xmind.pngPath=/usr/soft/xmind/xmind-8-update8-linux/XMind_amd64/Type=ApplicationCategories=GTK;GNOME;Office;</code></pre><blockquote>  字段解释：<br>  Name: 应用文件名，本例中此处填写 XMind 。<br>  Exec: 应用执行路径，必须准确填写。<br>  Icon: 图标路径。(自己选择下载的图片所在路径）   Path：应用所在路径。   Type: .desktop 类型，此处我们应填写 Application 。<br>  sudo chmod a+x XMind.desktop  6.复制XMind.desktop 到桌面粘贴即可创建快捷方式    也可以 super 搜索 xmind 添加到收藏夹      <img src="http://wvdon.com/&quot;wp-content/uploads&quot;/2019/02/2019-02-10-15-32-54屏幕截图.png" alt></blockquote>---<p>结束</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工具下载&quot;&gt;&lt;a href=&quot;#工具下载&quot; class=&quot;headerlink&quot; title=&quot;工具下载&quot;&gt;&lt;/a&gt;工具下载&lt;/h2&gt;&lt;p&gt;  xmind8安装包 &lt;a href=&quot;https://www.xmind.cn/download/xmind8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;  破解文件  &lt;a href=&quot;https://github.com/wvdon/soft/blob/master/xmind/XMind_amd64.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;  平台:ubuntu 18.04lts&lt;/p&gt;&lt;p&gt;将下载的安装包解压到指定目录&lt;br&gt;&lt;code&gt;unzip xmind-8-update8-linux.zip&lt;/code&gt;&lt;br&gt;解压破解文件 将下载的破解文件解压到XMind_amd64/ 并选择替换&lt;br&gt;修改host&lt;/p&gt;
    
    </summary>
    
    
      <category term="xmind" scheme="http://wvdon.com/tags/xmind/"/>
    
  </entry>
  
</feed>
