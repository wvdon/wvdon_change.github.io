{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/avatar.gif","path":"uploads/avatar.gif","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.gif","path":"uploads/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7217a565308e28f31895e1d6425141775cd929ed","modified":1584875605456},{"_id":"themes/next/.all-contributorsrc","hash":"6ee1b5c79fba84db228ad559715ac4c69cfc421e","modified":1584875907836},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1584875907837},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1584875907838},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1584875907839},{"_id":"themes/next/.gitignore","hash":"8bf1bfc917aa8dd2d886fd36f764447a2b561e1e","modified":1584875907867},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1584875907868},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1584875907870},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1584875907871},{"_id":"themes/next/README.md","hash":"01c1cfe17bbba58ba56be53fdd8fbcc535e44964","modified":1584875907872},{"_id":"themes/next/_config.yml","hash":"5e4726e2434adbba326aec56092bc2f6327b7056","modified":1584875907873},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1584875907874},{"_id":"themes/next/gulpfile.coffee","hash":"3f4e570ed7e554840b905200e0b662e4b509170e","modified":1584875908199},{"_id":"themes/next/package.json","hash":"0ee90fb9f79c23dfc6dc51a31ae4b0fbd96211eb","modified":1584875908358},{"_id":"source/Main/index.md","hash":"af914a93fdf73c1aa0a88a5ff26f6fe57ecca3df","modified":1584875605459},{"_id":"source/_posts/2019-09-27-题目.md","hash":"574fa2c02a6c2ad8560ab0f204df2ae64d70db18","modified":1584875605460},{"_id":"source/_posts/Git-分布式版本控制.md","hash":"507710297591949bdf4c24b5abd708c46ea667ac","modified":1584875605461},{"_id":"source/_posts/Hexo的使用笔记.md","hash":"38d001a71341e11d645fd2a19da0db527ab361d4","modified":1584875605463},{"_id":"source/_posts/LaTex-排版系统.md","hash":"bc656dddd53b319de8a41ba1bb38278d8d33a5e2","modified":1584875907824},{"_id":"source/_posts/MarkDown快速入门.md","hash":"659739859e01ec6ec0968c0324bf2f81ea694d91","modified":1584875907826},{"_id":"source/_posts/Photoshop 记录.md","hash":"5c5503dc1d1f4999a8da1e3e24d11dfc9d9dda34","modified":1584875605465},{"_id":"source/_posts/the-top-of-wave.md","hash":"a609be51550d20ca98562cb4f92099285241db51","modified":1584875605483},{"_id":"source/_posts/文本特征提取.md","hash":"605179d5a25ea6dbfd5ed8631599f733fd89950c","modified":1584875907831},{"_id":"source/_posts/比赛思路-阅读.md","hash":"d56c1561b71d9ae1ebd16272e8375fdc7959a03e","modified":1584875907833},{"_id":"source/_posts/纪念网易云里那些热爱生活的人.md","hash":"b4e11cf33e925739996f69416a15fb7c8fd64d0c","modified":1584875907834},{"_id":"source/about/index.md","hash":"e27d05b30f8c1459db47be27b82dc59b70a085ce","modified":1584875605484},{"_id":"source/books/index.md","hash":"21e21f1fc94b43071f16964123666aac9dcb75e2","modified":1584875605487},{"_id":"source/categories/index.md","hash":"d7a57b33de52f7c253d109e62a68b8b84642b775","modified":1584875605489},{"_id":"source/leetCode/index.md","hash":"ab7880e585104d98dea802df55663f07be45c9ce","modified":1584875605491},{"_id":"source/machineLearning/index.md","hash":"1d403aaba3a3f0688b77efbc1c6452e83dd7762c","modified":1584875605493},{"_id":"source/schedule/index.md","hash":"fa31106ddf6656de5472e963340eecf8ff0f523b","modified":1584875605495},{"_id":"source/tags/index.md","hash":"5e1e5f54bfefc9cac2dba50368a1a6656bee4777","modified":1584875605497},{"_id":"source/tools/index.md","hash":"93e64026456f7fc5b7292029e55eee476ab679e7","modified":1584875605499},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1566824614629},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1566824614635},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1566824460497},{"_id":"themes/next/.git/index","hash":"f221a16ab1dc02acbd6ed1def473999b5d59d8a7","modified":1582815554739},{"_id":"themes/next/.git/packed-refs","hash":"f6ce6a06ae56afcbc5583126a912e8357e32ab8b","modified":1566824614624},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1584875907841},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"df11642d4fb7695b536740e77155d756bdb2499e","modified":1584875907843},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1584875907844},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"cf6b1e53119097fcfacb02758962806b4edc8b89","modified":1584875907852},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1584875907856},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1584875907857},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1584875907858},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"18eddb3ba5e94cac0642134581f86e26f568d388","modified":1584875907859},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1584875907860},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1584875907862},{"_id":"themes/next/.github/release-drafter.yml","hash":"f3a449b637abd1fd9fe14342d6a242e18a86ddd2","modified":1584875907863},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1584875907865},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1584875907866},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1584875907877},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"6a8d3d3f37d2212e52e1081115f33b55f0e71cf7","modified":1584875907878},{"_id":"themes/next/docs/AUTHORS.md","hash":"99483bb9c09c7c694e34ee79aa3822ff16e0753d","modified":1584875907880},{"_id":"themes/next/docs/DATA-FILES.md","hash":"b6aba4f32482654d265df256988c18606318a5fd","modified":1584875907881},{"_id":"themes/next/docs/INSTALLATION.md","hash":"d747b33d4e0bb7b173b0eee3c427566e49c17b38","modified":1584875907882},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"661deb61a2d225af4498769dba09561046a3d871","modified":1584875907884},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1584875907885},{"_id":"themes/next/docs/MATH.md","hash":"5b7ea122699e84214fc83ff26e046626e6be4efc","modified":1584875907887},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"e1a7d82622845fb2d898043d604e798519d1cde7","modified":1584875907888},{"_id":"themes/next/languages/de.yml","hash":"c94ff69db40c22de61ce6446cdc9108177379074","modified":1584875908201},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1584875908202},{"_id":"themes/next/languages/en.yml","hash":"096cb91b5c1b8641a2d0eb827b205dcc87857c34","modified":1584875908204},{"_id":"themes/next/languages/es.yml","hash":"203084eace039610ac097e0e6ce6b5f4f8356217","modified":1584875908205},{"_id":"themes/next/languages/fa.yml","hash":"856e19aec28767e1f91a8e805011f82c7601ec60","modified":1584875908206},{"_id":"themes/next/languages/fr.yml","hash":"a9ac6ce36e97a06ad6ab3431eb652b8702b7a63e","modified":1584875908208},{"_id":"themes/next/languages/hu.yml","hash":"313894fd5615e37c1935a235f8f702df7852345a","modified":1584875908210},{"_id":"themes/next/languages/id.yml","hash":"1c321f62378dc029f7b795ad2fcb0f80277de52f","modified":1584875908211},{"_id":"themes/next/languages/it.yml","hash":"08b2db3eece91edd2759ca4b26de74b2992c7dae","modified":1584875908212},{"_id":"themes/next/languages/ja.yml","hash":"8341ccdd1b2fbf11e9d80c1aacd37a969c57ca9c","modified":1584875908213},{"_id":"themes/next/languages/ko.yml","hash":"4f3a4165ceaaada238316fe8bd2438f775abebfc","modified":1584875908214},{"_id":"themes/next/languages/nl.yml","hash":"387ea251057164f8dcd38553bac01a909cf11f0d","modified":1584875908215},{"_id":"themes/next/languages/pt-BR.yml","hash":"075140b21edd6cb0ec1e9b3e79e1339d1e1a17e4","modified":1584875908216},{"_id":"themes/next/languages/pt.yml","hash":"7d3f040065b0a04a23d3be42ddfcafc95f79854e","modified":1584875908217},{"_id":"themes/next/languages/ru.yml","hash":"ca8f3c22fb10cf3e455890e0f1f2b29b8814a702","modified":1584875908219},{"_id":"themes/next/languages/tr.yml","hash":"c99f21a9cb86957618428e488ece24df063222f3","modified":1584875908220},{"_id":"themes/next/languages/uk.yml","hash":"aa90a1b6f12f5bae1ff6386ea99c63db901179a8","modified":1584875908221},{"_id":"themes/next/languages/vi.yml","hash":"a5f60a2b3dc1b90b867e99dd3b108113a04f9ba5","modified":1584875908223},{"_id":"themes/next/languages/zh-CN.yml","hash":"8c70af9442f12aa65e8737774ea032bb6420a715","modified":1584875908224},{"_id":"themes/next/languages/zh-HK.yml","hash":"1c8b8ad49a15ea3491555a2ae1819b1ad405fab2","modified":1584875908225},{"_id":"themes/next/languages/zh-TW.yml","hash":"7402f4b899dbeead3641417bfaf5f46f3a3934a5","modified":1584875908226},{"_id":"themes/next/layout/_layout.swig","hash":"ce92cec7579c263db8cd14836121c54f8a6ace8c","modified":1584875908228},{"_id":"themes/next/layout/archive.swig","hash":"3ed37b2d5346e7c956dcdd94f5647800df80b597","modified":1584875908351},{"_id":"themes/next/layout/category.swig","hash":"4b21cb24b893dcb587bdf7802199ee368c494a4f","modified":1584875908353},{"_id":"themes/next/layout/index.swig","hash":"d08bbe3c409015a693c4afefcd6f3fe70beb2082","modified":1584875908354},{"_id":"themes/next/layout/page.swig","hash":"46329081fc305b061e0d1460c64af7fe47710a56","modified":1584875908355},{"_id":"themes/next/layout/post.swig","hash":"b5f8b8a3ce37245713ccaee811f58b2261e58187","modified":1584875908356},{"_id":"themes/next/layout/tag.swig","hash":"9463f950d147014a908766a1f5ee9ede0d136346","modified":1584875908357},{"_id":"source/uploads/avatar.gif","hash":"e39243ee0cff67f8bdb2c7b5f0c075e2daaae590","modified":1584875605501},{"_id":"source/_posts/arithmetic/2019-10-16-JAVA数据结构与算法KMP.md","hash":"94d6e726eeb06fc7c23f0d2302c5ec4d9de61ac1","modified":1584875605468},{"_id":"source/_posts/arithmetic/JAVA_Alg_Math.md","hash":"70e119b5d2fe0ce2fcac09c9f25587872fca328a","modified":1584875605470},{"_id":"source/_posts/arithmetic/arithmetic.md","hash":"a9f6ca3a36f240b64f9dcdac74c1178df42e2142","modified":1584875605471},{"_id":"source/_posts/code/pat.md","hash":"109df33a4002b77bd495e67313a0dfcd3bf28ea8","modified":1584875605474},{"_id":"source/_posts/linux/2019-10-17-Linux命令缩写一览表.md","hash":"f0a9e40543c9e97c9a5841eafa77c309e2333a9e","modified":1584875605476},{"_id":"source/_posts/linux/2019-10-18-Linux.md","hash":"f0a8eb9618e520f26d7833fdbce0d40943a3d254","modified":1584875605478},{"_id":"source/_posts/machineLearning/titanc.md","hash":"ec062cde506059f87f3fa0bf10bdc2145b75b17f","modified":1584875605481},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1566824460498},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1566824460498},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1566824460499},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1566824460499},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1566824460500},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1566824460500},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1566824460501},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1566824460501},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1566824460502},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1566824460502},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1566824460502},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1566824460504},{"_id":"themes/next/.git/logs/HEAD","hash":"528531cde8e550ee5a9ee0d4c6252c029bde0d32","modified":1566824614631},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1584875907847},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1584875907849},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1584875907850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1584875907851},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"5b688fb1bef2895b53b538519b002c3bc1e8b177","modified":1584875907890},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1584875907891},{"_id":"themes/next/docs/ru/README.md","hash":"d173ce8e009787c74f2042e1e965d8e5f6be1e6d","modified":1584875907892},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1584875907894},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"55e21e78c50faa27248c9337bf49c153dad34843","modified":1584875907895},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"1c21127b1a5004e99169fe8bbf5493245f07e843","modified":1584875907897},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a031c31ae66c3dd947e1663ddf23c11fdb6a118b","modified":1584875907899},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"979b9b49ed2e3181fce9f2dc1c40b5fa8b0eeeed","modified":1584875907900},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"a27aab06239754d193e21d742e82c67eece4d5b7","modified":1584875907902},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"3f3e889b5739c386dfa962d7e85d595b0feb726d","modified":1584875908192},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"85756eb675967f49fdb47befa961da2c8d5e8d02","modified":1584875908195},{"_id":"themes/next/docs/zh-CN/README.md","hash":"888493e26cab8e3aed42242dcd6db27f81b62895","modified":1584875908196},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"599705b5eec03b644f89a92a71705d61701468c9","modified":1584875908198},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1584875908234},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1800020e8221a32dc55f3e29cac5340fdeb2e4b5","modified":1584875908235},{"_id":"themes/next/layout/_macro/post.swig","hash":"f8be60b419042be87aee2860cb8dad0599e6d1b6","modified":1584875908236},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"c73ab4e925c32eda3e1d5641a1317e6fcb9431e3","modified":1584875908237},{"_id":"themes/next/layout/_partials/comments.swig","hash":"33e7c276c58285fec3eae31d7eb3fe3faea8695f","modified":1584875908252},{"_id":"themes/next/layout/_partials/footer.swig","hash":"58a90f7805055356a3c8a71a10cfc8d0376a8848","modified":1584875908254},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"a687b909d56e3323f5ea3b550bb091793aa9b24c","modified":1584875908271},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"ada4cf714ff1a85985d2d7c3c24dc0bb023a6d0e","modified":1584875908272},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"33199b1e3fa8990078923a934cb876e0e4787dc1","modified":1584875908287},{"_id":"themes/next/layout/_scripts/index.swig","hash":"be907bdfd81ab3cc5c56aa897be9664943e282cd","modified":1584875908289},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"b819cc7752fd018b8971cfe61ee7569f49f9d56d","modified":1584875908291},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"eeb8507e7263ab08701b0cc70cbee54e31f1ac23","modified":1584875908294},{"_id":"themes/next/layout/_scripts/three.swig","hash":"f4e1b08bcfb7f8f9c659e4efed90f98571f44c25","modified":1584875908302},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"8c6d8df502193c9945cdae8daeb5629514174619","modified":1584875908304},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1584875908313},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"340e76643f25fdb4b18a2f94c9169721a912b670","modified":1584875908328},{"_id":"themes/next/layout/_third-party/index.swig","hash":"838dc2cc1f520c5f7b43e3f464188060ae862bd6","modified":1584875908329},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"70c3331b04ec204b96cf79751248740c9a42b815","modified":1584875908336},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"206644ff2c769226a58a9039eda9206302460626","modified":1584875908337},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"7c918db6e1af16d47789d3958d9ad208ea0e86b2","modified":1584875908350},{"_id":"themes/next/scripts/events/core.js","hash":"b075ef0d0bf28ca1b9ad7606f7eb89b33ab8ae97","modified":1584875908360},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"1a1abfb4a28fbcd9315666e268b0cc56f230a2a2","modified":1584875908396},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"a66d503e52fd6ee2b17d3ac17920d62ca06ebffe","modified":1584875908398},{"_id":"themes/next/scripts/filters/exturl.js","hash":"4911d916f4ba635c9769af97ef885ab9efb5ad37","modified":1584875908399},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"3b68841eebde1e4ac0d19c3e82d6e2b5e7401619","modified":1584875908401},{"_id":"themes/next/scripts/filters/minify.js","hash":"38e76847592de648fe6bdacad3cf7788bb504e7d","modified":1584875908402},{"_id":"themes/next/scripts/helpers/engine.js","hash":"e82d4f2263277f4c08d1f1e072090db0c52929bb","modified":1584875908404},{"_id":"themes/next/scripts/helpers/font.js","hash":"872934a2e31a45284487ab37c61403c8f6d10890","modified":1584875908406},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"bb61af8b505e0bbb6adf383a5fee04e6407aafbc","modified":1584875908407},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"5a9667e830fd1842c345645fe21eac3ec7363d8c","modified":1584875908408},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1584875908410},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"8e1a32824d2245c72b5d3cc972c56843e4df01bc","modified":1584875908412},{"_id":"themes/next/scripts/tags/button.js","hash":"39156bf735c1d1ebd0d418c411f14ff4f0acdd75","modified":1584875908414},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"6fbc5764dddca114667f1487120a9ed32519857b","modified":1584875908416},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1584875908417},{"_id":"themes/next/scripts/tags/full-image.js","hash":"6f3ce3cf749a1893da212234cc2c835ee34b9969","modified":1584875908419},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8e1befa08c07f822f9487978dbd27db60fb700c7","modified":1584875908420},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"9c6363b36bea3f5821656b916d08fcc1ed1eee51","modified":1584875908422},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1584875908423},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1584875908425},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1584875908427},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1584875908428},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1584875908430},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1584875908431},{"_id":"themes/next/source/css/main.styl","hash":"ee7c731c03d724827d9324d08be701c9d2f04c60","modified":1584875908648},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1584875908650},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1584875908651},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1584875908652},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1584875908654},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1584875908655},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1584875908657},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1584875908657},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1584875908658},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1584875908659},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1584875908660},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1584875908662},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1584875908663},{"_id":"themes/next/source/images/favicon.ico","hash":"66039507c238e0e6747f92bb49afd913be4b61ee","modified":1584875908664},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1584875908666},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1584875908667},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1584875908668},{"_id":"themes/next/source/js/algolia-search.js","hash":"f632ff7a404ac4fb04313bc554815406ebcb2a0b","modified":1584875908670},{"_id":"themes/next/source/js/bookmark.js","hash":"1796d7e1bee3061ecb225aaeb372b09744b3b93a","modified":1584875908671},{"_id":"themes/next/source/js/local-search.js","hash":"523ec46c532bd49186d076424054fc10a3ddafd8","modified":1584875908672},{"_id":"themes/next/source/js/motion.js","hash":"6df12bc25f19140c2ea3be345fef2abc4e805813","modified":1584875908673},{"_id":"themes/next/source/js/next-boot.js","hash":"dcdd911120de231dee3fe9c3411e1690175feaf5","modified":1584875908674},{"_id":"themes/next/source/js/utils.js","hash":"4fa51062a768b95466609a6813a565734571f1bc","modified":1584875908680},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584875908606},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584875908607},{"_id":"themes/next/source/uploads/avatar.gif","hash":"e39243ee0cff67f8bdb2c7b5f0c075e2daaae590","modified":1584875908712},{"_id":"source/_posts/machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础.md","hash":"f372a89de951a2052d139aa6c110af2f81cd96e6","modified":1584875907828},{"_id":"source/_posts/machineLearning/machineLearning/2019-10-24-第二章-：k-近邻算法.md","hash":"4d079724412e083dd884dcd8322482782e4a2ca4","modified":1584875907830},{"_id":"themes/next/.git/objects/33/4b93940db58b9667c1ec938504b25b414159c6","hash":"e935b2c63b7be67bde196ea14699503e694580cc","modified":1582815426207},{"_id":"themes/next/.git/objects/53/52e9938b82210ea87e4d23f2f7baad714150ce","hash":"1e5c2c80ba75c1327fe292e95dfa4bca416c3814","modified":1582815426296},{"_id":"themes/next/.git/objects/7b/872b802b5b7f87d6377640b889eb19e528a995","hash":"33d1ffa710e9269e2be243f21695f6e576f5d310","modified":1582815426556},{"_id":"themes/next/.git/objects/96/6ddd672a0d1a891b2f846c270715cb2cc7eb94","hash":"78fc44276999b30c10949fe1882d55e66ceec0e9","modified":1582815426246},{"_id":"themes/next/.git/objects/b9/980fe170e8631012809a9257f9c2c0a575627c","hash":"b2fd43a1b21ea077ec36a6cfcb0362f7bd468842","modified":1582815426346},{"_id":"themes/next/.git/objects/c2/46d2634dbabdc470831e87e25fe1c96122c1aa","hash":"df57678073aeab18040659470faecf42da1a6390","modified":1582815426506},{"_id":"themes/next/.git/objects/c7/9b2f22227b5986397f5081f863e7b0e10ae638","hash":"c54d729a9a6168745cd7d6aec389faceaaf38102","modified":1582815426412},{"_id":"themes/next/.git/objects/d1/3eb35b438f1c571dc77a565bd8eafb5699c218","hash":"acc0ada13a6ad63e8e6c4afb107668d9b4bcccfc","modified":1582815426455},{"_id":"themes/next/.git/objects/e9/1abefb790616fbae3a6fff9686008cefb6e1df","hash":"31b904b2f9a3377f7b47e8a71d1d25c6b4ab1b34","modified":1582815426090},{"_id":"themes/next/.git/refs/heads/master","hash":"84d9b6c9e7469a01bb751a4dd26da6ac67ec5eeb","modified":1566824614631},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"d2aa948b74fa2863fccca50162669dadde4d09ea","modified":1584875908231},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"051fe68bdc953a0e70b82dcaeb0d4cbbbfd69eb6","modified":1584875908233},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"805b79fcfff59dbbc2b426deb03ed15c5be11dec","modified":1584875908241},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1584875908242},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"edeb02d4d56c11536eaed5a8b4705b717f357895","modified":1584875908243},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ec3c1cd6ace7e6a01b490ac323a4e1ec1fa65fd1","modified":1584875908245},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"035ed7f1670489ef8b9ef13d71ddf28f1fba6e2c","modified":1584875908246},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"c7b55198361ffd96b921b37ca90f6adfccf0d391","modified":1584875908249},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"a2bfea40acc9e18d1cd73edc52df57278b746e81","modified":1584875908251},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"9d69ca5d8436970c0339c4a0932acd3e054f0309","modified":1584875908256},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"13dcdcf008387e5972fb98ef59f5dd3d9440d9e4","modified":1584875908258},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"f2d35f035e881c5ba304aeb2741f91a4b8b5b33c","modified":1584875908260},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"a991def5f061b955071b893cf57d65ceb5b344a0","modified":1584875908261},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"7f9fdad8af699958d419c9a9e0a5e722a40264c7","modified":1584875908263},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"542f00ab9ecfd4728c91687260b0f3d31ae62a31","modified":1584875908264},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"3260c630beeecc32ad5f54d741fff9c0d588fb83","modified":1584875908266},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d41897fa8ce9925f97ffe27cfa0f11dc84c2443d","modified":1584875908269},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"015c84817bac65f641e5da35583638a176363ab1","modified":1584875908274},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"5804cc42bcd5ea6116e62303b96ce31c78f84751","modified":1584875908275},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"8b98b31b1ba5a745743828cd916b97e81089c6e6","modified":1584875908276},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2fa7fa909e4cd24c0f520b856f4e74c43af6314f","modified":1584875908278},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"6445fffd63c576bada069c9fa520bf0f6019890b","modified":1584875908279},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"f9017a2deb2f262912476e94822081bb10ee43af","modified":1584875908281},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f1107c28661370e10e1940bff856f22f14f08518","modified":1584875908282},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"98453ac4a520b2600181fc0331f0067125d0ed4f","modified":1584875908283},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"8d6c6e7d52d0f54a381602dbdcd5aed817350f48","modified":1584875908286},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"55c4ed80ef05ba76771c586657fdd7e9c6a0913a","modified":1584875908293},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1584875908296},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1584875908297},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1584875908299},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1584875908301},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"48da7e0ff79dcc4e94364fd5a4cec2e8b29e0e30","modified":1584875908307},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1584875908308},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"146636b4cf5d007627d044bbda14738984824955","modified":1584875908309},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"32c8a447e629aea92bcde06ff9500a0016304964","modified":1584875908311},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"8471561b228132f4863177ff5a6579f540a50bb4","modified":1584875908312},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"e8aa0ba146b658ae3b73efc4ca63325886bbaa2d","modified":1584875908316},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"f2d07d655dbd7b8381be36f56204706b897b8eab","modified":1584875908317},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1584875908319},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b20d3f1e8ae5d92b559060d000437c2384663e8f","modified":1584875908322},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"a7a26afd3118e036621f802bad42c0cbcced9676","modified":1584875908321},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"f5aec655aeee0f5b11e62230688cd6a383a3d9d5","modified":1584875908323},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"6c886d8aba8ac6e79a4a86576db24e7d5966b28e","modified":1584875908324},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"ef38217a457749e528cf00c487b99cb963ccfbea","modified":1584875908325},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"8151d33c6666ef8b0d7ac9405fe391aeba38938b","modified":1584875908326},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"cf4ed630beec3a7d2b7f74cc97897b596d061a51","modified":1584875908332},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"e00e4ed40ea95d15c4eb81349e86009b69c5ed9d","modified":1584875908334},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"6308f0b295f9255c100800f57660b777f6c9122c","modified":1584875908335},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"57f6da9f6f2cc48904ac2eaf266515528395e554","modified":1584875908339},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"db6842138f6172f16a8b767163305a4ef517afe6","modified":1584875908340},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1584875908342},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1584875908343},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"78bfe0cff0c32e3a55815808a128cf305d27d3bc","modified":1584875908345},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"2aee256fd034da1b59139ba57e0f25d842818611","modified":1584875908347},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"4f9b27da4f70142e02dfbb48904cbec66620f70c","modified":1584875908348},{"_id":"themes/next/scripts/events/lib/config.js","hash":"4a60d43a4258599083b98016353e8ca2880844d6","modified":1584875908365},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1584875908366},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"8c7568782083b0d5375b2c8a4c56f82667c2fb2d","modified":1584875908368},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f453654631cebbd71642cc55913dbdd2139d61d","modified":1584875908371},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"31a6c8fbdfa16112b0b099727437b9df7641d421","modified":1584875908373},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"f6ca50927b8ed7764974099b11dd1b7a342e2fd3","modified":1584875908374},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"1062049b3990cbc0fc182cb7ab49c1504d4c7233","modified":1584875908376},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"353be438ad0659039fbb0e16e6e5f7c422737e32","modified":1584875908378},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"5ec24848a88d5394012134b345b72c471c894add","modified":1584875908380},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"ff0a8f6b74a426e7bc0a35ded903f3a25f3d18be","modified":1584875908390},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"e842c4d246f2b6b87738ba5731b198d8ebb001a9","modified":1584875908392},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6771e3d0da9458c94da49d4ab75d5529af971b38","modified":1584875908393},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"94b89f35127e288e850cb0654eb9a9662b25c388","modified":1584875908395},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"b58ed9dabc5be0090647d9a0afc43359e1e0e14c","modified":1584875908604},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1619130f81e091bb9ac43f93814f594dd1739255","modified":1584875908608},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"8206e88319642a56019f3ada444d475778d195c9","modified":1584875908610},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a20af666490c0221634daaa53749fc33162e2355","modified":1584875908641},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"701c69c4a71973fb04aef326c6b3ff0a006a7d28","modified":1584875908642},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1255cb6bd740c433fcbde2ca5435a5f6eff77a7d","modified":1584875908644},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"1934ee185bc3153c7eacabf232dcaa34d80833e9","modified":1584875908645},{"_id":"themes/next/source/css/_variables/base.styl","hash":"009483da1bb7c9b6c48488ccd0f358fc8518ba34","modified":1584875908647},{"_id":"themes/next/source/js/schemes/muse.js","hash":"7977dfb3f1fae8c58bae633c0772cef9511b6efd","modified":1584875908676},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"573ea95a7fd4be631f0839aebd60749421b8737f","modified":1584875908678},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1584875908683},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1584875908684},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1584875908685},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1584875908687},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1584875908688},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1584875908708},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1584875908710},{"_id":"themes/next/.git/objects/c9/c2dc0a1de72199b501fe86ad9ce6f7620a2365","hash":"2830a3957db06bc74c026850dd3bfccfe7f537d0","modified":1582815426620},{"_id":"themes/next/source/lib/jquery/index.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1584875908705},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"528531cde8e550ee5a9ee0d4c6252c029bde0d32","modified":1566824614632},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1566824614628},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"aab122a95c396ef43ee5a86a92180f5c8644129d","modified":1584875908435},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"72e2e0adca91cb3a371b5e28d67abb7cab82bb4b","modified":1584875908437},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"ca4829bad30a50c87c077d817d9cf09a590e8e3c","modified":1584875908438},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"5772ee6cdc50a9e1a4425d79114d46065babe217","modified":1584875908440},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"202c01a3dc459e2f5bce6a7b5e15a460c8485b77","modified":1584875908441},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"070f4ca0aeb35130323801f24b58e283282d23d8","modified":1584875908472},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"2c79406719469a5db876f0ea03a7b834cec927d5","modified":1584875908498},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ef19df19d475386fb060dd94670d13f8e924c2c2","modified":1584875908499},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"ede406ddaf1fb1c930e6923dc193af3c0f5ef03a","modified":1584875908501},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"8b74feba984c847b1e8ffa0baeef74497068507f","modified":1584875908592},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0d60220323e6e78845af0cf9cdcebf7e5dd009ec","modified":1584875908594},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"3881c910ff43d983b6550d216fe63bc5bdc7bfaa","modified":1584875908596},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"26e5d16a2f720ca0947e5ec7e6cfd88b5d0a61e0","modified":1584875908597},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"0cdd236cce4d1149effd59965be46c98718eefe9","modified":1584875908599},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"17f3134d53d61a3c6ba7aabe77f1adf8697994fa","modified":1584875908600},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"61c096e7b8fa43720fad02573ff2db8b9f7ab965","modified":1584875908602},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bdffafeb55a1f55bc7ef93c1877203ec6b1a299b","modified":1584875908614},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"369c6cc457931bd6a06edf82e81ed1a64d14d236","modified":1584875908617},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"392ffe4826761e5e8fc0b5ecd544c312bccb69d9","modified":1584875908616},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"c3d2430baa32195ed87c0a68de552b2e58ff9892","modified":1584875908618},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"3babf62eee4d8eeba545fc4b09cb80cc8ddc0d64","modified":1584875908621},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"e76a696903ede4879a4571b92401bb435e2a3d29","modified":1584875908620},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6dc5149c967765c91edf02f04098dcd010d2a4dc","modified":1584875908622},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"f4210e679c8d7426f26970e03b1b8073644903f5","modified":1584875908624},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"9a7d7502ce394ddeba1773f90bbe19016b0cf0f6","modified":1584875908625},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"dc4ab584198a1b43a09cdbad7cfecae185ab7d6f","modified":1584875908627},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"4dc216cb9f1c12bf7720012fd24e126ef6a4eca7","modified":1584875908629},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"92e92055eedb4efde7cbad488fb1ea5c64a02692","modified":1584875908631},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"55a1e7deda42cb3318d1e19b904c9c91891659f3","modified":1584875908633},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"18d3c825d9fd4266e1973ef330ddf5c0cce987e8","modified":1584875908634},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"3b1cc9c5c17ab917134d2222aafb1cb8a25f238b","modified":1584875908636},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c690e433b9ecb0c37b1dfc287c00beb0bab69400","modified":1584875908637},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"bb9eccf60ad2385af141f5d8aac7ba24a9047a86","modified":1584875908638},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"e71fcda9d45aa34075451c6d8458249f2be889ae","modified":1584875908639},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1584875908690},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1584875908692},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1584875908693},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1584875908701},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1584875908703},{"_id":"themes/next/.git/objects/pack/pack-95d69937feead7140a260a825eff67b31af2a64f.idx","hash":"7246de93ea3fbac5b60154d6a1d1d9eefdee53eb","modified":1566824614530},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"528531cde8e550ee5a9ee0d4c6252c029bde0d32","modified":1566824614628},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"89e82c1583ebcc1c4648e7f5dbf1e1be6710d197","modified":1584875908445},{"_id":"themes/next/source/css/_common/components/header/bookmark.styl","hash":"f7977cfacaca9db6fab4d154486ad57ec4b0fde9","modified":1584875908447},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"52324ad6efc43afb2eacacebab36bef92eb8d0d1","modified":1584875908448},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"fa32e72b66071cf9917bfaaf283b8d1cb31edc6c","modified":1584875908450},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1584875908451},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1e02b737b8a084fc30dbbaa08517e6995dbd8c72","modified":1584875908453},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"09e8b46568d84b12c41b3151f2ab00cd342f3ac5","modified":1584875908454},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"c09e7437b862025ebf5402dbba4bf5c4ba3883ab","modified":1584875908457},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"c123994648e5d571b28cbb4b016faf4a2525c436","modified":1584875908459},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1584875908460},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1584875908465},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1584875908466},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1584875908468},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"757db8087e72b7affa021083a68426f5f62ceffe","modified":1584875908469},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"a22c639cdf1073c9d060af62233125991ddf4dd5","modified":1584875908471},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1584875908475},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"33125c539f19ea932d3576fd99dbebf6caccc617","modified":1584875908463},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"0fff836ab890ba14cd5ac0e1f93bfe755b7e2eab","modified":1584875908462},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"4e21017c56455e0e04452c45935b5a3d05d0ede0","modified":1584875908477},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"da524632dc1a5848b77dd22bf1bfab8b45cee248","modified":1584875908478},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"e8b5b1027ec40d6e58b147aa32d61929684a5a44","modified":1584875908485},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"08bf0856710d306134c7929a4a79407c18a8e4fb","modified":1584875908486},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"bb1cdbe39d9948474f80d0915ac9cf9cf63fbe7f","modified":1584875908488},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"9cf76f80cfdb984ff65a78ffc7b41d7a997df630","modified":1584875908480},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"cb45887618c4e7e630d7a04b73fb1101af2d48c2","modified":1584875908489},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a5ef170128ab8bc9c0336d6d8d082a97f677563e","modified":1584875908481},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1584875908491},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"c2c4800408fde729290ea6c47fe62e46582fe512","modified":1584875908495},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"c6eabc2676fd7d5eded568cebb8a529ac4e9227a","modified":1584875908503},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"48b8997a9046d8c555786292608b2b21a57c66cd","modified":1584875908507},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"00b2055f170e54267321d27118e0a7f07d10890b","modified":1584875908509},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"49d3729a0f93fc5b9f899b5c45eef569f4d84cee","modified":1584875908510},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"229a254f9079f8c840c955198b54db554d1e56c5","modified":1584875908511},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3d00c8b1dfff26ed4075e04de17ddaf190d9bfb","modified":1584875908560},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"aa1c08abde2a4cb01906eb5313d5b3b3ee586bfe","modified":1584875908562},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"ebf03782c04d492fb3b0160832cdc103db508e6c","modified":1584875908492},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b0b7f04347f2bf8d58752c6cdcd11df40ec73575","modified":1584875908563},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"9e872745322ae0f1cc6ad1675ee0db18da2bd9c8","modified":1584875908494},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"225ee39193a9a9211c0f355b85db126fb1b5c986","modified":1584875908497},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2d4af920d3476a00b0bf3ef8d6ec30388f3014da","modified":1584875908570},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"e36e186e4fe506bfdb3b7eb62f058ee28d73adc2","modified":1584875908571},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"919d996ffc05c0ffd4bd308c3bea6980ddd123a5","modified":1584875908572},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"581faf00b971212c8d8e20059cb4dee8d9d24296","modified":1584875908574},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"c9337e837f10c5f40c27a0c0a012f39dfadc7572","modified":1584875908575},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"7a335fd51a488d70ba26a4b905fc28c0ec10452c","modified":1584875908577},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1584875908579},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1584875908583},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1584875908585},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"5f1c6d1d7ad071c5f947aaaa7b4a458512f17111","modified":1584875908587},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"5b25021264f917b353f820d88be09b815972f910","modified":1584875908588},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"712800d40ed5a7247f760acda41aceb081e1cfa0","modified":1584875908590},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"7643e053bd0cc24d8832434d2d2667f1d3c9d4db","modified":1584875908565},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"92fbaa079a46242d2f654ac62b9621057ebeda28","modified":1584875908567},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1584875908699},{"_id":"themes/next/.git/objects/pack/pack-95d69937feead7140a260a825eff67b31af2a64f.pack","hash":"c9968ef77c66cded450cb2f98c28c68981a102c0","modified":1566824614526}],"Category":[{"name":"tools","_id":"ck82yy5m50004rwv0zsod7qv8"},{"name":"读书笔记","_id":"ck82yy5nn000qrwv0js4w4y54"},{"name":"machineLearning","_id":"ck82yy5nr000wrwv0f4iwpcms"},{"name":"remember","_id":"ck82yy5nv0014rwv0cdv8ksyq"},{"name":"JAVA数据结构与算法","_id":"ck82yy5tz001vrwv02r49qb0g"},{"name":"数据挖掘","_id":"ck82yy609002zrwv0ltw212ko"}],"Data":[],"Page":[{"title":"Main","date":"2019-10-22T13:30:54.000Z","_content":"\n## 数据结构与算法\n\n- [JAVA数据结构](http://wvdon.com/2019/10/16/arithmetic/arithmetic/)\n\n  \n\n- [PAT 刷题笔记](http://wvdon.com/2019/06/06/code/pat/)\n- [LeetCode刷题笔记](http://wvdon.com/leetCode/)\n\n## 计算机系统\n\n- 计算机操作系统\n- [Linux](http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/)","source":"Main/index.md","raw":"---\ntitle: Main\ndate: 2019-10-22 21:30:54\n---\n\n## 数据结构与算法\n\n- [JAVA数据结构](http://wvdon.com/2019/10/16/arithmetic/arithmetic/)\n\n  \n\n- [PAT 刷题笔记](http://wvdon.com/2019/06/06/code/pat/)\n- [LeetCode刷题笔记](http://wvdon.com/leetCode/)\n\n## 计算机系统\n\n- 计算机操作系统\n- [Linux](http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/)","updated":"2020-03-22T11:13:25.459Z","path":"Main/index.html","comments":1,"layout":"page","_id":"ck82yy5lw0000rwv0ay8xoko1","content":"<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h2><ul>\n<li><a href=\"http://wvdon.com/2019/10/16/arithmetic/arithmetic/\">JAVA数据结构</a></li>\n</ul>\n<ul>\n<li><a href=\"http://wvdon.com/2019/06/06/code/pat/\">PAT 刷题笔记</a></li>\n<li><a href=\"http://wvdon.com/leetCode/\">LeetCode刷题笔记</a></li>\n</ul>\n<h2 id=\"计算机系统\"><a href=\"#计算机系统\" class=\"headerlink\" title=\"计算机系统\"></a>计算机系统</h2><ul>\n<li>计算机操作系统</li>\n<li><a href=\"http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/\">Linux</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h2><ul>\n<li><a href=\"http://wvdon.com/2019/10/16/arithmetic/arithmetic/\">JAVA数据结构</a></li>\n</ul>\n<ul>\n<li><a href=\"http://wvdon.com/2019/06/06/code/pat/\">PAT 刷题笔记</a></li>\n<li><a href=\"http://wvdon.com/leetCode/\">LeetCode刷题笔记</a></li>\n</ul>\n<h2 id=\"计算机系统\"><a href=\"#计算机系统\" class=\"headerlink\" title=\"计算机系统\"></a>计算机系统</h2><ul>\n<li>计算机操作系统</li>\n<li><a href=\"http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/\">Linux</a></li>\n</ul>\n"},{"title":"About Me","date":"2019-08-27T07:40:13.000Z","_content":"\n专注于自然语言处理和java后端开发的小生，欢迎和志同道合的朋友一起玩耍\n\n## 项目经历\n\n###  河南省方言识别\n\n##### 2017/12-2018.10 \n\n解决了科大讯飞在方言翻译方面的短板；\n\n### 基于大数据的征信动态评估平台\n\n利用互联网海量数据对企业进行分析，综合评价企业信用等级\n\n2018/12 - 2019/10 \n\n### 目前(nlp与多模态)\n\n2019/10 - 至今 ","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-08-27 15:40:13\n---\n\n专注于自然语言处理和java后端开发的小生，欢迎和志同道合的朋友一起玩耍\n\n## 项目经历\n\n###  河南省方言识别\n\n##### 2017/12-2018.10 \n\n解决了科大讯飞在方言翻译方面的短板；\n\n### 基于大数据的征信动态评估平台\n\n利用互联网海量数据对企业进行分析，综合评价企业信用等级\n\n2018/12 - 2019/10 \n\n### 目前(nlp与多模态)\n\n2019/10 - 至今 ","updated":"2020-03-22T11:13:25.484Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck82yy5m20002rwv05xnh01dj","content":"<p>专注于自然语言处理和java后端开发的小生，欢迎和志同道合的朋友一起玩耍</p><h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"河南省方言识别\"><a href=\"#河南省方言识别\" class=\"headerlink\" title=\"河南省方言识别\"></a>河南省方言识别</h3><h5 id=\"2017-12-2018-10\"><a href=\"#2017-12-2018-10\" class=\"headerlink\" title=\"2017/12-2018.10\"></a>2017/12-2018.10</h5><p>解决了科大讯飞在方言翻译方面的短板；</p><h3 id=\"基于大数据的征信动态评估平台\"><a href=\"#基于大数据的征信动态评估平台\" class=\"headerlink\" title=\"基于大数据的征信动态评估平台\"></a>基于大数据的征信动态评估平台</h3><p>利用互联网海量数据对企业进行分析，综合评价企业信用等级</p><a id=\"more\"></a>\n\n\n<p>2018/12 - 2019/10 </p>\n<h3 id=\"目前-nlp与多模态\"><a href=\"#目前-nlp与多模态\" class=\"headerlink\" title=\"目前(nlp与多模态)\"></a>目前(nlp与多模态)</h3><p>2019/10 - 至今 </p>\n","site":{"data":{}},"excerpt":"<p>专注于自然语言处理和java后端开发的小生，欢迎和志同道合的朋友一起玩耍</p><h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"河南省方言识别\"><a href=\"#河南省方言识别\" class=\"headerlink\" title=\"河南省方言识别\"></a>河南省方言识别</h3><h5 id=\"2017-12-2018-10\"><a href=\"#2017-12-2018-10\" class=\"headerlink\" title=\"2017/12-2018.10\"></a>2017/12-2018.10</h5><p>解决了科大讯飞在方言翻译方面的短板；</p><h3 id=\"基于大数据的征信动态评估平台\"><a href=\"#基于大数据的征信动态评估平台\" class=\"headerlink\" title=\"基于大数据的征信动态评估平台\"></a>基于大数据的征信动态评估平台</h3><p>利用互联网海量数据对企业进行分析，综合评价企业信用等级</p>","more":"\n\n\n<p>2018/12 - 2019/10 </p>\n<h3 id=\"目前-nlp与多模态\"><a href=\"#目前-nlp与多模态\" class=\"headerlink\" title=\"目前(nlp与多模态)\"></a>目前(nlp与多模态)</h3><p>2019/10 - 至今 </p>\n"},{"title":"books","date":"2019-08-27T10:26:25.000Z","_content":"","source":"books/index.md","raw":"---\ntitle: books\ndate: 2019-08-27 18:26:25\n---\n","updated":"2020-03-22T11:13:25.487Z","path":"books/index.html","comments":1,"layout":"page","_id":"ck82yy5m90006rwv00mwa9u0s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-08-27T07:40:13.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-08-27 15:40:13\n---\n","updated":"2020-03-22T11:13:25.489Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck82yy5mb0008rwv0b6zaqwqe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Machine Learning","date":"2019-10-22T13:04:52.000Z","_content":"\n## Python 基础\n\n## 数学\n\n## 机器学习\n\n#### 机器学习实战\n\n| 章节                                                         | 章节                    |\n| ------------------------------------------------------------ | ----------------------- |\n| [第一章 ：机器学习基础](https://wvdon.com/2019/10/22/machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础/) | [第二张：KNN近邻算法]() |\n| [第三章：决策树]()                                           |                         |\n\n\n\n## 深度学习\n\n## 自然语言处理\n\n## 梳理知识\n\n","source":"machineLearning/index.md","raw":"---\ntitle: Machine Learning \ndate: 2019-10-22 21:04:52\n---\n\n## Python 基础\n\n## 数学\n\n## 机器学习\n\n#### 机器学习实战\n\n| 章节                                                         | 章节                    |\n| ------------------------------------------------------------ | ----------------------- |\n| [第一章 ：机器学习基础](https://wvdon.com/2019/10/22/machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础/) | [第二张：KNN近邻算法]() |\n| [第三章：决策树]()                                           |                         |\n\n\n\n## 深度学习\n\n## 自然语言处理\n\n## 梳理知识\n\n","updated":"2020-03-22T11:13:25.493Z","path":"machineLearning/index.html","comments":1,"layout":"page","_id":"ck82yy5mh000arwv0yrj6jc2o","content":"<h2 id=\"Python-基础\"><a href=\"#Python-基础\" class=\"headerlink\" title=\"Python 基础\"></a>Python 基础</h2><h2 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h2><h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><h4 id=\"机器学习实战\"><a href=\"#机器学习实战\" class=\"headerlink\" title=\"机器学习实战\"></a>机器学习实战</h4><table>\n<thead>\n<tr>\n<th>章节</th>\n<th>章节</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://wvdon.com/2019/10/22/machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础/\">第一章 ：机器学习基础</a></td>\n<td><a href>第二张：KNN近邻算法</a></td>\n</tr>\n<tr>\n<td><a href>第三章：决策树</a></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h2><h2 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h2><h2 id=\"梳理知识\"><a href=\"#梳理知识\" class=\"headerlink\" title=\"梳理知识\"></a>梳理知识</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-基础\"><a href=\"#Python-基础\" class=\"headerlink\" title=\"Python 基础\"></a>Python 基础</h2><h2 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h2><h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><h4 id=\"机器学习实战\"><a href=\"#机器学习实战\" class=\"headerlink\" title=\"机器学习实战\"></a>机器学习实战</h4><table>\n<thead>\n<tr>\n<th>章节</th>\n<th>章节</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://wvdon.com/2019/10/22/machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础/\">第一章 ：机器学习基础</a></td>\n<td><a href>第二张：KNN近邻算法</a></td>\n</tr>\n<tr>\n<td><a href>第三章：决策树</a></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h2><h2 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h2><h2 id=\"梳理知识\"><a href=\"#梳理知识\" class=\"headerlink\" title=\"梳理知识\"></a>梳理知识</h2>"},{"title":"leetCode","date":"2019-09-27T12:42:00.000Z","_content":"\n## leetCode刷题笔记\n\n> 每部分刷题笔记都从 \n>\n> - 题解 \n> - 思路\n> - 考察\n> - 实现 \n> - 优化\n>\n> 五个方面进行解释\n\n\n\n## 题目顺序如下 \n\n#### [1. 两数之和](https://leetcode-cn.com/problems/two-sum/)\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n> 给定 nums = [2, 7, 11, 15], target = 9\n>\n> 因为 nums[0] + nums[1] = 2 + 7 = 9\n> 所以返回 [0, 1]\n\n##### 题解\n\n从数组中选出和为target的两个数，输出他的下标\n\n##### 思路\n\n- 思路一\n\n  遍历数组，使用两个for循环，复杂度是 O(nlog(n))\n\n- 思路二\n\n  利用hashmap将键值存入map中，然后循环，如果存在target-nums[i]时 返回数组下标\n\n##### 考察\n\n数组和hashmap的使用\n\n##### 实现\n\n```java\nclass Solution{\n    /**方法一 暴力破解 复杂度为 O(nlog(n))\n     *执行用时 :51 ms , 在所有 Java 提交中击败了 39.43% 的用户\n     *\n     *内存消耗 :37.1 MB 在所有 Java 提交中击败了92.26% 的用户\n     *\n     * **/\n    public int[] twoSum(int[] nums, int target) {\n        int a[] = new int[2];\n        for(int i=0;i<nums.length;i++){\n            for(int j=i+1;j<nums.length;j++){\n                int sum = nums[i]+nums[j];\n                if(sum==target){\n                    a[0]=i;\n                    a[1]=j;\n                }\n            }\n        }\n        return a;\n    }\n}\n\n```\n\n##### 优化\n\n```java\nclass Solution1{\n    /**方法二 参考 画解算法\n     **执行用时 :3 ms , 在所有 Java 提交中击败了 99.11% 的用户\n     *\n     *内存消耗 :37.2 MB 在所有 Java 提交中击败了90.61% 的用户\n     * @param nums\n     * @param target\n     * @return\n     */\n    public int[] twoSum(int[] nums, int target) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i=0;i<nums.length;i++){\n            if(map.containsKey(target-nums[i])){\n                return new int[]{map.get(target-nums[i]),i};\n            }\n            map.put(nums[i],i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n\n#### [2. 两数相加](https://leetcode-cn.com/problems/add-two-numbers/)\n\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n> ```\n> 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n> 输出：7 -> 0 -> 8\n> 原因：342 + 465 = 807\n> ```\n\n##### 题解\n\n返回一个求和的新链表\n\n##### 思路\n\n添加一个预先指针，判断下一位是否进位\n\n##### 考察\n\n利用链表进行加减\n\n##### 实现\n\n```java\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode pre = new ListNode(0);\n        ListNode cur = pre;\n        int carry=0;\n        while(l1!=null||l2!=null){\n            int x = l1==null?0:l1.val;\n            int y = l2==null?0:l2.val;\n            int sum = x+y+carry;\n            carry = sum/10;\n            sum=sum%10;\n            cur.next = new ListNode(sum);\n            cur=cur.next;\n            if(l1!=null){\n                l1=l1.next;\n            }\n            if(l2!=null){\n                l2=l2.next;\n            }\n\n        }\n        if (carry==1){\n            cur.next=new ListNode(1);\n\n        }\n        return pre.next;\n    }\n}\n```\n\n\n\n##### 优化\n\n#### [3. 无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/)\n\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n\n示例 1:\n\n> 输入: \"abcabcbb\"\n> 输出: 3 \n> 解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n> 示例 2:\n> 输入: \"bbbbb\"\n> 输出: 1\n> 解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n> 示例 3:\n> 输入: \"pwwkew\"\n> 输出: 3\n>\n> > 解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n> >      请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串\n\n##### 题解\n\n在所给的字符串中找到那个前后不重复且长度最长的子串\n\n##### 思路\n\n将key存在hashmap中，如果不相同就++，存在相同的情况下就更新max值\n\n##### 考察\n\n字符串的匹配，滑动窗口\n\n##### 实现\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        HashMap<Character,Integer> map = new HashMap<>();\n        int start =0;\n        int max=0;\n        for(int i=0;i<s.length();i++){\n            if(map.containsKey(s.charAt(i))){\n               start = Math.max(start,map.get(s.charAt(i)));      \n            }\n            max = Math.max(max,i-start+1);\n            map.put(s.charAt(i),i+1);      \n        }\n        return max;\n    }\n}\n```\n\n\n\n##### 优化\n\n#### [6. Z 字形变换](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"LEETCODEISHIRING\" 行数为 3 时，排列如下：\n\nL   C   I   R\nE T O E S I I G\nE   D   H   N\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"LCIRETOESIIGEDHN\"。\n\n请你实现这个将字符串进行指定行数变换的函数：\n\nstring convert(string s, int numRows);\n\n示例 1:\n\n> 输入: s = \"LEETCODEISHIRING\", numRows = 3\n> 输出: \"LCIRETOESIIGEDHN\"\n\n示例 2:\n\n> 输入: s = \"LEETCODEISHIRING\", numRows = 4\n> 输出: \"LDREOEIIECIHNTSG\"\n> 解释:\n>\n> L     D     R\n> E   O E   I I\n> E C   I H   N\n> T     S     G\n\n##### 题解\n\n将原先的字符串按照z字形进行转换输出\n\n##### 思路\n\n可以构造n个 StringBuilder，然后定义一个 res 判断z字形的下一个元素是 进入到 str[i+1]还是 str[i-1]上\n\n##### 考察\n\n字符串操作\n\n##### 实现\n\n```java\nclass Solution {\n    public String convert(String s, int numRows) {\n        if(numRows<2){\n            return s;\n        }\n        List<StringBuilder>  strBuilder = new ArrayList<StringBuilder>(); \n        for(int i = 0; i < numRows; i++) strBuilder.add(new StringBuilder());\n        int res=-1;\n        int j=0;\n        for (int i=0;i<s.length();i++){\n            strBuilder.get(j).append(s.charAt(i));\n            if(j==0||j==(numRows-1)){\n               res=-res;}\n            j=res+j;\n    }\n      StringBuilder stb = new StringBuilder();\n    for (int i =0;i<numRows;i++){\n        stb.append(strBuilder.get(i).toString());\n    }\n               return stb.toString();\n               \n}\n}\n```\n\n\n\n##### 优化\n\n#### [7. 整数反转](https://leetcode-cn.com/problems/reverse-integer/)\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n示例 1:\n\n> 输入: 123\n> 输出: 321\n\n 示例 2:\n\n> 输入: -123\n> 输出: -321\n\n示例 3:\n\n> 输入: 120\n> 输出: 21\n\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n##### 思路\n\n可以利用StringBuilder的 reverse()方法将字符进行翻转。\n\n##### 考察\n\n字符串的操作吧！\n\n##### 实现\n\n```java\nclass Solution {\n    public int reverse(int x) {\n      if (x>2147483647||x<-2147483648||x==0)\n          return 0;\n        StringBuilder strBuilder = new StringBuilder();       \n        if(x<0){\n            x=-x;\n            strBuilder.append(x);\n            try{\n                return -Integer.parseInt(strBuilder.reverse().toString());\n            }catch(Exception e){\n                return 0;\n            }            \n        }\n        else{\n            while(x%10==0)\n                x/=10;\n            strBuilder.append(x);\n            try{\n                return Integer.parseInt(strBuilder.reverse().toString());\n            }catch(Exception e){\n                return 0;\n            }            \n        }    \n    }\n}\n```\n\n\n\n##### 优化\n\n#### [9. 回文数](https://leetcode-cn.com/problems/palindrome-number/)\n\n##### 题解\n\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n示例 1:\n\n> 输入: 121\n> 输出: true\n\n示例 2:\n\n>  输入: -121\n> 输出: false\n> 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n\n示例 3:\n\n> 输入: 10\n> 输出: false\n> 解释: 从右向左读, 为 01 。因此它不是一个回文数。\n\n##### 思路\n\n直接用reverse()\n\n需要注意的是在进行比较的时候 int转为str可以是 int+\"\"\n\n##### 考察\n\n##### 实现\n\n```java\nclass Solution {\n    public boolean isPalindrome(int x) {\n        StringBuilder strBuilder = new StringBuilder(x+\"\").reverse();\n        return (x+\"\").equals(strBuilder.toString());\n        \n    }\n}\n```\n\n##### 优化\n\n#### [14. 最长公共前缀](https://leetcode-cn.com/problems/longest-common-prefix/)\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 \"\"。\n\n示例 1:\n\n> 输入: [\"flower\",\"flow\",\"flight\"]\n> 输出: \"fl\"\n\n示例 2:\n\n> 输入: [\"dog\",\"racecar\",\"car\"]\n> 输出: \"\"\n\n解释: 输入不存在公共前缀。\n说明:\n\n所有输入只包含小写字母 a-z 。\n\n来源：力扣（LeetCode）\n\n##### 题解\n\n找到字符串相同的前缀\n\n##### 思路\n\n直接设置一个字符串，如果字符串前缀相同，则存入，否则 跳出；\n\n##### 考察\n\n字符串操作\n\n##### 实现\n\n```java\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if(strs.length==0||strs[0]==\"\"){\n            return \"\";\n        }\n        String str = strs[0];\n        for(int i=1;i<strs.length;i++){\n            int j=0;\n            for(;j<str.length()&&j<strs[i].length();j++){\n                if(str.charAt(j)!=strs[i].charAt(j))\n                    break;\n            }\n            str = str.substring(0,j);\n            if(str==\"\"){\n                return str;\n            }\n        }\n        return str;\n    }\n}\n```\n\n##### 优化\n\n\n\n#### 模板\n\n##### 题解\n\n##### 思路\n\n##### 考察\n\n##### 实现\n\n##### 优化\n\n","source":"leetCode/index.md","raw":"---\ntitle: leetCode\ndate: 2019-09-27 20:42:00\n---\n\n## leetCode刷题笔记\n\n> 每部分刷题笔记都从 \n>\n> - 题解 \n> - 思路\n> - 考察\n> - 实现 \n> - 优化\n>\n> 五个方面进行解释\n\n\n\n## 题目顺序如下 \n\n#### [1. 两数之和](https://leetcode-cn.com/problems/two-sum/)\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n> 给定 nums = [2, 7, 11, 15], target = 9\n>\n> 因为 nums[0] + nums[1] = 2 + 7 = 9\n> 所以返回 [0, 1]\n\n##### 题解\n\n从数组中选出和为target的两个数，输出他的下标\n\n##### 思路\n\n- 思路一\n\n  遍历数组，使用两个for循环，复杂度是 O(nlog(n))\n\n- 思路二\n\n  利用hashmap将键值存入map中，然后循环，如果存在target-nums[i]时 返回数组下标\n\n##### 考察\n\n数组和hashmap的使用\n\n##### 实现\n\n```java\nclass Solution{\n    /**方法一 暴力破解 复杂度为 O(nlog(n))\n     *执行用时 :51 ms , 在所有 Java 提交中击败了 39.43% 的用户\n     *\n     *内存消耗 :37.1 MB 在所有 Java 提交中击败了92.26% 的用户\n     *\n     * **/\n    public int[] twoSum(int[] nums, int target) {\n        int a[] = new int[2];\n        for(int i=0;i<nums.length;i++){\n            for(int j=i+1;j<nums.length;j++){\n                int sum = nums[i]+nums[j];\n                if(sum==target){\n                    a[0]=i;\n                    a[1]=j;\n                }\n            }\n        }\n        return a;\n    }\n}\n\n```\n\n##### 优化\n\n```java\nclass Solution1{\n    /**方法二 参考 画解算法\n     **执行用时 :3 ms , 在所有 Java 提交中击败了 99.11% 的用户\n     *\n     *内存消耗 :37.2 MB 在所有 Java 提交中击败了90.61% 的用户\n     * @param nums\n     * @param target\n     * @return\n     */\n    public int[] twoSum(int[] nums, int target) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i=0;i<nums.length;i++){\n            if(map.containsKey(target-nums[i])){\n                return new int[]{map.get(target-nums[i]),i};\n            }\n            map.put(nums[i],i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n\n#### [2. 两数相加](https://leetcode-cn.com/problems/add-two-numbers/)\n\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n> ```\n> 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n> 输出：7 -> 0 -> 8\n> 原因：342 + 465 = 807\n> ```\n\n##### 题解\n\n返回一个求和的新链表\n\n##### 思路\n\n添加一个预先指针，判断下一位是否进位\n\n##### 考察\n\n利用链表进行加减\n\n##### 实现\n\n```java\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode pre = new ListNode(0);\n        ListNode cur = pre;\n        int carry=0;\n        while(l1!=null||l2!=null){\n            int x = l1==null?0:l1.val;\n            int y = l2==null?0:l2.val;\n            int sum = x+y+carry;\n            carry = sum/10;\n            sum=sum%10;\n            cur.next = new ListNode(sum);\n            cur=cur.next;\n            if(l1!=null){\n                l1=l1.next;\n            }\n            if(l2!=null){\n                l2=l2.next;\n            }\n\n        }\n        if (carry==1){\n            cur.next=new ListNode(1);\n\n        }\n        return pre.next;\n    }\n}\n```\n\n\n\n##### 优化\n\n#### [3. 无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/)\n\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n\n示例 1:\n\n> 输入: \"abcabcbb\"\n> 输出: 3 \n> 解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n> 示例 2:\n> 输入: \"bbbbb\"\n> 输出: 1\n> 解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n> 示例 3:\n> 输入: \"pwwkew\"\n> 输出: 3\n>\n> > 解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n> >      请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串\n\n##### 题解\n\n在所给的字符串中找到那个前后不重复且长度最长的子串\n\n##### 思路\n\n将key存在hashmap中，如果不相同就++，存在相同的情况下就更新max值\n\n##### 考察\n\n字符串的匹配，滑动窗口\n\n##### 实现\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        HashMap<Character,Integer> map = new HashMap<>();\n        int start =0;\n        int max=0;\n        for(int i=0;i<s.length();i++){\n            if(map.containsKey(s.charAt(i))){\n               start = Math.max(start,map.get(s.charAt(i)));      \n            }\n            max = Math.max(max,i-start+1);\n            map.put(s.charAt(i),i+1);      \n        }\n        return max;\n    }\n}\n```\n\n\n\n##### 优化\n\n#### [6. Z 字形变换](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"LEETCODEISHIRING\" 行数为 3 时，排列如下：\n\nL   C   I   R\nE T O E S I I G\nE   D   H   N\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"LCIRETOESIIGEDHN\"。\n\n请你实现这个将字符串进行指定行数变换的函数：\n\nstring convert(string s, int numRows);\n\n示例 1:\n\n> 输入: s = \"LEETCODEISHIRING\", numRows = 3\n> 输出: \"LCIRETOESIIGEDHN\"\n\n示例 2:\n\n> 输入: s = \"LEETCODEISHIRING\", numRows = 4\n> 输出: \"LDREOEIIECIHNTSG\"\n> 解释:\n>\n> L     D     R\n> E   O E   I I\n> E C   I H   N\n> T     S     G\n\n##### 题解\n\n将原先的字符串按照z字形进行转换输出\n\n##### 思路\n\n可以构造n个 StringBuilder，然后定义一个 res 判断z字形的下一个元素是 进入到 str[i+1]还是 str[i-1]上\n\n##### 考察\n\n字符串操作\n\n##### 实现\n\n```java\nclass Solution {\n    public String convert(String s, int numRows) {\n        if(numRows<2){\n            return s;\n        }\n        List<StringBuilder>  strBuilder = new ArrayList<StringBuilder>(); \n        for(int i = 0; i < numRows; i++) strBuilder.add(new StringBuilder());\n        int res=-1;\n        int j=0;\n        for (int i=0;i<s.length();i++){\n            strBuilder.get(j).append(s.charAt(i));\n            if(j==0||j==(numRows-1)){\n               res=-res;}\n            j=res+j;\n    }\n      StringBuilder stb = new StringBuilder();\n    for (int i =0;i<numRows;i++){\n        stb.append(strBuilder.get(i).toString());\n    }\n               return stb.toString();\n               \n}\n}\n```\n\n\n\n##### 优化\n\n#### [7. 整数反转](https://leetcode-cn.com/problems/reverse-integer/)\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n示例 1:\n\n> 输入: 123\n> 输出: 321\n\n 示例 2:\n\n> 输入: -123\n> 输出: -321\n\n示例 3:\n\n> 输入: 120\n> 输出: 21\n\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n##### 思路\n\n可以利用StringBuilder的 reverse()方法将字符进行翻转。\n\n##### 考察\n\n字符串的操作吧！\n\n##### 实现\n\n```java\nclass Solution {\n    public int reverse(int x) {\n      if (x>2147483647||x<-2147483648||x==0)\n          return 0;\n        StringBuilder strBuilder = new StringBuilder();       \n        if(x<0){\n            x=-x;\n            strBuilder.append(x);\n            try{\n                return -Integer.parseInt(strBuilder.reverse().toString());\n            }catch(Exception e){\n                return 0;\n            }            \n        }\n        else{\n            while(x%10==0)\n                x/=10;\n            strBuilder.append(x);\n            try{\n                return Integer.parseInt(strBuilder.reverse().toString());\n            }catch(Exception e){\n                return 0;\n            }            \n        }    \n    }\n}\n```\n\n\n\n##### 优化\n\n#### [9. 回文数](https://leetcode-cn.com/problems/palindrome-number/)\n\n##### 题解\n\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n示例 1:\n\n> 输入: 121\n> 输出: true\n\n示例 2:\n\n>  输入: -121\n> 输出: false\n> 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n\n示例 3:\n\n> 输入: 10\n> 输出: false\n> 解释: 从右向左读, 为 01 。因此它不是一个回文数。\n\n##### 思路\n\n直接用reverse()\n\n需要注意的是在进行比较的时候 int转为str可以是 int+\"\"\n\n##### 考察\n\n##### 实现\n\n```java\nclass Solution {\n    public boolean isPalindrome(int x) {\n        StringBuilder strBuilder = new StringBuilder(x+\"\").reverse();\n        return (x+\"\").equals(strBuilder.toString());\n        \n    }\n}\n```\n\n##### 优化\n\n#### [14. 最长公共前缀](https://leetcode-cn.com/problems/longest-common-prefix/)\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 \"\"。\n\n示例 1:\n\n> 输入: [\"flower\",\"flow\",\"flight\"]\n> 输出: \"fl\"\n\n示例 2:\n\n> 输入: [\"dog\",\"racecar\",\"car\"]\n> 输出: \"\"\n\n解释: 输入不存在公共前缀。\n说明:\n\n所有输入只包含小写字母 a-z 。\n\n来源：力扣（LeetCode）\n\n##### 题解\n\n找到字符串相同的前缀\n\n##### 思路\n\n直接设置一个字符串，如果字符串前缀相同，则存入，否则 跳出；\n\n##### 考察\n\n字符串操作\n\n##### 实现\n\n```java\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if(strs.length==0||strs[0]==\"\"){\n            return \"\";\n        }\n        String str = strs[0];\n        for(int i=1;i<strs.length;i++){\n            int j=0;\n            for(;j<str.length()&&j<strs[i].length();j++){\n                if(str.charAt(j)!=strs[i].charAt(j))\n                    break;\n            }\n            str = str.substring(0,j);\n            if(str==\"\"){\n                return str;\n            }\n        }\n        return str;\n    }\n}\n```\n\n##### 优化\n\n\n\n#### 模板\n\n##### 题解\n\n##### 思路\n\n##### 考察\n\n##### 实现\n\n##### 优化\n\n","updated":"2020-03-22T11:13:25.491Z","path":"leetCode/index.html","comments":1,"layout":"page","_id":"ck82yy5s5001prwv0bj57g86p","content":"<h2 id=\"leetCode刷题笔记\"><a href=\"#leetCode刷题笔记\" class=\"headerlink\" title=\"leetCode刷题笔记\"></a>leetCode刷题笔记</h2><blockquote>\n<p>每部分刷题笔记都从 </p>\n<ul>\n<li>题解 </li>\n<li>思路</li>\n<li>考察</li>\n<li>实现 </li>\n<li>优化</li>\n</ul>\n<p>五个方面进行解释</p>\n</blockquote><h2 id=\"题目顺序如下\"><a href=\"#题目顺序如下\" class=\"headerlink\" title=\"题目顺序如下\"></a>题目顺序如下</h2><h4 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1. 两数之和\"></a><a href=\"https://leetcode-cn.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">1. 两数之和</a></h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><a id=\"more\"></a>\n\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<h5 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>从数组中选出和为target的两个数，输出他的下标</p>\n<h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><ul>\n<li><p>思路一</p>\n<p>遍历数组，使用两个for循环，复杂度是 O(nlog(n))</p>\n</li>\n<li><p>思路二</p>\n<p>利用hashmap将键值存入map中，然后循环，如果存在target-nums[i]时 返回数组下标</p>\n</li>\n</ul>\n<h5 id=\"考察\"><a href=\"#考察\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>数组和hashmap的使用</p>\n<h5 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**方法一 暴力破解 复杂度为 O(nlog(n))</span></span><br><span class=\"line\"><span class=\"comment\">     *执行用时 :51 ms , 在所有 Java 提交中击败了 39.43% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *内存消耗 :37.1 MB 在所有 Java 提交中击败了92.26% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> sum = nums[i]+nums[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum==target)&#123;</span><br><span class=\"line\">                    a[<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">                    a[<span class=\"number\">1</span>]=j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**方法二 参考 画解算法</span></span><br><span class=\"line\"><span class=\"comment\">     **执行用时 :3 ms , 在所有 Java 提交中击败了 99.11% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *内存消耗 :37.2 MB 在所有 Java 提交中击败了90.61% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;map.get(target-nums[i]),i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i],i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-两数相加\"><a href=\"#2-两数相加\" class=\"headerlink\" title=\"2. 两数相加\"></a><a href=\"https://leetcode-cn.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">2. 两数相加</a></h4><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">&gt; 输出：7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">&gt; 原因：342 + 465 = 807</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>返回一个求和的新链表</p>\n<h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>添加一个预先指针，判断下一位是否进位</p>\n<h5 id=\"考察-1\"><a href=\"#考察-1\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>利用链表进行加减</p>\n<h5 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode pre = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode cur = pre;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> carry=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l1!=<span class=\"keyword\">null</span>||l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = l1==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:l1.val;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = l2==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:l2.val;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = x+y+carry;</span><br><span class=\"line\">            carry = sum/<span class=\"number\">10</span>;</span><br><span class=\"line\">            sum=sum%<span class=\"number\">10</span>;</span><br><span class=\"line\">            cur.next = <span class=\"keyword\">new</span> ListNode(sum);</span><br><span class=\"line\">            cur=cur.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                l1=l1.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                l2=l2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (carry==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            cur.next=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-1\"><a href=\"#优化-1\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"3-无重复字符的最长子串\"><a href=\"#3-无重复字符的最长子串\" class=\"headerlink\" title=\"3. 无重复字符的最长子串\"></a><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">3. 无重复字符的最长子串</a></h4><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:<br>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:<br>输入: “pwwkew”<br>输出: 3</p>\n<blockquote>\n<p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串</p>\n</blockquote>\n</blockquote>\n<h5 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>在所给的字符串中找到那个前后不重复且长度最长的子串</p>\n<h5 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>将key存在hashmap中，如果不相同就++，存在相同的情况下就更新max值</p>\n<h5 id=\"考察-2\"><a href=\"#考察-2\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串的匹配，滑动窗口</p>\n<h5 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;Character,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(s.charAt(i)))&#123;</span><br><span class=\"line\">               start = Math.max(start,map.get(s.charAt(i)));      </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max,i-start+<span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(s.charAt(i),i+<span class=\"number\">1</span>);      </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-2\"><a href=\"#优化-2\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"6-Z-字形变换\"><a href=\"#6-Z-字形变换\" class=\"headerlink\" title=\"6. Z 字形变换\"></a><a href=\"https://leetcode-cn.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">6. Z 字形变换</a></h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>\n<p>L   C   I   R<br>E T O E S I I G<br>E   D   H   N<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<p>string convert(string s, int numRows);</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: s = “LEETCODEISHIRING”, numRows = 3<br>输出: “LCIRETOESIIGEDHN”</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: s = “LEETCODEISHIRING”, numRows = 4<br>输出: “LDREOEIIECIHNTSG”<br>解释:</p>\n<p>L     D     R<br>E   O E   I I<br>E C   I H   N<br>T     S     G</p>\n</blockquote>\n<h5 id=\"题解-3\"><a href=\"#题解-3\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>将原先的字符串按照z字形进行转换输出</p>\n<h5 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>可以构造n个 StringBuilder，然后定义一个 res 判断z字形的下一个元素是 进入到 str[i+1]还是 str[i-1]上</p>\n<h5 id=\"考察-3\"><a href=\"#考察-3\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串操作</p>\n<h5 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convert</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numRows&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;StringBuilder&gt;  strBuilder = <span class=\"keyword\">new</span> ArrayList&lt;StringBuilder&gt;(); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) strBuilder.add(<span class=\"keyword\">new</span> StringBuilder());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            strBuilder.get(j).append(s.charAt(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>||j==(numRows-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">               res=-res;&#125;</span><br><span class=\"line\">            j=res+j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      StringBuilder stb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">        stb.append(strBuilder.get(i).toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> stb.toString();</span><br><span class=\"line\">               </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-3\"><a href=\"#优化-3\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"7-整数反转\"><a href=\"#7-整数反转\" class=\"headerlink\" title=\"7. 整数反转\"></a><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">7. 整数反转</a></h4><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p> 示例 2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21</p>\n</blockquote>\n<p>注意:</p>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<h5 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>可以利用StringBuilder的 reverse()方法将字符进行翻转。</p>\n<h5 id=\"考察-4\"><a href=\"#考察-4\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串的操作吧！</p>\n<h5 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x&gt;<span class=\"number\">2147483647</span>||x&lt;-<span class=\"number\">2147483648</span>||x==<span class=\"number\">0</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        StringBuilder strBuilder = <span class=\"keyword\">new</span> StringBuilder();       </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            x=-x;</span><br><span class=\"line\">            strBuilder.append(x);</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -Integer.parseInt(strBuilder.reverse().toString());</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x%<span class=\"number\">10</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">                x/=<span class=\"number\">10</span>;</span><br><span class=\"line\">            strBuilder.append(x);</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Integer.parseInt(strBuilder.reverse().toString());</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-4\"><a href=\"#优化-4\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"9-回文数\"><a href=\"#9-回文数\" class=\"headerlink\" title=\"9. 回文数\"></a><a href=\"https://leetcode-cn.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">9. 回文数</a></h4><h5 id=\"题解-4\"><a href=\"#题解-4\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 121<br>输出: true</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p> 输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p>\n</blockquote>\n<h5 id=\"思路-5\"><a href=\"#思路-5\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>直接用reverse()</p>\n<p>需要注意的是在进行比较的时候 int转为str可以是 int+””</p>\n<h5 id=\"考察-5\"><a href=\"#考察-5\" class=\"headerlink\" title=\"考察\"></a>考察</h5><h5 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder strBuilder = <span class=\"keyword\">new</span> StringBuilder(x+<span class=\"string\">\"\"</span>).reverse();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x+<span class=\"string\">\"\"</span>).equals(strBuilder.toString());</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-5\"><a href=\"#优化-5\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"14-最长公共前缀\"><a href=\"#14-最长公共前缀\" class=\"headerlink\" title=\"14. 最长公共前缀\"></a><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">14. 最长公共前缀</a></h4><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 “”。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: [“dog”,”racecar”,”car”]<br>输出: “”</p>\n</blockquote>\n<p>解释: 输入不存在公共前缀。<br>说明:</p>\n<p>所有输入只包含小写字母 a-z 。</p>\n<p>来源：力扣（LeetCode）</p>\n<h5 id=\"题解-5\"><a href=\"#题解-5\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>找到字符串相同的前缀</p>\n<h5 id=\"思路-6\"><a href=\"#思路-6\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>直接设置一个字符串，如果字符串前缀相同，则存入，否则 跳出；</p>\n<h5 id=\"考察-6\"><a href=\"#考察-6\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串操作</p>\n<h5 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">0</span>||strs[<span class=\"number\">0</span>]==<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String str = strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;strs.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;j&lt;str.length()&amp;&amp;j&lt;strs[i].length();j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str.charAt(j)!=strs[i].charAt(j))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str = str.substring(<span class=\"number\">0</span>,j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str==<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-6\"><a href=\"#优化-6\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><h5 id=\"题解-6\"><a href=\"#题解-6\" class=\"headerlink\" title=\"题解\"></a>题解</h5><h5 id=\"思路-7\"><a href=\"#思路-7\" class=\"headerlink\" title=\"思路\"></a>思路</h5><h5 id=\"考察-7\"><a href=\"#考察-7\" class=\"headerlink\" title=\"考察\"></a>考察</h5><h5 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h5><h5 id=\"优化-7\"><a href=\"#优化-7\" class=\"headerlink\" title=\"优化\"></a>优化</h5>","site":{"data":{}},"excerpt":"<h2 id=\"leetCode刷题笔记\"><a href=\"#leetCode刷题笔记\" class=\"headerlink\" title=\"leetCode刷题笔记\"></a>leetCode刷题笔记</h2><blockquote>\n<p>每部分刷题笔记都从 </p>\n<ul>\n<li>题解 </li>\n<li>思路</li>\n<li>考察</li>\n<li>实现 </li>\n<li>优化</li>\n</ul>\n<p>五个方面进行解释</p>\n</blockquote><h2 id=\"题目顺序如下\"><a href=\"#题目顺序如下\" class=\"headerlink\" title=\"题目顺序如下\"></a>题目顺序如下</h2><h4 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1. 两数之和\"></a><a href=\"https://leetcode-cn.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">1. 两数之和</a></h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>","more":"\n\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<h5 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>从数组中选出和为target的两个数，输出他的下标</p>\n<h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><ul>\n<li><p>思路一</p>\n<p>遍历数组，使用两个for循环，复杂度是 O(nlog(n))</p>\n</li>\n<li><p>思路二</p>\n<p>利用hashmap将键值存入map中，然后循环，如果存在target-nums[i]时 返回数组下标</p>\n</li>\n</ul>\n<h5 id=\"考察\"><a href=\"#考察\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>数组和hashmap的使用</p>\n<h5 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**方法一 暴力破解 复杂度为 O(nlog(n))</span></span><br><span class=\"line\"><span class=\"comment\">     *执行用时 :51 ms , 在所有 Java 提交中击败了 39.43% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *内存消耗 :37.1 MB 在所有 Java 提交中击败了92.26% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * **/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> sum = nums[i]+nums[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum==target)&#123;</span><br><span class=\"line\">                    a[<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">                    a[<span class=\"number\">1</span>]=j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**方法二 参考 画解算法</span></span><br><span class=\"line\"><span class=\"comment\">     **执行用时 :3 ms , 在所有 Java 提交中击败了 99.11% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *内存消耗 :37.2 MB 在所有 Java 提交中击败了90.61% 的用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;map.get(target-nums[i]),i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i],i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-两数相加\"><a href=\"#2-两数相加\" class=\"headerlink\" title=\"2. 两数相加\"></a><a href=\"https://leetcode-cn.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">2. 两数相加</a></h4><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">&gt; 输出：7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">&gt; 原因：342 + 465 = 807</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>返回一个求和的新链表</p>\n<h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>添加一个预先指针，判断下一位是否进位</p>\n<h5 id=\"考察-1\"><a href=\"#考察-1\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>利用链表进行加减</p>\n<h5 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode pre = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode cur = pre;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> carry=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l1!=<span class=\"keyword\">null</span>||l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = l1==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:l1.val;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = l2==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:l2.val;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = x+y+carry;</span><br><span class=\"line\">            carry = sum/<span class=\"number\">10</span>;</span><br><span class=\"line\">            sum=sum%<span class=\"number\">10</span>;</span><br><span class=\"line\">            cur.next = <span class=\"keyword\">new</span> ListNode(sum);</span><br><span class=\"line\">            cur=cur.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                l1=l1.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                l2=l2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (carry==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            cur.next=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-1\"><a href=\"#优化-1\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"3-无重复字符的最长子串\"><a href=\"#3-无重复字符的最长子串\" class=\"headerlink\" title=\"3. 无重复字符的最长子串\"></a><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">3. 无重复字符的最长子串</a></h4><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:<br>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:<br>输入: “pwwkew”<br>输出: 3</p>\n<blockquote>\n<p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串</p>\n</blockquote>\n</blockquote>\n<h5 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>在所给的字符串中找到那个前后不重复且长度最长的子串</p>\n<h5 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>将key存在hashmap中，如果不相同就++，存在相同的情况下就更新max值</p>\n<h5 id=\"考察-2\"><a href=\"#考察-2\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串的匹配，滑动窗口</p>\n<h5 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;Character,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(s.charAt(i)))&#123;</span><br><span class=\"line\">               start = Math.max(start,map.get(s.charAt(i)));      </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max,i-start+<span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(s.charAt(i),i+<span class=\"number\">1</span>);      </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-2\"><a href=\"#优化-2\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"6-Z-字形变换\"><a href=\"#6-Z-字形变换\" class=\"headerlink\" title=\"6. Z 字形变换\"></a><a href=\"https://leetcode-cn.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">6. Z 字形变换</a></h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>\n<p>L   C   I   R<br>E T O E S I I G<br>E   D   H   N<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<p>string convert(string s, int numRows);</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: s = “LEETCODEISHIRING”, numRows = 3<br>输出: “LCIRETOESIIGEDHN”</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: s = “LEETCODEISHIRING”, numRows = 4<br>输出: “LDREOEIIECIHNTSG”<br>解释:</p>\n<p>L     D     R<br>E   O E   I I<br>E C   I H   N<br>T     S     G</p>\n</blockquote>\n<h5 id=\"题解-3\"><a href=\"#题解-3\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>将原先的字符串按照z字形进行转换输出</p>\n<h5 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>可以构造n个 StringBuilder，然后定义一个 res 判断z字形的下一个元素是 进入到 str[i+1]还是 str[i-1]上</p>\n<h5 id=\"考察-3\"><a href=\"#考察-3\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串操作</p>\n<h5 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convert</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numRows&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;StringBuilder&gt;  strBuilder = <span class=\"keyword\">new</span> ArrayList&lt;StringBuilder&gt;(); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) strBuilder.add(<span class=\"keyword\">new</span> StringBuilder());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            strBuilder.get(j).append(s.charAt(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>||j==(numRows-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">               res=-res;&#125;</span><br><span class=\"line\">            j=res+j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      StringBuilder stb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">        stb.append(strBuilder.get(i).toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> stb.toString();</span><br><span class=\"line\">               </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-3\"><a href=\"#优化-3\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"7-整数反转\"><a href=\"#7-整数反转\" class=\"headerlink\" title=\"7. 整数反转\"></a><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">7. 整数反转</a></h4><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p> 示例 2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21</p>\n</blockquote>\n<p>注意:</p>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<h5 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>可以利用StringBuilder的 reverse()方法将字符进行翻转。</p>\n<h5 id=\"考察-4\"><a href=\"#考察-4\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串的操作吧！</p>\n<h5 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x&gt;<span class=\"number\">2147483647</span>||x&lt;-<span class=\"number\">2147483648</span>||x==<span class=\"number\">0</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        StringBuilder strBuilder = <span class=\"keyword\">new</span> StringBuilder();       </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            x=-x;</span><br><span class=\"line\">            strBuilder.append(x);</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -Integer.parseInt(strBuilder.reverse().toString());</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x%<span class=\"number\">10</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">                x/=<span class=\"number\">10</span>;</span><br><span class=\"line\">            strBuilder.append(x);</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Integer.parseInt(strBuilder.reverse().toString());</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-4\"><a href=\"#优化-4\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"9-回文数\"><a href=\"#9-回文数\" class=\"headerlink\" title=\"9. 回文数\"></a><a href=\"https://leetcode-cn.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">9. 回文数</a></h4><h5 id=\"题解-4\"><a href=\"#题解-4\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 121<br>输出: true</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p> 输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p>\n</blockquote>\n<h5 id=\"思路-5\"><a href=\"#思路-5\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>直接用reverse()</p>\n<p>需要注意的是在进行比较的时候 int转为str可以是 int+””</p>\n<h5 id=\"考察-5\"><a href=\"#考察-5\" class=\"headerlink\" title=\"考察\"></a>考察</h5><h5 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder strBuilder = <span class=\"keyword\">new</span> StringBuilder(x+<span class=\"string\">\"\"</span>).reverse();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x+<span class=\"string\">\"\"</span>).equals(strBuilder.toString());</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-5\"><a href=\"#优化-5\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"14-最长公共前缀\"><a href=\"#14-最长公共前缀\" class=\"headerlink\" title=\"14. 最长公共前缀\"></a><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">14. 最长公共前缀</a></h4><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 “”。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: [“dog”,”racecar”,”car”]<br>输出: “”</p>\n</blockquote>\n<p>解释: 输入不存在公共前缀。<br>说明:</p>\n<p>所有输入只包含小写字母 a-z 。</p>\n<p>来源：力扣（LeetCode）</p>\n<h5 id=\"题解-5\"><a href=\"#题解-5\" class=\"headerlink\" title=\"题解\"></a>题解</h5><p>找到字符串相同的前缀</p>\n<h5 id=\"思路-6\"><a href=\"#思路-6\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>直接设置一个字符串，如果字符串前缀相同，则存入，否则 跳出；</p>\n<h5 id=\"考察-6\"><a href=\"#考察-6\" class=\"headerlink\" title=\"考察\"></a>考察</h5><p>字符串操作</p>\n<h5 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">0</span>||strs[<span class=\"number\">0</span>]==<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String str = strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;strs.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;j&lt;str.length()&amp;&amp;j&lt;strs[i].length();j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str.charAt(j)!=strs[i].charAt(j))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str = str.substring(<span class=\"number\">0</span>,j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str==<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化-6\"><a href=\"#优化-6\" class=\"headerlink\" title=\"优化\"></a>优化</h5><h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><h5 id=\"题解-6\"><a href=\"#题解-6\" class=\"headerlink\" title=\"题解\"></a>题解</h5><h5 id=\"思路-7\"><a href=\"#思路-7\" class=\"headerlink\" title=\"思路\"></a>思路</h5><h5 id=\"考察-7\"><a href=\"#考察-7\" class=\"headerlink\" title=\"考察\"></a>考察</h5><h5 id=\"实现-7\"><a href=\"#实现-7\" class=\"headerlink\" title=\"实现\"></a>实现</h5><h5 id=\"优化-7\"><a href=\"#优化-7\" class=\"headerlink\" title=\"优化\"></a>优化</h5>"},{"title":"schedule","date":"2019-08-27T07:42:03.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2019-08-27 15:42:03\n---\n","updated":"2020-03-22T11:13:25.495Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ck82yy5s6001qrwv0mjb0yp1n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-08-27T07:44:39.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-27 15:44:39\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-03-22T11:13:25.497Z","path":"tags/index.html","layout":"page","_id":"ck82yy5s9001rrwv0ssaf29eq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tools","date":"2019-08-27T10:08:56.000Z","_content":"\n[Markdown]():一种语法简洁，易用的文本标记语言。用于博客，说明书，笔记书写。\n\n[Git]():分布式版本控制语言。应用于Github,软件开发版本回溯等。\n\n[Hexo](./2019/09/27/Hexo的使用笔记/):快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。\n\n[LaTex]():是一种基于TeX的排版系统,，易用与生成复杂表格和数学公式。\n\n[Docker]():实现轻量级的操作系统虚拟化解决方案,能够像操作虚拟机一样。\n\n[Linux]():程序员必备的工具。","source":"tools/index.md","raw":"---\ntitle: tools\ndate: 2019-08-27 18:08:56\n---\n\n[Markdown]():一种语法简洁，易用的文本标记语言。用于博客，说明书，笔记书写。\n\n[Git]():分布式版本控制语言。应用于Github,软件开发版本回溯等。\n\n[Hexo](./2019/09/27/Hexo的使用笔记/):快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。\n\n[LaTex]():是一种基于TeX的排版系统,，易用与生成复杂表格和数学公式。\n\n[Docker]():实现轻量级的操作系统虚拟化解决方案,能够像操作虚拟机一样。\n\n[Linux]():程序员必备的工具。","updated":"2020-03-22T11:13:25.499Z","path":"tools/index.html","comments":1,"layout":"page","_id":"ck82yy5sc001srwv0levz2c6c","content":"<p><a href>Markdown</a>:一种语法简洁，易用的文本标记语言。用于博客，说明书，笔记书写。</p><p><a href>Git</a>:分布式版本控制语言。应用于Github,软件开发版本回溯等。</p><p><a href=\"./2019/09/27/Hexo的使用笔记/\">Hexo</a>:快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。</p><a id=\"more\"></a>\n\n\n<p><a href>LaTex</a>:是一种基于TeX的排版系统,，易用与生成复杂表格和数学公式。</p>\n<p><a href>Docker</a>:实现轻量级的操作系统虚拟化解决方案,能够像操作虚拟机一样。</p>\n<p><a href>Linux</a>:程序员必备的工具。</p>\n","site":{"data":{}},"excerpt":"<p><a href>Markdown</a>:一种语法简洁，易用的文本标记语言。用于博客，说明书，笔记书写。</p><p><a href>Git</a>:分布式版本控制语言。应用于Github,软件开发版本回溯等。</p><p><a href=\"./2019/09/27/Hexo的使用笔记/\">Hexo</a>:快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。</p>","more":"\n\n\n<p><a href>LaTex</a>:是一种基于TeX的排版系统,，易用与生成复杂表格和数学公式。</p>\n<p><a href>Docker</a>:实现轻量级的操作系统虚拟化解决方案,能够像操作虚拟机一样。</p>\n<p><a href>Linux</a>:程序员必备的工具。</p>\n"}],"Post":[{"title":"Photoshop 记录","date":"2019-09-27T07:50:39.000Z","mathjax":true,"description":"生产力工具","_content":"\n#### 快捷键记录\n\n- 抓手工具 可以使用 space+鼠标快速操作\n- ctrl+o 快速打开文件\n- ctrl+w 关闭文件\n- 文件--置入嵌入对象   是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层\n- ctrl+n 新建\n\n- ctrl+Shift+alt +t 重复自由变换\n\n#### \n\n","source":"_posts/2019-09-27-题目.md","raw":"---\ntitle: 'Photoshop 记录'\ndate: 2019-09-27 15:50:39\ntags: \n  - ps\ncategories: [tools]\nmathjax: true\ndescription: 生产力工具\n---\n\n#### 快捷键记录\n\n- 抓手工具 可以使用 space+鼠标快速操作\n- ctrl+o 快速打开文件\n- ctrl+w 关闭文件\n- 文件--置入嵌入对象   是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层\n- ctrl+n 新建\n\n- ctrl+Shift+alt +t 重复自由变换\n\n#### \n\n","slug":"2019-09-27-题目","published":1,"updated":"2020-03-22T11:13:25.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5ly0001rwv0nzq29i8o","content":"<h4 id=\"快捷键记录\"><a href=\"#快捷键记录\" class=\"headerlink\" title=\"快捷键记录\"></a>快捷键记录</h4><ul>\n<li><p>抓手工具 可以使用 space+鼠标快速操作</p>\n</li>\n<li><p>ctrl+o 快速打开文件</p>\n</li>\n<li><p>ctrl+w 关闭文件</p>\n</li>\n<li><p>文件–置入嵌入对象   是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层</p>\n</li>\n<li><p>ctrl+n 新建</p>\n</li>\n<li><p>ctrl+Shift+alt +t 重复自由变换</p>\n</li>\n</ul><a id=\"more\"></a>\n<p>#### </p>\n","site":{"data":{}},"excerpt":"<h4 id=\"快捷键记录\"><a href=\"#快捷键记录\" class=\"headerlink\" title=\"快捷键记录\"></a>快捷键记录</h4><ul>\n<li><p>抓手工具 可以使用 space+鼠标快速操作</p>\n</li>\n<li><p>ctrl+o 快速打开文件</p>\n</li>\n<li><p>ctrl+w 关闭文件</p>\n</li>\n<li><p>文件–置入嵌入对象   是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层</p>\n</li>\n<li><p>ctrl+n 新建</p>\n</li>\n<li><p>ctrl+Shift+alt +t 重复自由变换</p>\n</li>\n</ul>","more":"\n<p>#### </p>\n"},{"title":"Git:分布式版本控制","date":"2019-08-28T15:42:57.000Z","description":"生产力工具","_content":"\n## Git简介\n\n#### 什么是Git\n\n> git是一种分布式版本控制系统\n\n##### 什么是版本控制系统：\n\n> \n\n##### 什么是分布式&集中式：\n\n>  优势：\n>\n> SVN\n\n##### Git的历史：\n\n>  2002年大神Linus 为了管理Linux源码，花了两个星期使用c语言编写的。\n\n#### 安装使用\n\nwindows上在[官网](https://git-scm.com/downloads)下载安装即可\n命令行验证一下 git 是否安装完成。\n\nubuntu 上\n\n```shell\nsudo apt-get install git\n```\n\n### Git学习笔记\n\n#### 1、建立与连接远程仓库\n\n建立git仓库\n\n``` git init```  \n\n添加项目中的文件  \n\n```git add *```  \n\n提交到仓库\n\n```git commit -m \"注释\"```\n\n与远程仓库建立关联  \n\n```git remote add origin https://github.com/wvdon/learn_tools.git```\n\n上传之前pull一下\n\n```git pull origin master```  \n\n上传到GitHub远程仓库（master分支）\n\n```git push -u origin master```\n\n#### 2、git基本操作\n\n查看仓库状态\n\n```git status```\n\n## 参考资料\n\n[廖雪峰git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n精通Git（第2版）\n\n![1567175758887](C:\\Users\\wvdon\\AppData\\Roaming\\Typora\\typora-user-images\\1567175758887.png)","source":"_posts/Git-分布式版本控制.md","raw":"---\ntitle: 'Git:分布式版本控制'\ndate: 2019-08-28 23:42:57\ntags: [git]\ncategories: tools\ndescription: 生产力工具\n---\n\n## Git简介\n\n#### 什么是Git\n\n> git是一种分布式版本控制系统\n\n##### 什么是版本控制系统：\n\n> \n\n##### 什么是分布式&集中式：\n\n>  优势：\n>\n> SVN\n\n##### Git的历史：\n\n>  2002年大神Linus 为了管理Linux源码，花了两个星期使用c语言编写的。\n\n#### 安装使用\n\nwindows上在[官网](https://git-scm.com/downloads)下载安装即可\n命令行验证一下 git 是否安装完成。\n\nubuntu 上\n\n```shell\nsudo apt-get install git\n```\n\n### Git学习笔记\n\n#### 1、建立与连接远程仓库\n\n建立git仓库\n\n``` git init```  \n\n添加项目中的文件  \n\n```git add *```  \n\n提交到仓库\n\n```git commit -m \"注释\"```\n\n与远程仓库建立关联  \n\n```git remote add origin https://github.com/wvdon/learn_tools.git```\n\n上传之前pull一下\n\n```git pull origin master```  \n\n上传到GitHub远程仓库（master分支）\n\n```git push -u origin master```\n\n#### 2、git基本操作\n\n查看仓库状态\n\n```git status```\n\n## 参考资料\n\n[廖雪峰git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n精通Git（第2版）\n\n![1567175758887](C:\\Users\\wvdon\\AppData\\Roaming\\Typora\\typora-user-images\\1567175758887.png)","slug":"Git-分布式版本控制","published":1,"updated":"2020-03-22T11:13:25.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5m30003rwv0750si4jx","content":"<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><h4 id=\"什么是Git\"><a href=\"#什么是Git\" class=\"headerlink\" title=\"什么是Git\"></a>什么是Git</h4><blockquote>\n<p>git是一种分布式版本控制系统</p>\n</blockquote><h5 id=\"什么是版本控制系统：\"><a href=\"#什么是版本控制系统：\" class=\"headerlink\" title=\"什么是版本控制系统：\"></a>什么是版本控制系统：</h5><blockquote>\n</blockquote><h5 id=\"什么是分布式-amp-集中式：\"><a href=\"#什么是分布式-amp-集中式：\" class=\"headerlink\" title=\"什么是分布式&amp;集中式：\"></a>什么是分布式&amp;集中式：</h5><blockquote>\n<p> 优势：</p>\n<p>SVN</p>\n</blockquote><h5 id=\"Git的历史：\"><a href=\"#Git的历史：\" class=\"headerlink\" title=\"Git的历史：\"></a>Git的历史：</h5><blockquote>\n<p> 2002年大神Linus 为了管理Linux源码，花了两个星期使用c语言编写的。</p>\n</blockquote><a id=\"more\"></a>\n\n\n\n<h4 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h4><p>windows上在<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">官网</a>下载安装即可<br>命令行验证一下 git 是否安装完成。</p>\n<p>ubuntu 上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git学习笔记\"><a href=\"#Git学习笔记\" class=\"headerlink\" title=\"Git学习笔记\"></a>Git学习笔记</h3><h4 id=\"1、建立与连接远程仓库\"><a href=\"#1、建立与连接远程仓库\" class=\"headerlink\" title=\"1、建立与连接远程仓库\"></a>1、建立与连接远程仓库</h4><p>建立git仓库</p>\n<figure class=\"highlight plain\"><figcaption><span>init```  </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">添加项目中的文件  </span><br><span class=\"line\"></span><br><span class=\"line\">```git add *```  </span><br><span class=\"line\"></span><br><span class=\"line\">提交到仓库</span><br><span class=\"line\"></span><br><span class=\"line\">```git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure>\n\n<p>与远程仓库建立关联  </p>\n<figure class=\"highlight plain\"><figcaption><span>remote add origin</span><a href=\"https://github.com/wvdon/learn_tools.git```\" target=\"_blank\" rel=\"noopener\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上传之前pull一下</span><br><span class=\"line\"></span><br><span class=\"line\">```git pull origin master```  </span><br><span class=\"line\"></span><br><span class=\"line\">上传到GitHub远程仓库（master分支）</span><br><span class=\"line\"></span><br><span class=\"line\">```git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、git基本操作\"><a href=\"#2、git基本操作\" class=\"headerlink\" title=\"2、git基本操作\"></a>2、git基本操作</h4><p>查看仓库状态</p>\n<p><code>git status</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰git教程</a></p>\n<p>精通Git（第2版）</p>\n<p><img src=\"C:%5CUsers%5Cwvdon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567175758887.png\" alt=\"1567175758887\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><h4 id=\"什么是Git\"><a href=\"#什么是Git\" class=\"headerlink\" title=\"什么是Git\"></a>什么是Git</h4><blockquote>\n<p>git是一种分布式版本控制系统</p>\n</blockquote><h5 id=\"什么是版本控制系统：\"><a href=\"#什么是版本控制系统：\" class=\"headerlink\" title=\"什么是版本控制系统：\"></a>什么是版本控制系统：</h5><blockquote>\n</blockquote><h5 id=\"什么是分布式-amp-集中式：\"><a href=\"#什么是分布式-amp-集中式：\" class=\"headerlink\" title=\"什么是分布式&amp;集中式：\"></a>什么是分布式&amp;集中式：</h5><blockquote>\n<p> 优势：</p>\n<p>SVN</p>\n</blockquote><h5 id=\"Git的历史：\"><a href=\"#Git的历史：\" class=\"headerlink\" title=\"Git的历史：\"></a>Git的历史：</h5><blockquote>\n<p> 2002年大神Linus 为了管理Linux源码，花了两个星期使用c语言编写的。</p>\n</blockquote>","more":"\n\n\n\n<h4 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h4><p>windows上在<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">官网</a>下载安装即可<br>命令行验证一下 git 是否安装完成。</p>\n<p>ubuntu 上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git学习笔记\"><a href=\"#Git学习笔记\" class=\"headerlink\" title=\"Git学习笔记\"></a>Git学习笔记</h3><h4 id=\"1、建立与连接远程仓库\"><a href=\"#1、建立与连接远程仓库\" class=\"headerlink\" title=\"1、建立与连接远程仓库\"></a>1、建立与连接远程仓库</h4><p>建立git仓库</p>\n<figure class=\"highlight plain\"><figcaption><span>init```  </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">添加项目中的文件  </span><br><span class=\"line\"></span><br><span class=\"line\">```git add *```  </span><br><span class=\"line\"></span><br><span class=\"line\">提交到仓库</span><br><span class=\"line\"></span><br><span class=\"line\">```git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure>\n\n<p>与远程仓库建立关联  </p>\n<figure class=\"highlight plain\"><figcaption><span>remote add origin</span><a href=\"https://github.com/wvdon/learn_tools.git```\" target=\"_blank\" rel=\"noopener\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上传之前pull一下</span><br><span class=\"line\"></span><br><span class=\"line\">```git pull origin master```  </span><br><span class=\"line\"></span><br><span class=\"line\">上传到GitHub远程仓库（master分支）</span><br><span class=\"line\"></span><br><span class=\"line\">```git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、git基本操作\"><a href=\"#2、git基本操作\" class=\"headerlink\" title=\"2、git基本操作\"></a>2、git基本操作</h4><p>查看仓库状态</p>\n<p><code>git status</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰git教程</a></p>\n<p>精通Git（第2版）</p>\n<p><img src=\"C:%5CUsers%5Cwvdon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567175758887.png\" alt=\"1567175758887\"></p>\n"},{"title":"Hexo:使用记录","date":"2019-09-27T15:42:57.000Z","description":"生产力工具","_content":"\n> 快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。\n\n文件头\n\n> ```\n> ---\n> title: '题目'\n> date: 2019-08-02 15:50:39\n> tags: \n>   - 1\n>   - 2\n>   - 3\n> categories: [分类]\n> mathjax: true\n> description: 描述\n> ---\n> ```\n>\n> \n\n备忘：\n\n> hexo s 部署到本地\n>\n> hexo g 生成静态文件\n>\n> hexo d 部署到github上","source":"_posts/Hexo的使用笔记.md","raw":"---\ntitle: 'Hexo:使用记录'\ndate: 2019-09-27 23:42:57\ntags: [hexo]\ncategories: tools\ndescription: 生产力工具\n---\n\n> 快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。\n\n文件头\n\n> ```\n> ---\n> title: '题目'\n> date: 2019-08-02 15:50:39\n> tags: \n>   - 1\n>   - 2\n>   - 3\n> categories: [分类]\n> mathjax: true\n> description: 描述\n> ---\n> ```\n>\n> \n\n备忘：\n\n> hexo s 部署到本地\n>\n> hexo g 生成静态文件\n>\n> hexo d 部署到github上","slug":"Hexo的使用笔记","published":1,"updated":"2020-03-22T11:13:25.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5ma0007rwv0o5va8x5n","content":"<blockquote>\n<p>快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。</p>\n</blockquote><p>文件头</p><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ---</span><br><span class=\"line\">&gt; title: &apos;题目&apos;</span><br><span class=\"line\">&gt; date: 2019-08-02 15:50:39</span><br><span class=\"line\">&gt; tags: </span><br><span class=\"line\">&gt;   - 1</span><br><span class=\"line\">&gt;   - 2</span><br><span class=\"line\">&gt;   - 3</span><br><span class=\"line\">&gt; categories: [分类]</span><br><span class=\"line\">&gt; mathjax: true</span><br><span class=\"line\">&gt; description: 描述</span><br><span class=\"line\">&gt; ---</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote><a id=\"more\"></a>\n\n\n<blockquote>\n</blockquote>\n<p>备忘：</p>\n<blockquote>\n<p>hexo s 部署到本地</p>\n<p>hexo g 生成静态文件</p>\n<p>hexo d 部署到github上</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。</p>\n</blockquote><p>文件头</p><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ---</span><br><span class=\"line\">&gt; title: &apos;题目&apos;</span><br><span class=\"line\">&gt; date: 2019-08-02 15:50:39</span><br><span class=\"line\">&gt; tags: </span><br><span class=\"line\">&gt;   - 1</span><br><span class=\"line\">&gt;   - 2</span><br><span class=\"line\">&gt;   - 3</span><br><span class=\"line\">&gt; categories: [分类]</span><br><span class=\"line\">&gt; mathjax: true</span><br><span class=\"line\">&gt; description: 描述</span><br><span class=\"line\">&gt; ---</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>","more":"\n\n\n<blockquote>\n</blockquote>\n<p>备忘：</p>\n<blockquote>\n<p>hexo s 部署到本地</p>\n<p>hexo g 生成静态文件</p>\n<p>hexo d 部署到github上</p>\n</blockquote>\n"},{"title":"LaTex:排版系统","date":"2019-07-18T16:11:41.000Z","mathjax":true,"_content":"\n最后更新时间:2019.10.24\n\n### 前言：\n\nLaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。\n目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。\n\n> 1. 有些站点不支持LaTex语法的我们可以借助[在线 LaTeX 编辑器](https://www.codecogs.com/latex/eqneditor.php) 进行转换，然后复制为html代码插入进去\n> 2. hexo的许多主题都是支持LaTex的，只需在文章头文字部分设置 mathjax: true\n\n### LaTex常用语法：\n\n\\$\\$\nLaTex公式\n\\$$\n\n#### 分数表示\n\n> \\frac{1}{2} 代表分数 \n> $$\n> \\frac{1}{2}\n> $$\n> \n\n#### 上下标\n\n> _{}下标  ^{} 上标\n>\n> C\\_{n}^{m}代表 \n> $$\n> C_{n}^{m}\n> $$\n> \n\n求和压缩符合\n\n> \\sum_{i=0}^{n}{(x_i+y_i)}\n>\n> \\prod_{i=0}^{n}{x_i\\cdot{y_i}}_\n>\n> \\lim_{x\\to0}\\frac{sinx}{x}_\n>\n> \\int_{a}^{b}{sinx}dx\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" title=\"\\sum{i=0}^{n}{(x_i+y_i)}\\\" /></a>\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" title=\"\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" /></a>\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\lim{x\\to0}\\frac{sinx}{x}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\lim{x\\to0}\\frac{sinx}{x}\" title=\"\\lim{x\\to0}\\frac{sinx}{x}\" /></a>\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\int_{a}^{b}{sinx}dx\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\int_{a}^{b}{sinx}dx\" title=\"\\int_{a}^{b}{sinx}dx\" /></a>\n\n根号 \n\n>  \\sqrt[x]{y}\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sqrt[x]{y}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sqrt[x]{y}\" title=\"\\sqrt[x]{y}\" /></a>\n\n## 参考\n\n[参考](https://www.cnblogs.com/endlesscoding/p/9797237.html)","source":"_posts/LaTex-排版系统.md","raw":"---\ntitle: 'LaTex:排版系统'\ndate: 2019-07-19 00:11:41\ntags:\n  - LaTex\ncategories: tools\nmathjax: true\n---\n\n最后更新时间:2019.10.24\n\n### 前言：\n\nLaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。\n目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。\n\n> 1. 有些站点不支持LaTex语法的我们可以借助[在线 LaTeX 编辑器](https://www.codecogs.com/latex/eqneditor.php) 进行转换，然后复制为html代码插入进去\n> 2. hexo的许多主题都是支持LaTex的，只需在文章头文字部分设置 mathjax: true\n\n### LaTex常用语法：\n\n\\$\\$\nLaTex公式\n\\$$\n\n#### 分数表示\n\n> \\frac{1}{2} 代表分数 \n> $$\n> \\frac{1}{2}\n> $$\n> \n\n#### 上下标\n\n> _{}下标  ^{} 上标\n>\n> C\\_{n}^{m}代表 \n> $$\n> C_{n}^{m}\n> $$\n> \n\n求和压缩符合\n\n> \\sum_{i=0}^{n}{(x_i+y_i)}\n>\n> \\prod_{i=0}^{n}{x_i\\cdot{y_i}}_\n>\n> \\lim_{x\\to0}\\frac{sinx}{x}_\n>\n> \\int_{a}^{b}{sinx}dx\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" title=\"\\sum{i=0}^{n}{(x_i+y_i)}\\\" /></a>\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" title=\"\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" /></a>\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\lim{x\\to0}\\frac{sinx}{x}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\lim{x\\to0}\\frac{sinx}{x}\" title=\"\\lim{x\\to0}\\frac{sinx}{x}\" /></a>\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\int_{a}^{b}{sinx}dx\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\int_{a}^{b}{sinx}dx\" title=\"\\int_{a}^{b}{sinx}dx\" /></a>\n\n根号 \n\n>  \\sqrt[x]{y}\n>\n> <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sqrt[x]{y}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sqrt[x]{y}\" title=\"\\sqrt[x]{y}\" /></a>\n\n## 参考\n\n[参考](https://www.cnblogs.com/endlesscoding/p/9797237.html)","slug":"LaTex-排版系统","published":1,"updated":"2020-03-22T11:18:27.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5mc0009rwv0pglweknv","content":"<p>最后更新时间:2019.10.24</p><h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>LaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。<br>目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。</p><a id=\"more\"></a>\n\n<blockquote>\n<ol>\n<li>有些站点不支持LaTex语法的我们可以借助<a href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\" rel=\"noopener\">在线 LaTeX 编辑器</a> 进行转换，然后复制为html代码插入进去</li>\n<li>hexo的许多主题都是支持LaTex的，只需在文章头文字部分设置 mathjax: true</li>\n</ol>\n</blockquote>\n<h3 id=\"LaTex常用语法：\"><a href=\"#LaTex常用语法：\" class=\"headerlink\" title=\"LaTex常用语法：\"></a>LaTex常用语法：</h3><p>$$<br>LaTex公式<br>$$</p>\n<h4 id=\"分数表示\"><a href=\"#分数表示\" class=\"headerlink\" title=\"分数表示\"></a>分数表示</h4><blockquote>\n<p>\\frac{1}{2} 代表分数<br>$$<br>\\frac{1}{2}<br>$$</p>\n</blockquote>\n<h4 id=\"上下标\"><a href=\"#上下标\" class=\"headerlink\" title=\"上下标\"></a>上下标</h4><blockquote>\n<p>_{}下标  ^{} 上标</p>\n<p>C_{n}^{m}代表<br>$$<br>C_{n}^{m}<br>$$</p>\n</blockquote>\n<p>求和压缩符合</p>\n<blockquote>\n<p>\\sum_{i=0}^{n}{(x_i+y_i)}</p>\n<p>\\prod_{i=0}^{n}{x_i\\cdot{y_i}}_</p>\n<p>\\lim_{x\\to0}\\frac{sinx}{x}_</p>\n<p>\\int_{a}^{b}{sinx}dx</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" title=\"\\sum{i=0}^{n}{(x_i+y_i)}\\\"></a></p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" title=\"\\prod{i=0}^{n}{x_i\\cdot{y_i}}\"></a></p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\lim{x\\to0}\\frac{sinx}{x}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\lim{x\\to0}\\frac{sinx}{x}\" title=\"\\lim{x\\to0}\\frac{sinx}{x}\"></a></p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\int_{a}^{b}{sinx}dx\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\int_{a}^{b}{sinx}dx\" title=\"\\int_{a}^{b}{sinx}dx\"></a></p>\n</blockquote>\n<p>根号 </p>\n<blockquote>\n<p> \\sqrt[x]{y}</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sqrt[x]{y}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sqrt[x]{y}\" title=\"\\sqrt[x]{y}\"></a></p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/endlesscoding/p/9797237.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n","site":{"data":{}},"excerpt":"<p>最后更新时间:2019.10.24</p><h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>LaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。<br>目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。</p>","more":"\n\n<blockquote>\n<ol>\n<li>有些站点不支持LaTex语法的我们可以借助<a href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\" rel=\"noopener\">在线 LaTeX 编辑器</a> 进行转换，然后复制为html代码插入进去</li>\n<li>hexo的许多主题都是支持LaTex的，只需在文章头文字部分设置 mathjax: true</li>\n</ol>\n</blockquote>\n<h3 id=\"LaTex常用语法：\"><a href=\"#LaTex常用语法：\" class=\"headerlink\" title=\"LaTex常用语法：\"></a>LaTex常用语法：</h3><p>$$<br>LaTex公式<br>$$</p>\n<h4 id=\"分数表示\"><a href=\"#分数表示\" class=\"headerlink\" title=\"分数表示\"></a>分数表示</h4><blockquote>\n<p>\\frac{1}{2} 代表分数<br>$$<br>\\frac{1}{2}<br>$$</p>\n</blockquote>\n<h4 id=\"上下标\"><a href=\"#上下标\" class=\"headerlink\" title=\"上下标\"></a>上下标</h4><blockquote>\n<p>_{}下标  ^{} 上标</p>\n<p>C_{n}^{m}代表<br>$$<br>C_{n}^{m}<br>$$</p>\n</blockquote>\n<p>求和压缩符合</p>\n<blockquote>\n<p>\\sum_{i=0}^{n}{(x_i+y_i)}</p>\n<p>\\prod_{i=0}^{n}{x_i\\cdot{y_i}}_</p>\n<p>\\lim_{x\\to0}\\frac{sinx}{x}_</p>\n<p>\\int_{a}^{b}{sinx}dx</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sum{i=0}^{n}{(x_i&plus;y_i)}\\\" title=\"\\sum{i=0}^{n}{(x_i+y_i)}\\\"></a></p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\prod{i=0}^{n}{x_i\\cdot{y_i}}\" title=\"\\prod{i=0}^{n}{x_i\\cdot{y_i}}\"></a></p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\lim{x\\to0}\\frac{sinx}{x}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\lim{x\\to0}\\frac{sinx}{x}\" title=\"\\lim{x\\to0}\\frac{sinx}{x}\"></a></p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\int_{a}^{b}{sinx}dx\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\int_{a}^{b}{sinx}dx\" title=\"\\int_{a}^{b}{sinx}dx\"></a></p>\n</blockquote>\n<p>根号 </p>\n<blockquote>\n<p> \\sqrt[x]{y}</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=\\sqrt[x]{y}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\sqrt[x]{y}\" title=\"\\sqrt[x]{y}\"></a></p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/endlesscoding/p/9797237.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n"},{"title":"MarkDown语法","date":"2019-10-27T15:42:57.000Z","description":"生产力工具","_content":"\n\n\n# MarkDown快速入门\n\n**Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。**\n\n> 推荐使用[Typora](https://typora.io/)进行编辑\n\n插入目录：\\[Toc] 自动生成目录\n\n[TOC]\n\n## 标题:\n\nH1-H6\n\n\\# 标题1\n\\## 标题2\n\\### 标题3\n\n# 斜体与加粗\n\n### 斜体\n\n\\*文本* 或者 \\_文本_\n\n_文本_\n\n### 加粗\n\n\\**文本**\n\n**文本**\n\n## 插入图片与链接\n\n### 插入链接\n\n\\[链接文本标题](链接地址)\n\n[链接文本标题]()\n\n### 插入图片\n\n\\![](图片链接)\n\n## 代码语法高亮\n\n### 整体代码\n\n\\```python\n\nprint(“hello MachineLearning-Question”)\n\n\\```\n\n```python\nprint(“hello MachineLearning-Question”)\n```\n\n### 部分代码\n\n\\`bash run.py`\n\n`bash run.py`\n\n## 列表\n\n### 无序列表\n\n可以使用 * 或者 + -，注意之间的空格\n\n\\- list1\n\n​\t- list1.1\n\n\\- list2\n\n​\t- list1.2\n\n- list1\n  - list1.1\n- list2\n  - list1.2\n\n### 有序列表\n\n1\\.list1(我这里在 . 之前使用了\\防止转变)\n\n2\\.list2\n\n1. list1\n\n2. list2\n\n## 其他\n\n### 分割线\n\n\\---  或者 \\*\\****\n\n---\n\n### 高亮\n\n\\==高亮文本==\n\n==高亮文本==\n\n### 删除\n\n~~删除~~\n\n```shell\n~~删除~~\n```\n\n\n\n### 引言\n\n\\> 一级引言\n\n> 一级引言\n\n\\>> 二级引言\n\n> > 二级引言\n\n### 更多排版规范可以参考[Markdown中文文档](https://markdown-zh.readthedocs.io/en/latest/)\n\n","source":"_posts/MarkDown快速入门.md","raw":"---\ntitle: 'MarkDown语法'\ndate: 2019-10-27 23:42:57\ntags: [markdown]\ncategories: tools\ndescription: 生产力工具\n---\n\n\n\n# MarkDown快速入门\n\n**Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。**\n\n> 推荐使用[Typora](https://typora.io/)进行编辑\n\n插入目录：\\[Toc] 自动生成目录\n\n[TOC]\n\n## 标题:\n\nH1-H6\n\n\\# 标题1\n\\## 标题2\n\\### 标题3\n\n# 斜体与加粗\n\n### 斜体\n\n\\*文本* 或者 \\_文本_\n\n_文本_\n\n### 加粗\n\n\\**文本**\n\n**文本**\n\n## 插入图片与链接\n\n### 插入链接\n\n\\[链接文本标题](链接地址)\n\n[链接文本标题]()\n\n### 插入图片\n\n\\![](图片链接)\n\n## 代码语法高亮\n\n### 整体代码\n\n\\```python\n\nprint(“hello MachineLearning-Question”)\n\n\\```\n\n```python\nprint(“hello MachineLearning-Question”)\n```\n\n### 部分代码\n\n\\`bash run.py`\n\n`bash run.py`\n\n## 列表\n\n### 无序列表\n\n可以使用 * 或者 + -，注意之间的空格\n\n\\- list1\n\n​\t- list1.1\n\n\\- list2\n\n​\t- list1.2\n\n- list1\n  - list1.1\n- list2\n  - list1.2\n\n### 有序列表\n\n1\\.list1(我这里在 . 之前使用了\\防止转变)\n\n2\\.list2\n\n1. list1\n\n2. list2\n\n## 其他\n\n### 分割线\n\n\\---  或者 \\*\\****\n\n---\n\n### 高亮\n\n\\==高亮文本==\n\n==高亮文本==\n\n### 删除\n\n~~删除~~\n\n```shell\n~~删除~~\n```\n\n\n\n### 引言\n\n\\> 一级引言\n\n> 一级引言\n\n\\>> 二级引言\n\n> > 二级引言\n\n### 更多排版规范可以参考[Markdown中文文档](https://markdown-zh.readthedocs.io/en/latest/)\n\n","slug":"MarkDown快速入门","published":1,"updated":"2020-03-22T11:18:27.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5mx000brwv0qw8mmec4","content":"<h1 id=\"MarkDown快速入门\"><a href=\"#MarkDown快速入门\" class=\"headerlink\" title=\"MarkDown快速入门\"></a>MarkDown快速入门</h1><p><strong>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</strong></p><blockquote>\n<p>推荐使用<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>进行编辑</p>\n</blockquote><p>插入目录：[Toc] 自动生成目录</p><a id=\"more\"></a>\n\n\n<p>[TOC]</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题:\"></a>标题:</h2><p>H1-H6</p>\n<p># 标题1<br>## 标题2<br>### 标题3</p>\n<h1 id=\"斜体与加粗\"><a href=\"#斜体与加粗\" class=\"headerlink\" title=\"斜体与加粗\"></a>斜体与加粗</h1><h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>*文本* 或者 _文本_</p>\n<p><em>文本</em></p>\n<h3 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h3><p>*<em>文本*</em></p>\n<p><strong>文本</strong></p>\n<h2 id=\"插入图片与链接\"><a href=\"#插入图片与链接\" class=\"headerlink\" title=\"插入图片与链接\"></a>插入图片与链接</h2><h3 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h3><p>[链接文本标题](链接地址)</p>\n<p><a href>链接文本标题</a></p>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>!<a href=\"图片链接\"></a></p>\n<h2 id=\"代码语法高亮\"><a href=\"#代码语法高亮\" class=\"headerlink\" title=\"代码语法高亮\"></a>代码语法高亮</h2><h3 id=\"整体代码\"><a href=\"#整体代码\" class=\"headerlink\" title=\"整体代码\"></a>整体代码</h3><p>&lt;!–￼0–&gt;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(“hello MachineLearning-Question”)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部分代码\"><a href=\"#部分代码\" class=\"headerlink\" title=\"部分代码\"></a>部分代码</h3><p>`bash run.py`</p>\n<p><code>bash run.py</code></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>可以使用 * 或者 + -，注意之间的空格</p>\n<p>- list1</p>\n<p>​    - list1.1</p>\n<p>- list2</p>\n<p>​    - list1.2</p>\n<ul>\n<li>list1<ul>\n<li>list1.1</li>\n</ul>\n</li>\n<li>list2<ul>\n<li>list1.2</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>1.list1(我这里在 . 之前使用了\\防止转变)</p>\n<p>2.list2</p>\n<ol>\n<li><p>list1</p>\n</li>\n<li><p>list2</p>\n</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>-–  或者 *****</p>\n<hr>\n<h3 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h3><p>==高亮文本==</p>\n<p>==高亮文本==</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p><del>删除</del></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除~~</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>&gt; 一级引言</p>\n<blockquote>\n<p>一级引言</p>\n</blockquote>\n<p>&gt;&gt; 二级引言</p>\n<blockquote>\n<blockquote>\n<p>二级引言</p>\n</blockquote>\n</blockquote>\n<h3 id=\"更多排版规范可以参考Markdown中文文档\"><a href=\"#更多排版规范可以参考Markdown中文文档\" class=\"headerlink\" title=\"更多排版规范可以参考Markdown中文文档\"></a>更多排版规范可以参考<a href=\"https://markdown-zh.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">Markdown中文文档</a></h3>","site":{"data":{}},"excerpt":"<h1 id=\"MarkDown快速入门\"><a href=\"#MarkDown快速入门\" class=\"headerlink\" title=\"MarkDown快速入门\"></a>MarkDown快速入门</h1><p><strong>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</strong></p><blockquote>\n<p>推荐使用<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>进行编辑</p>\n</blockquote><p>插入目录：[Toc] 自动生成目录</p>","more":"\n\n\n<p>[TOC]</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题:\"></a>标题:</h2><p>H1-H6</p>\n<p># 标题1<br>## 标题2<br>### 标题3</p>\n<h1 id=\"斜体与加粗\"><a href=\"#斜体与加粗\" class=\"headerlink\" title=\"斜体与加粗\"></a>斜体与加粗</h1><h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>*文本* 或者 _文本_</p>\n<p><em>文本</em></p>\n<h3 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h3><p>*<em>文本*</em></p>\n<p><strong>文本</strong></p>\n<h2 id=\"插入图片与链接\"><a href=\"#插入图片与链接\" class=\"headerlink\" title=\"插入图片与链接\"></a>插入图片与链接</h2><h3 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h3><p>[链接文本标题](链接地址)</p>\n<p><a href>链接文本标题</a></p>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>!<a href=\"图片链接\"></a></p>\n<h2 id=\"代码语法高亮\"><a href=\"#代码语法高亮\" class=\"headerlink\" title=\"代码语法高亮\"></a>代码语法高亮</h2><h3 id=\"整体代码\"><a href=\"#整体代码\" class=\"headerlink\" title=\"整体代码\"></a>整体代码</h3><p>&lt;!–￼0–&gt;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(“hello MachineLearning-Question”)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部分代码\"><a href=\"#部分代码\" class=\"headerlink\" title=\"部分代码\"></a>部分代码</h3><p>`bash run.py`</p>\n<p><code>bash run.py</code></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>可以使用 * 或者 + -，注意之间的空格</p>\n<p>- list1</p>\n<p>​    - list1.1</p>\n<p>- list2</p>\n<p>​    - list1.2</p>\n<ul>\n<li>list1<ul>\n<li>list1.1</li>\n</ul>\n</li>\n<li>list2<ul>\n<li>list1.2</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>1.list1(我这里在 . 之前使用了\\防止转变)</p>\n<p>2.list2</p>\n<ol>\n<li><p>list1</p>\n</li>\n<li><p>list2</p>\n</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>-–  或者 *****</p>\n<hr>\n<h3 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h3><p>==高亮文本==</p>\n<p>==高亮文本==</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p><del>删除</del></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除~~</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>&gt; 一级引言</p>\n<blockquote>\n<p>一级引言</p>\n</blockquote>\n<p>&gt;&gt; 二级引言</p>\n<blockquote>\n<blockquote>\n<p>二级引言</p>\n</blockquote>\n</blockquote>\n<h3 id=\"更多排版规范可以参考Markdown中文文档\"><a href=\"#更多排版规范可以参考Markdown中文文档\" class=\"headerlink\" title=\"更多排版规范可以参考Markdown中文文档\"></a>更多排版规范可以参考<a href=\"https://markdown-zh.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">Markdown中文文档</a></h3>"},{"title":"Photoshop 记录","date":"2019-09-27T07:50:39.000Z","mathjax":true,"description":"生产力工具","_content":"\n#### 快捷键记录\n\n- 抓手工具 可以使用 space+鼠标快速操作\n- ctrl+o 快速打开文件\n- ctrl+w 关闭文件\n- 文件–置入嵌入对象 是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层\n- ctrl+n 新建\n- ctrl+Shift+alt +t 重复自由变换","source":"_posts/Photoshop 记录.md","raw":"---\ntitle: 'Photoshop 记录'\ndate: 2019-09-27 15:50:39\ntags: \n  - ps\ncategories: [tools]\nmathjax: true\ndescription: 生产力工具\n---\n\n#### 快捷键记录\n\n- 抓手工具 可以使用 space+鼠标快速操作\n- ctrl+o 快速打开文件\n- ctrl+w 关闭文件\n- 文件–置入嵌入对象 是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层\n- ctrl+n 新建\n- ctrl+Shift+alt +t 重复自由变换","slug":"Photoshop 记录","published":1,"updated":"2020-03-22T11:13:25.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5n7000frwv082st05pn","content":"<h4 id=\"快捷键记录\"><a href=\"#快捷键记录\" class=\"headerlink\" title=\"快捷键记录\"></a>快捷键记录</h4><ul>\n<li>抓手工具 可以使用 space+鼠标快速操作</li>\n<li>ctrl+o 快速打开文件</li>\n<li>ctrl+w 关闭文件</li>\n<li>文件–置入嵌入对象 是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层</li>\n<li>ctrl+n 新建</li>\n<li>ctrl+Shift+alt +t 重复自由变换</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"快捷键记录\"><a href=\"#快捷键记录\" class=\"headerlink\" title=\"快捷键记录\"></a>快捷键记录</h4><ul>\n<li>抓手工具 可以使用 space+鼠标快速操作</li>\n<li>ctrl+o 快速打开文件</li>\n<li>ctrl+w 关闭文件</li>\n<li>文件–置入嵌入对象 是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层</li>\n<li>ctrl+n 新建</li>\n<li>ctrl+Shift+alt +t 重复自由变换</li>\n</ul>\n"},{"title":"《浪潮之巅》计算机行业的发展规律","date":"2019-04-01T15:34:19.000Z","_content":"\n### 摩尔定律\n\n---\n\n> 英特尔公司创始人戈登·摩尔 在1956年提出 ，<strong>至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月</strong>。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展\n\n通常我们可以看到，一般新的处理器发布一年半之后，价格会开始大幅下调；\n\n​       摩尔定律主导着IT行业的发展。首先，为了不断提升芯片的性能，IT公司必须在比较短的时间内完成下一代产品的开发。因此这就要求这些公司必须要投入大量的资金进行研发，这使得每个产品的市场不会有太多的竞争者\n\n> 这也是这么多年来国内无法生产与国外性能和技术相同的处理器的原因\n\n### 安迪-比尔定律\n\n---\n\n>  摩尔定律给我们带来了一个希望，即是如果我今天认为计算机太贵买不起，我可以等到18个月之后就可以用一般的价钱买到相同配置的计算机。如果大家都等到几个月之后再买电脑的话，电脑的销量就会降低很多，开发人员也没有动力去更新计算机了\n\n然而事实上是个人电脑的销售一直在持续增长。\n\n<strong>安迪-比尔定律：比尔要拿走安迪所给的（What Andy gives,Bill takes away).</strong>\n\n<blockquote>\n  安迪：原英特尔CEO安迪·格鲁夫。\n  比尔：微软公司创始人比尔·盖茨\n</blockquote>\n\n​    在过去的几十年里，英特尔的处理器速度每18个月翻一番，计算机的内存和硬盘容量则以更快的速度发展，但是，微软的操作系统和应用软件越来越慢，也越做越大。所以现在的计算机比着10年前快了上百倍，但是软件的运行速度感觉上和之前的差不多。即使是同样功能的软件，今天的比着昨天的占用硬件资源多就在所难免了。\n\n​    相应的产生了一条生态链：以微软为首的软件开发商吃掉硬件提升带来的全部好处，迫使用户更新计算机，让惠普，戴尔，联想这些公司收益，而这些公司再向英特尔，希捷，三星，金士顿等厂家订购芯片，内存和硬盘等硬件。然后各个公司分别获利，按照摩尔定律预定的速度发展，提升硬件的性能，为微软的下一步更新软件，吃掉硬件性能做准备。\n\n就这样，安迪-比尔定律把原本属于耐用消费品的电脑，手机等商品变成了消耗性商品，刺激着整个IT行业的发展。\n\n### 反摩尔定律\n\n---\n\n​     Googel前CEO埃里克·施密特指出：***一个IT公司如果今天和18个月之前卖掉同样的产品，他的营业额就要降低一半。对于IT公司反摩尔定律是非常可怕的，因为一个公司付出了相同的劳动，却只得到之前一半的收入，***\n\n<blockquote>\n  反摩尔定律逼着所有的硬件设备公司必须要赶得上摩尔定律规定的更新速度。\n\n  反摩尔定律使得IT企业不可能像石油工业或飞机制造业那样只追求量变，而必须要不断的寻找革命性的创造发明。\n\n  反摩尔定律同时使得新兴的小公司有可能在发展新技术方面和大公司处在同一个起跑线上。\n</blockquote>\n\n### 总结\n<blockquote>\n  苹果公司是一个例外，它是通过硬件实现软件的价值，因此在过去的10多年他的产品成为了一种时尚和潮流。\n  由于安迪-比尔定律的作用，在IT工业的产业链中，处于上游的是“看不见摸不着”的软件和IT服务业，而下是”看得见摸得着“的硬件和半导体。从事IT业，想要获得高额利润，就得从上游入手，从微软，Google,facebook，无一不是。\n</blockquote>","source":"_posts/the-top-of-wave.md","raw":"---\ntitle: 《浪潮之巅》计算机行业的发展规律\ndate: 2019-04-01 23:34:19\ntags: \n  - 摩尔定律\n  - 安迪比尔定律\n  - 反摩尔定律\ncategories: [读书笔记]\n---\n\n### 摩尔定律\n\n---\n\n> 英特尔公司创始人戈登·摩尔 在1956年提出 ，<strong>至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月</strong>。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展\n\n通常我们可以看到，一般新的处理器发布一年半之后，价格会开始大幅下调；\n\n​       摩尔定律主导着IT行业的发展。首先，为了不断提升芯片的性能，IT公司必须在比较短的时间内完成下一代产品的开发。因此这就要求这些公司必须要投入大量的资金进行研发，这使得每个产品的市场不会有太多的竞争者\n\n> 这也是这么多年来国内无法生产与国外性能和技术相同的处理器的原因\n\n### 安迪-比尔定律\n\n---\n\n>  摩尔定律给我们带来了一个希望，即是如果我今天认为计算机太贵买不起，我可以等到18个月之后就可以用一般的价钱买到相同配置的计算机。如果大家都等到几个月之后再买电脑的话，电脑的销量就会降低很多，开发人员也没有动力去更新计算机了\n\n然而事实上是个人电脑的销售一直在持续增长。\n\n<strong>安迪-比尔定律：比尔要拿走安迪所给的（What Andy gives,Bill takes away).</strong>\n\n<blockquote>\n  安迪：原英特尔CEO安迪·格鲁夫。\n  比尔：微软公司创始人比尔·盖茨\n</blockquote>\n\n​    在过去的几十年里，英特尔的处理器速度每18个月翻一番，计算机的内存和硬盘容量则以更快的速度发展，但是，微软的操作系统和应用软件越来越慢，也越做越大。所以现在的计算机比着10年前快了上百倍，但是软件的运行速度感觉上和之前的差不多。即使是同样功能的软件，今天的比着昨天的占用硬件资源多就在所难免了。\n\n​    相应的产生了一条生态链：以微软为首的软件开发商吃掉硬件提升带来的全部好处，迫使用户更新计算机，让惠普，戴尔，联想这些公司收益，而这些公司再向英特尔，希捷，三星，金士顿等厂家订购芯片，内存和硬盘等硬件。然后各个公司分别获利，按照摩尔定律预定的速度发展，提升硬件的性能，为微软的下一步更新软件，吃掉硬件性能做准备。\n\n就这样，安迪-比尔定律把原本属于耐用消费品的电脑，手机等商品变成了消耗性商品，刺激着整个IT行业的发展。\n\n### 反摩尔定律\n\n---\n\n​     Googel前CEO埃里克·施密特指出：***一个IT公司如果今天和18个月之前卖掉同样的产品，他的营业额就要降低一半。对于IT公司反摩尔定律是非常可怕的，因为一个公司付出了相同的劳动，却只得到之前一半的收入，***\n\n<blockquote>\n  反摩尔定律逼着所有的硬件设备公司必须要赶得上摩尔定律规定的更新速度。\n\n  反摩尔定律使得IT企业不可能像石油工业或飞机制造业那样只追求量变，而必须要不断的寻找革命性的创造发明。\n\n  反摩尔定律同时使得新兴的小公司有可能在发展新技术方面和大公司处在同一个起跑线上。\n</blockquote>\n\n### 总结\n<blockquote>\n  苹果公司是一个例外，它是通过硬件实现软件的价值，因此在过去的10多年他的产品成为了一种时尚和潮流。\n  由于安迪-比尔定律的作用，在IT工业的产业链中，处于上游的是“看不见摸不着”的软件和IT服务业，而下是”看得见摸得着“的硬件和半导体。从事IT业，想要获得高额利润，就得从上游入手，从微软，Google,facebook，无一不是。\n</blockquote>","slug":"the-top-of-wave","published":1,"updated":"2020-03-22T11:13:25.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5n9000grwv0nl8up7zx","content":"<h3 id=\"摩尔定律\"><a href=\"#摩尔定律\" class=\"headerlink\" title=\"摩尔定律\"></a>摩尔定律</h3><hr><blockquote>\n<p>英特尔公司创始人戈登·摩尔 在1956年提出 ，<strong>至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月</strong>。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展</p>\n</blockquote><a id=\"more\"></a>\n\n<p>通常我们可以看到，一般新的处理器发布一年半之后，价格会开始大幅下调；</p>\n<p>​       摩尔定律主导着IT行业的发展。首先，为了不断提升芯片的性能，IT公司必须在比较短的时间内完成下一代产品的开发。因此这就要求这些公司必须要投入大量的资金进行研发，这使得每个产品的市场不会有太多的竞争者</p>\n<blockquote>\n<p>这也是这么多年来国内无法生产与国外性能和技术相同的处理器的原因</p>\n</blockquote>\n<h3 id=\"安迪-比尔定律\"><a href=\"#安迪-比尔定律\" class=\"headerlink\" title=\"安迪-比尔定律\"></a>安迪-比尔定律</h3><hr>\n<blockquote>\n<p> 摩尔定律给我们带来了一个希望，即是如果我今天认为计算机太贵买不起，我可以等到18个月之后就可以用一般的价钱买到相同配置的计算机。如果大家都等到几个月之后再买电脑的话，电脑的销量就会降低很多，开发人员也没有动力去更新计算机了</p>\n</blockquote>\n<p>然而事实上是个人电脑的销售一直在持续增长。</p>\n<p><strong>安迪-比尔定律：比尔要拿走安迪所给的（What Andy gives,Bill takes away).</strong></p>\n<blockquote>\n  安迪：原英特尔CEO安迪·格鲁夫。\n  比尔：微软公司创始人比尔·盖茨\n</blockquote>\n\n<p>​    在过去的几十年里，英特尔的处理器速度每18个月翻一番，计算机的内存和硬盘容量则以更快的速度发展，但是，微软的操作系统和应用软件越来越慢，也越做越大。所以现在的计算机比着10年前快了上百倍，但是软件的运行速度感觉上和之前的差不多。即使是同样功能的软件，今天的比着昨天的占用硬件资源多就在所难免了。</p>\n<p>​    相应的产生了一条生态链：以微软为首的软件开发商吃掉硬件提升带来的全部好处，迫使用户更新计算机，让惠普，戴尔，联想这些公司收益，而这些公司再向英特尔，希捷，三星，金士顿等厂家订购芯片，内存和硬盘等硬件。然后各个公司分别获利，按照摩尔定律预定的速度发展，提升硬件的性能，为微软的下一步更新软件，吃掉硬件性能做准备。</p>\n<p>就这样，安迪-比尔定律把原本属于耐用消费品的电脑，手机等商品变成了消耗性商品，刺激着整个IT行业的发展。</p>\n<h3 id=\"反摩尔定律\"><a href=\"#反摩尔定律\" class=\"headerlink\" title=\"反摩尔定律\"></a>反摩尔定律</h3><hr>\n<p>​     Googel前CEO埃里克·施密特指出：<strong><em>一个IT公司如果今天和18个月之前卖掉同样的产品，他的营业额就要降低一半。对于IT公司反摩尔定律是非常可怕的，因为一个公司付出了相同的劳动，却只得到之前一半的收入，</em></strong></p>\n<blockquote>\n  反摩尔定律逼着所有的硬件设备公司必须要赶得上摩尔定律规定的更新速度。\n\n<p>  反摩尔定律使得IT企业不可能像石油工业或飞机制造业那样只追求量变，而必须要不断的寻找革命性的创造发明。</p>\n<p>  反摩尔定律同时使得新兴的小公司有可能在发展新技术方面和大公司处在同一个起跑线上。</p>\n</blockquote>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n  苹果公司是一个例外，它是通过硬件实现软件的价值，因此在过去的10多年他的产品成为了一种时尚和潮流。\n  由于安迪-比尔定律的作用，在IT工业的产业链中，处于上游的是“看不见摸不着”的软件和IT服务业，而下是”看得见摸得着“的硬件和半导体。从事IT业，想要获得高额利润，就得从上游入手，从微软，Google,facebook，无一不是。\n</blockquote>","site":{"data":{}},"excerpt":"<h3 id=\"摩尔定律\"><a href=\"#摩尔定律\" class=\"headerlink\" title=\"摩尔定律\"></a>摩尔定律</h3><hr><blockquote>\n<p>英特尔公司创始人戈登·摩尔 在1956年提出 ，<strong>至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月</strong>。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展</p>\n</blockquote>","more":"\n\n<p>通常我们可以看到，一般新的处理器发布一年半之后，价格会开始大幅下调；</p>\n<p>​       摩尔定律主导着IT行业的发展。首先，为了不断提升芯片的性能，IT公司必须在比较短的时间内完成下一代产品的开发。因此这就要求这些公司必须要投入大量的资金进行研发，这使得每个产品的市场不会有太多的竞争者</p>\n<blockquote>\n<p>这也是这么多年来国内无法生产与国外性能和技术相同的处理器的原因</p>\n</blockquote>\n<h3 id=\"安迪-比尔定律\"><a href=\"#安迪-比尔定律\" class=\"headerlink\" title=\"安迪-比尔定律\"></a>安迪-比尔定律</h3><hr>\n<blockquote>\n<p> 摩尔定律给我们带来了一个希望，即是如果我今天认为计算机太贵买不起，我可以等到18个月之后就可以用一般的价钱买到相同配置的计算机。如果大家都等到几个月之后再买电脑的话，电脑的销量就会降低很多，开发人员也没有动力去更新计算机了</p>\n</blockquote>\n<p>然而事实上是个人电脑的销售一直在持续增长。</p>\n<p><strong>安迪-比尔定律：比尔要拿走安迪所给的（What Andy gives,Bill takes away).</strong></p>\n<blockquote>\n  安迪：原英特尔CEO安迪·格鲁夫。\n  比尔：微软公司创始人比尔·盖茨\n</blockquote>\n\n<p>​    在过去的几十年里，英特尔的处理器速度每18个月翻一番，计算机的内存和硬盘容量则以更快的速度发展，但是，微软的操作系统和应用软件越来越慢，也越做越大。所以现在的计算机比着10年前快了上百倍，但是软件的运行速度感觉上和之前的差不多。即使是同样功能的软件，今天的比着昨天的占用硬件资源多就在所难免了。</p>\n<p>​    相应的产生了一条生态链：以微软为首的软件开发商吃掉硬件提升带来的全部好处，迫使用户更新计算机，让惠普，戴尔，联想这些公司收益，而这些公司再向英特尔，希捷，三星，金士顿等厂家订购芯片，内存和硬盘等硬件。然后各个公司分别获利，按照摩尔定律预定的速度发展，提升硬件的性能，为微软的下一步更新软件，吃掉硬件性能做准备。</p>\n<p>就这样，安迪-比尔定律把原本属于耐用消费品的电脑，手机等商品变成了消耗性商品，刺激着整个IT行业的发展。</p>\n<h3 id=\"反摩尔定律\"><a href=\"#反摩尔定律\" class=\"headerlink\" title=\"反摩尔定律\"></a>反摩尔定律</h3><hr>\n<p>​     Googel前CEO埃里克·施密特指出：<strong><em>一个IT公司如果今天和18个月之前卖掉同样的产品，他的营业额就要降低一半。对于IT公司反摩尔定律是非常可怕的，因为一个公司付出了相同的劳动，却只得到之前一半的收入，</em></strong></p>\n<blockquote>\n  反摩尔定律逼着所有的硬件设备公司必须要赶得上摩尔定律规定的更新速度。\n\n<p>  反摩尔定律使得IT企业不可能像石油工业或飞机制造业那样只追求量变，而必须要不断的寻找革命性的创造发明。</p>\n<p>  反摩尔定律同时使得新兴的小公司有可能在发展新技术方面和大公司处在同一个起跑线上。</p>\n</blockquote>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n  苹果公司是一个例外，它是通过硬件实现软件的价值，因此在过去的10多年他的产品成为了一种时尚和潮流。\n  由于安迪-比尔定律的作用，在IT工业的产业链中，处于上游的是“看不见摸不着”的软件和IT服务业，而下是”看得见摸得着“的硬件和半导体。从事IT业，想要获得高额利润，就得从上游入手，从微软，Google,facebook，无一不是。\n</blockquote>"},{"title":"文本特征处理","date":"2020-02-27T07:50:39.000Z","mathjax":true,"_content":"\n# 文本特征提取\n\n[参考](https://www.cnblogs.com/ljhdo/p/10578047.html)\n\n机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据\n\n### One-Hot\n\nOne-Hot方法很简单，但是它的问题也很明显：\n\n- 没有考虑单词之间的相对位置，任意两个词之间都是孤立的；\n- 如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；\n\n**One-Hot表示的应用**\n\nsklearn使用词袋（Bag of Words）和TF-IDF模型来表示文本数据，这两个模型都是One-Hot表示的应用，其中，词袋模型对应的就是文档向量。\n\n### 词袋模型\n\n词袋模型（BoW）是用于文本表示的最简单的方法， BoW把文本转换为文档中单词出现次数的矩阵，该模型只关注文档中是否出现给定的单词和单词出现频率，而舍弃文本的结构、单词出现的顺序和位置。\n\n```python\nCountVectorizer(input=’content’, encoding=’utf-8’, decode_error=’strict’, strip_accents=None, \n                lowercase=True,    preprocessor=None, tokenizer=None, stop_words=None, \n                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, \n                max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, \n                dtype=<class ‘numpy.int64’>)\n```\n\n常用参数注释:\n\n- input：默认值是content，表示输入的是顺序的字符文本\n- decode_error：默认为strict，遇到不能解码的字符将报UnicodeDecodeError错误，设为ignore将会忽略解码错误\n- lowercase：默认值是True，在分词（Tokenize）之前把文本中的所有字符转换为小写。\n- preprocessor：预处理器，在分词之前对文本进行预处理，默认值是None\n- tokenizer：分词器，把文本字符串拆分成各个单词（token），默认值是None\n- analyzer：用于预处理和分词，可设置为string类型，如’word’, ‘char’, ‘char_wb’，默认值是word\n- stop_words：停用词表，如果值是english，使用内置的英语停用词列表；如果是一个列表，那么使用该列表作为停用词，设为None且max_df∈[0.7, 1.0)将自动根据当前的语料库建立停用词表\n- ngram_range：tuple（min_n，max_n），表示ngram模型的范围\n- max_df：可以设置为范围在[0.0 1.0]的浮点数，也可以设置为没有范围限制的整数，默认为1.0。这个参数的作用是作为一个阈值，当构造语料库的词汇表时，如果某个词的document frequence大于max_df，这个词不会被当作关键词。如果这个参数是float，则表示词出现的次数与语料库文档数的百分比，如果是int，则表示词出现的次数。如果参数中已经给定了vocabulary，则这个参数无效\n- min_df：类似于max_df，不同之处在于如果某个词的document frequence小于min_df，则这个词不会被当作关键词\n- max_features：对所有关键词的term frequency进行降序排序，只取前max_features个作为关键词集\n- vocabulary：默认为None，自动从输入文档中构建关键词集，也可以是一个字典或可迭代对象。\n- binary：默认为False，一个关键词在一篇文档中可能出现n次；如果binary=True，非零的n将全部置为1，这对需要布尔值输入的离散概率模型的有用的\n- **dtype** ：用于设置fit_transform() 或 transform()函数返回的矩阵元素的数据类型\n\n模型的属性和方法：\n\n- vocabulary_：词汇表，字典类型\n- get_feature_names()：所有文本的词汇，列表型\n- stop_words_：停用词列表\n\n模型的主要方法：\n\n- fit(raw_document)：拟合模型，对文本分词，并构建词汇表等\n- transform(raw_documents)：把文档转换为文档-词矩阵\n- fit_transform(raw_documents)：拟合文档，并返回该文档的文档-词矩阵\n\n### TF-IDF\n\nTF-IDF模型用于对特征信息量进行缩放，当一个词在特定的文档中经常出现，而在其他文档中出现的频次很低，那么给予该词较高的权重；当一次词在多个文档中出现的频次都很高，那么给予该词较低的权重。如果一次单词在特定的文档中出现的频次很高，而在其他文档中出现的频次很低，那么这个单词很可能是该文档独有的词，能够很好地描述该文档。\n\n**1，TF-IDF模型计算原理**\n\nTF（ Term Frequency）是词频，表示每个单词在文档中的数量（频数），TF依赖于BoW模型的输出。\n\nIDF（Inverse Document Frequency）是逆文档频率，代表一个单词的普遍成都，当一个词越普遍（即有大量文档包含这个词）时，其IDF值越低；反之，则IDF值越高。IDF是包含该单词的文档数量和文档总数的对数缩放比例\n\n![img](https://img2018.cnblogs.com/blog/628084/201903/628084-20190322180339455-653606013.png)\n\nTF-IDF（术语频率 - 逆文档频率）模型是TF和IDF相乘的结果：TF-IDF=TF*IDF。\n\n```python\nTfidfVectorizer(input=’content’, encoding=’utf-8’, decode_error=’strict’, strip_accents=None, \n                lowercase=True,    preprocessor=None, tokenizer=None, stop_words=None, \n                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, \n                max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, \n                dtype=dtype=<class ‘numpy.float64’>, \n                norm=’l2’, use_idf=True, smooth_idf=True, sublinear_tf=False)\n```\n\n大部分参数和CountVectorizer相同，TfidfVectorizer独有的参数注释：\n\n- norm=’l2’：每个输出行具备单位规范，当引用'l2'范式时，所有向量元素的平方和为1；当应用l2范数时，两个向量之间的余弦相似度是它们的点积。 *'l1'：向量元素的绝对值之和为1。\n- use_idf=True：启用IDF来重新加权\n- smooth_idf=True：平滑idf权重，向文档-词频矩阵的所有位置加1，就像存在一个额外的文档，只包含词汇表中的每个术语一次，目的是为了防止零分裂。\n- sublinear_tf=False：应用次线性tf缩放，默认值是False","source":"_posts/文本特征提取.md","raw":"---\ntitle: '文本特征处理'\ndate: 2020-02-27 15:50:39\ntags: \n  - nlp\n  - 特征处理\ncategories: [machineLearning]\nmathjax: true\n---\n\n# 文本特征提取\n\n[参考](https://www.cnblogs.com/ljhdo/p/10578047.html)\n\n机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据\n\n### One-Hot\n\nOne-Hot方法很简单，但是它的问题也很明显：\n\n- 没有考虑单词之间的相对位置，任意两个词之间都是孤立的；\n- 如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；\n\n**One-Hot表示的应用**\n\nsklearn使用词袋（Bag of Words）和TF-IDF模型来表示文本数据，这两个模型都是One-Hot表示的应用，其中，词袋模型对应的就是文档向量。\n\n### 词袋模型\n\n词袋模型（BoW）是用于文本表示的最简单的方法， BoW把文本转换为文档中单词出现次数的矩阵，该模型只关注文档中是否出现给定的单词和单词出现频率，而舍弃文本的结构、单词出现的顺序和位置。\n\n```python\nCountVectorizer(input=’content’, encoding=’utf-8’, decode_error=’strict’, strip_accents=None, \n                lowercase=True,    preprocessor=None, tokenizer=None, stop_words=None, \n                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, \n                max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, \n                dtype=<class ‘numpy.int64’>)\n```\n\n常用参数注释:\n\n- input：默认值是content，表示输入的是顺序的字符文本\n- decode_error：默认为strict，遇到不能解码的字符将报UnicodeDecodeError错误，设为ignore将会忽略解码错误\n- lowercase：默认值是True，在分词（Tokenize）之前把文本中的所有字符转换为小写。\n- preprocessor：预处理器，在分词之前对文本进行预处理，默认值是None\n- tokenizer：分词器，把文本字符串拆分成各个单词（token），默认值是None\n- analyzer：用于预处理和分词，可设置为string类型，如’word’, ‘char’, ‘char_wb’，默认值是word\n- stop_words：停用词表，如果值是english，使用内置的英语停用词列表；如果是一个列表，那么使用该列表作为停用词，设为None且max_df∈[0.7, 1.0)将自动根据当前的语料库建立停用词表\n- ngram_range：tuple（min_n，max_n），表示ngram模型的范围\n- max_df：可以设置为范围在[0.0 1.0]的浮点数，也可以设置为没有范围限制的整数，默认为1.0。这个参数的作用是作为一个阈值，当构造语料库的词汇表时，如果某个词的document frequence大于max_df，这个词不会被当作关键词。如果这个参数是float，则表示词出现的次数与语料库文档数的百分比，如果是int，则表示词出现的次数。如果参数中已经给定了vocabulary，则这个参数无效\n- min_df：类似于max_df，不同之处在于如果某个词的document frequence小于min_df，则这个词不会被当作关键词\n- max_features：对所有关键词的term frequency进行降序排序，只取前max_features个作为关键词集\n- vocabulary：默认为None，自动从输入文档中构建关键词集，也可以是一个字典或可迭代对象。\n- binary：默认为False，一个关键词在一篇文档中可能出现n次；如果binary=True，非零的n将全部置为1，这对需要布尔值输入的离散概率模型的有用的\n- **dtype** ：用于设置fit_transform() 或 transform()函数返回的矩阵元素的数据类型\n\n模型的属性和方法：\n\n- vocabulary_：词汇表，字典类型\n- get_feature_names()：所有文本的词汇，列表型\n- stop_words_：停用词列表\n\n模型的主要方法：\n\n- fit(raw_document)：拟合模型，对文本分词，并构建词汇表等\n- transform(raw_documents)：把文档转换为文档-词矩阵\n- fit_transform(raw_documents)：拟合文档，并返回该文档的文档-词矩阵\n\n### TF-IDF\n\nTF-IDF模型用于对特征信息量进行缩放，当一个词在特定的文档中经常出现，而在其他文档中出现的频次很低，那么给予该词较高的权重；当一次词在多个文档中出现的频次都很高，那么给予该词较低的权重。如果一次单词在特定的文档中出现的频次很高，而在其他文档中出现的频次很低，那么这个单词很可能是该文档独有的词，能够很好地描述该文档。\n\n**1，TF-IDF模型计算原理**\n\nTF（ Term Frequency）是词频，表示每个单词在文档中的数量（频数），TF依赖于BoW模型的输出。\n\nIDF（Inverse Document Frequency）是逆文档频率，代表一个单词的普遍成都，当一个词越普遍（即有大量文档包含这个词）时，其IDF值越低；反之，则IDF值越高。IDF是包含该单词的文档数量和文档总数的对数缩放比例\n\n![img](https://img2018.cnblogs.com/blog/628084/201903/628084-20190322180339455-653606013.png)\n\nTF-IDF（术语频率 - 逆文档频率）模型是TF和IDF相乘的结果：TF-IDF=TF*IDF。\n\n```python\nTfidfVectorizer(input=’content’, encoding=’utf-8’, decode_error=’strict’, strip_accents=None, \n                lowercase=True,    preprocessor=None, tokenizer=None, stop_words=None, \n                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, \n                max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, \n                dtype=dtype=<class ‘numpy.float64’>, \n                norm=’l2’, use_idf=True, smooth_idf=True, sublinear_tf=False)\n```\n\n大部分参数和CountVectorizer相同，TfidfVectorizer独有的参数注释：\n\n- norm=’l2’：每个输出行具备单位规范，当引用'l2'范式时，所有向量元素的平方和为1；当应用l2范数时，两个向量之间的余弦相似度是它们的点积。 *'l1'：向量元素的绝对值之和为1。\n- use_idf=True：启用IDF来重新加权\n- smooth_idf=True：平滑idf权重，向文档-词频矩阵的所有位置加1，就像存在一个额外的文档，只包含词汇表中的每个术语一次，目的是为了防止零分裂。\n- sublinear_tf=False：应用次线性tf缩放，默认值是False","slug":"文本特征提取","published":1,"updated":"2020-03-22T11:18:27.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5nj000lrwv008aobt1c","content":"<h1 id=\"文本特征提取\"><a href=\"#文本特征提取\" class=\"headerlink\" title=\"文本特征提取\"></a>文本特征提取</h1><p><a href=\"https://www.cnblogs.com/ljhdo/p/10578047.html\" target=\"_blank\" rel=\"noopener\">参考</a></p><p>机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据</p><h3 id=\"One-Hot\"><a href=\"#One-Hot\" class=\"headerlink\" title=\"One-Hot\"></a>One-Hot</h3><p>One-Hot方法很简单，但是它的问题也很明显：</p><ul>\n<li>没有考虑单词之间的相对位置，任意两个词之间都是孤立的；</li>\n<li>如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；</li>\n</ul><a id=\"more\"></a>\n\n\n\n<p><strong>One-Hot表示的应用</strong></p>\n<p>sklearn使用词袋（Bag of Words）和TF-IDF模型来表示文本数据，这两个模型都是One-Hot表示的应用，其中，词袋模型对应的就是文档向量。</p>\n<h3 id=\"词袋模型\"><a href=\"#词袋模型\" class=\"headerlink\" title=\"词袋模型\"></a>词袋模型</h3><p>词袋模型（BoW）是用于文本表示的最简单的方法， BoW把文本转换为文档中单词出现次数的矩阵，该模型只关注文档中是否出现给定的单词和单词出现频率，而舍弃文本的结构、单词出现的顺序和位置。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountVectorizer(input=’content’, encoding=’utf<span class=\"number\">-8</span>’, decode_error=’strict’, strip_accents=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                lowercase=<span class=\"literal\">True</span>,    preprocessor=<span class=\"literal\">None</span>, tokenizer=<span class=\"literal\">None</span>, stop_words=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class=\"line\">                max_df=<span class=\"number\">1.0</span>, min_df=<span class=\"number\">1</span>, max_features=<span class=\"literal\">None</span>, vocabulary=<span class=\"literal\">None</span>, binary=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                dtype=&lt;<span class=\"class\"><span class=\"keyword\">class</span> ‘<span class=\"title\">numpy</span>.<span class=\"title\">int64</span>’&gt;)</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数注释:</p>\n<ul>\n<li>input：默认值是content，表示输入的是顺序的字符文本</li>\n<li>decode_error：默认为strict，遇到不能解码的字符将报UnicodeDecodeError错误，设为ignore将会忽略解码错误</li>\n<li>lowercase：默认值是True，在分词（Tokenize）之前把文本中的所有字符转换为小写。</li>\n<li>preprocessor：预处理器，在分词之前对文本进行预处理，默认值是None</li>\n<li>tokenizer：分词器，把文本字符串拆分成各个单词（token），默认值是None</li>\n<li>analyzer：用于预处理和分词，可设置为string类型，如’word’, ‘char’, ‘char_wb’，默认值是word</li>\n<li>stop_words：停用词表，如果值是english，使用内置的英语停用词列表；如果是一个列表，那么使用该列表作为停用词，设为None且max_df∈[0.7, 1.0)将自动根据当前的语料库建立停用词表</li>\n<li>ngram_range：tuple（min_n，max_n），表示ngram模型的范围</li>\n<li>max_df：可以设置为范围在[0.0 1.0]的浮点数，也可以设置为没有范围限制的整数，默认为1.0。这个参数的作用是作为一个阈值，当构造语料库的词汇表时，如果某个词的document frequence大于max_df，这个词不会被当作关键词。如果这个参数是float，则表示词出现的次数与语料库文档数的百分比，如果是int，则表示词出现的次数。如果参数中已经给定了vocabulary，则这个参数无效</li>\n<li>min_df：类似于max_df，不同之处在于如果某个词的document frequence小于min_df，则这个词不会被当作关键词</li>\n<li>max_features：对所有关键词的term frequency进行降序排序，只取前max_features个作为关键词集</li>\n<li>vocabulary：默认为None，自动从输入文档中构建关键词集，也可以是一个字典或可迭代对象。</li>\n<li>binary：默认为False，一个关键词在一篇文档中可能出现n次；如果binary=True，非零的n将全部置为1，这对需要布尔值输入的离散概率模型的有用的</li>\n<li><strong>dtype</strong> ：用于设置fit_transform() 或 transform()函数返回的矩阵元素的数据类型</li>\n</ul>\n<p>模型的属性和方法：</p>\n<ul>\n<li>vocabulary_：词汇表，字典类型</li>\n<li>get_feature_names()：所有文本的词汇，列表型</li>\n<li>stop_words_：停用词列表</li>\n</ul>\n<p>模型的主要方法：</p>\n<ul>\n<li>fit(raw_document)：拟合模型，对文本分词，并构建词汇表等</li>\n<li>transform(raw_documents)：把文档转换为文档-词矩阵</li>\n<li>fit_transform(raw_documents)：拟合文档，并返回该文档的文档-词矩阵</li>\n</ul>\n<h3 id=\"TF-IDF\"><a href=\"#TF-IDF\" class=\"headerlink\" title=\"TF-IDF\"></a>TF-IDF</h3><p>TF-IDF模型用于对特征信息量进行缩放，当一个词在特定的文档中经常出现，而在其他文档中出现的频次很低，那么给予该词较高的权重；当一次词在多个文档中出现的频次都很高，那么给予该词较低的权重。如果一次单词在特定的文档中出现的频次很高，而在其他文档中出现的频次很低，那么这个单词很可能是该文档独有的词，能够很好地描述该文档。</p>\n<p><strong>1，TF-IDF模型计算原理</strong></p>\n<p>TF（ Term Frequency）是词频，表示每个单词在文档中的数量（频数），TF依赖于BoW模型的输出。</p>\n<p>IDF（Inverse Document Frequency）是逆文档频率，代表一个单词的普遍成都，当一个词越普遍（即有大量文档包含这个词）时，其IDF值越低；反之，则IDF值越高。IDF是包含该单词的文档数量和文档总数的对数缩放比例</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/628084/201903/628084-20190322180339455-653606013.png\" alt=\"img\"></p>\n<p>TF-IDF（术语频率 - 逆文档频率）模型是TF和IDF相乘的结果：TF-IDF=TF*IDF。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TfidfVectorizer(input=’content’, encoding=’utf<span class=\"number\">-8</span>’, decode_error=’strict’, strip_accents=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                lowercase=<span class=\"literal\">True</span>,    preprocessor=<span class=\"literal\">None</span>, tokenizer=<span class=\"literal\">None</span>, stop_words=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class=\"line\">                max_df=<span class=\"number\">1.0</span>, min_df=<span class=\"number\">1</span>, max_features=<span class=\"literal\">None</span>, vocabulary=<span class=\"literal\">None</span>, binary=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                dtype=dtype=&lt;class ‘numpy.float64’&gt;, </span><br><span class=\"line\">                norm=’l2’, use_idf=<span class=\"literal\">True</span>, smooth_idf=<span class=\"literal\">True</span>, sublinear_tf=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<p>大部分参数和CountVectorizer相同，TfidfVectorizer独有的参数注释：</p>\n<ul>\n<li>norm=’l2’：每个输出行具备单位规范，当引用’l2’范式时，所有向量元素的平方和为1；当应用l2范数时，两个向量之间的余弦相似度是它们的点积。 *’l1’：向量元素的绝对值之和为1。</li>\n<li>use_idf=True：启用IDF来重新加权</li>\n<li>smooth_idf=True：平滑idf权重，向文档-词频矩阵的所有位置加1，就像存在一个额外的文档，只包含词汇表中的每个术语一次，目的是为了防止零分裂。</li>\n<li>sublinear_tf=False：应用次线性tf缩放，默认值是False</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"文本特征提取\"><a href=\"#文本特征提取\" class=\"headerlink\" title=\"文本特征提取\"></a>文本特征提取</h1><p><a href=\"https://www.cnblogs.com/ljhdo/p/10578047.html\" target=\"_blank\" rel=\"noopener\">参考</a></p><p>机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据</p><h3 id=\"One-Hot\"><a href=\"#One-Hot\" class=\"headerlink\" title=\"One-Hot\"></a>One-Hot</h3><p>One-Hot方法很简单，但是它的问题也很明显：</p><ul>\n<li>没有考虑单词之间的相对位置，任意两个词之间都是孤立的；</li>\n<li>如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；</li>\n</ul>","more":"\n\n\n\n<p><strong>One-Hot表示的应用</strong></p>\n<p>sklearn使用词袋（Bag of Words）和TF-IDF模型来表示文本数据，这两个模型都是One-Hot表示的应用，其中，词袋模型对应的就是文档向量。</p>\n<h3 id=\"词袋模型\"><a href=\"#词袋模型\" class=\"headerlink\" title=\"词袋模型\"></a>词袋模型</h3><p>词袋模型（BoW）是用于文本表示的最简单的方法， BoW把文本转换为文档中单词出现次数的矩阵，该模型只关注文档中是否出现给定的单词和单词出现频率，而舍弃文本的结构、单词出现的顺序和位置。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountVectorizer(input=’content’, encoding=’utf<span class=\"number\">-8</span>’, decode_error=’strict’, strip_accents=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                lowercase=<span class=\"literal\">True</span>,    preprocessor=<span class=\"literal\">None</span>, tokenizer=<span class=\"literal\">None</span>, stop_words=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class=\"line\">                max_df=<span class=\"number\">1.0</span>, min_df=<span class=\"number\">1</span>, max_features=<span class=\"literal\">None</span>, vocabulary=<span class=\"literal\">None</span>, binary=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                dtype=&lt;<span class=\"class\"><span class=\"keyword\">class</span> ‘<span class=\"title\">numpy</span>.<span class=\"title\">int64</span>’&gt;)</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数注释:</p>\n<ul>\n<li>input：默认值是content，表示输入的是顺序的字符文本</li>\n<li>decode_error：默认为strict，遇到不能解码的字符将报UnicodeDecodeError错误，设为ignore将会忽略解码错误</li>\n<li>lowercase：默认值是True，在分词（Tokenize）之前把文本中的所有字符转换为小写。</li>\n<li>preprocessor：预处理器，在分词之前对文本进行预处理，默认值是None</li>\n<li>tokenizer：分词器，把文本字符串拆分成各个单词（token），默认值是None</li>\n<li>analyzer：用于预处理和分词，可设置为string类型，如’word’, ‘char’, ‘char_wb’，默认值是word</li>\n<li>stop_words：停用词表，如果值是english，使用内置的英语停用词列表；如果是一个列表，那么使用该列表作为停用词，设为None且max_df∈[0.7, 1.0)将自动根据当前的语料库建立停用词表</li>\n<li>ngram_range：tuple（min_n，max_n），表示ngram模型的范围</li>\n<li>max_df：可以设置为范围在[0.0 1.0]的浮点数，也可以设置为没有范围限制的整数，默认为1.0。这个参数的作用是作为一个阈值，当构造语料库的词汇表时，如果某个词的document frequence大于max_df，这个词不会被当作关键词。如果这个参数是float，则表示词出现的次数与语料库文档数的百分比，如果是int，则表示词出现的次数。如果参数中已经给定了vocabulary，则这个参数无效</li>\n<li>min_df：类似于max_df，不同之处在于如果某个词的document frequence小于min_df，则这个词不会被当作关键词</li>\n<li>max_features：对所有关键词的term frequency进行降序排序，只取前max_features个作为关键词集</li>\n<li>vocabulary：默认为None，自动从输入文档中构建关键词集，也可以是一个字典或可迭代对象。</li>\n<li>binary：默认为False，一个关键词在一篇文档中可能出现n次；如果binary=True，非零的n将全部置为1，这对需要布尔值输入的离散概率模型的有用的</li>\n<li><strong>dtype</strong> ：用于设置fit_transform() 或 transform()函数返回的矩阵元素的数据类型</li>\n</ul>\n<p>模型的属性和方法：</p>\n<ul>\n<li>vocabulary_：词汇表，字典类型</li>\n<li>get_feature_names()：所有文本的词汇，列表型</li>\n<li>stop_words_：停用词列表</li>\n</ul>\n<p>模型的主要方法：</p>\n<ul>\n<li>fit(raw_document)：拟合模型，对文本分词，并构建词汇表等</li>\n<li>transform(raw_documents)：把文档转换为文档-词矩阵</li>\n<li>fit_transform(raw_documents)：拟合文档，并返回该文档的文档-词矩阵</li>\n</ul>\n<h3 id=\"TF-IDF\"><a href=\"#TF-IDF\" class=\"headerlink\" title=\"TF-IDF\"></a>TF-IDF</h3><p>TF-IDF模型用于对特征信息量进行缩放，当一个词在特定的文档中经常出现，而在其他文档中出现的频次很低，那么给予该词较高的权重；当一次词在多个文档中出现的频次都很高，那么给予该词较低的权重。如果一次单词在特定的文档中出现的频次很高，而在其他文档中出现的频次很低，那么这个单词很可能是该文档独有的词，能够很好地描述该文档。</p>\n<p><strong>1，TF-IDF模型计算原理</strong></p>\n<p>TF（ Term Frequency）是词频，表示每个单词在文档中的数量（频数），TF依赖于BoW模型的输出。</p>\n<p>IDF（Inverse Document Frequency）是逆文档频率，代表一个单词的普遍成都，当一个词越普遍（即有大量文档包含这个词）时，其IDF值越低；反之，则IDF值越高。IDF是包含该单词的文档数量和文档总数的对数缩放比例</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/628084/201903/628084-20190322180339455-653606013.png\" alt=\"img\"></p>\n<p>TF-IDF（术语频率 - 逆文档频率）模型是TF和IDF相乘的结果：TF-IDF=TF*IDF。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TfidfVectorizer(input=’content’, encoding=’utf<span class=\"number\">-8</span>’, decode_error=’strict’, strip_accents=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                lowercase=<span class=\"literal\">True</span>,    preprocessor=<span class=\"literal\">None</span>, tokenizer=<span class=\"literal\">None</span>, stop_words=<span class=\"literal\">None</span>, </span><br><span class=\"line\">                token_pattern=’(?u)\\b\\w\\w+\\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class=\"line\">                max_df=<span class=\"number\">1.0</span>, min_df=<span class=\"number\">1</span>, max_features=<span class=\"literal\">None</span>, vocabulary=<span class=\"literal\">None</span>, binary=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                dtype=dtype=&lt;class ‘numpy.float64’&gt;, </span><br><span class=\"line\">                norm=’l2’, use_idf=<span class=\"literal\">True</span>, smooth_idf=<span class=\"literal\">True</span>, sublinear_tf=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<p>大部分参数和CountVectorizer相同，TfidfVectorizer独有的参数注释：</p>\n<ul>\n<li>norm=’l2’：每个输出行具备单位规范，当引用’l2’范式时，所有向量元素的平方和为1；当应用l2范数时，两个向量之间的余弦相似度是它们的点积。 *’l1’：向量元素的绝对值之和为1。</li>\n<li>use_idf=True：启用IDF来重新加权</li>\n<li>smooth_idf=True：平滑idf权重，向文档-词频矩阵的所有位置加1，就像存在一个额外的文档，只包含词汇表中的每个术语一次，目的是为了防止零分裂。</li>\n<li>sublinear_tf=False：应用次线性tf缩放，默认值是False</li>\n</ul>\n"},{"title":"数据挖掘上分思路","date":"2020-03-20T07:50:39.000Z","mathjax":true,"_content":"\n比赛思路-阅读\n\nhttps://www.secrss.com/articles/15352\n\nBERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!\n\n![](https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg)\n\n- 每一个模型的基础上，进行10折交叉验证\n\n- 利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。\n\n- 模型融合+gru\n\n  ![](https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png)\n\n假图片\n\n**基本统计特征：**\n\n- 图片尺寸\n\n- 图片后缀类型\n- 图片模式（RGB、灰度等）\n- 清晰度、亮度\n- 直方图分布特征\n- 各通道的均值方差等统计特征\n\n**特征意义：**\n\n- 关键特征包括图片尺寸和清晰度特征\n- 图片尺寸可以识别图片的来源，比如手机截图的尺寸和相机照片尺寸截然不同\n\n一般认为图像越清晰越是真的，因为图像经过ps篡改之后清晰度会下降，还有一种可能性是谣言往往传播得更快，传播过程中的每一次保存和发送都可能会降低清晰度","source":"_posts/比赛思路-阅读.md","raw":"---\ntitle: '数据挖掘上分思路'\ndate: 2020-03-20 15:50:39\ntags: \n  - 数据处理\n  - 比赛\ncategories: [machineLearning]\nmathjax: true\n---\n\n比赛思路-阅读\n\nhttps://www.secrss.com/articles/15352\n\nBERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!\n\n![](https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg)\n\n- 每一个模型的基础上，进行10折交叉验证\n\n- 利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。\n\n- 模型融合+gru\n\n  ![](https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png)\n\n假图片\n\n**基本统计特征：**\n\n- 图片尺寸\n\n- 图片后缀类型\n- 图片模式（RGB、灰度等）\n- 清晰度、亮度\n- 直方图分布特征\n- 各通道的均值方差等统计特征\n\n**特征意义：**\n\n- 关键特征包括图片尺寸和清晰度特征\n- 图片尺寸可以识别图片的来源，比如手机截图的尺寸和相机照片尺寸截然不同\n\n一般认为图像越清晰越是真的，因为图像经过ps篡改之后清晰度会下降，还有一种可能性是谣言往往传播得更快，传播过程中的每一次保存和发送都可能会降低清晰度","slug":"比赛思路-阅读","published":1,"updated":"2020-03-22T11:18:27.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5nl000orwv00nd7g0gs","content":"<p>比赛思路-阅读</p><p><a href=\"https://www.secrss.com/articles/15352\" target=\"_blank\" rel=\"noopener\">https://www.secrss.com/articles/15352</a></p><p>BERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!</p><p><img src=\"https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg\" alt></p><ul>\n<li><p>每一个模型的基础上，进行10折交叉验证</p>\n</li>\n<li><p>利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。</p>\n</li>\n<li><p>模型融合+gru</p>\n<p><img src=\"https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png\" alt></p>\n</li>\n</ul><a id=\"more\"></a>\n\n\n\n\n<p>假图片</p>\n<p><strong>基本统计特征：</strong></p>\n<ul>\n<li><p>图片尺寸</p>\n</li>\n<li><p>图片后缀类型</p>\n</li>\n<li><p>图片模式（RGB、灰度等）</p>\n</li>\n<li><p>清晰度、亮度</p>\n</li>\n<li><p>直方图分布特征</p>\n</li>\n<li><p>各通道的均值方差等统计特征</p>\n</li>\n</ul>\n<p><strong>特征意义：</strong></p>\n<ul>\n<li>关键特征包括图片尺寸和清晰度特征</li>\n<li>图片尺寸可以识别图片的来源，比如手机截图的尺寸和相机照片尺寸截然不同</li>\n</ul>\n<p>一般认为图像越清晰越是真的，因为图像经过ps篡改之后清晰度会下降，还有一种可能性是谣言往往传播得更快，传播过程中的每一次保存和发送都可能会降低清晰度</p>\n","site":{"data":{}},"excerpt":"<p>比赛思路-阅读</p><p><a href=\"https://www.secrss.com/articles/15352\" target=\"_blank\" rel=\"noopener\">https://www.secrss.com/articles/15352</a></p><p>BERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!</p><p><img src=\"https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg\" alt></p><ul>\n<li><p>每一个模型的基础上，进行10折交叉验证</p>\n</li>\n<li><p>利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。</p>\n</li>\n<li><p>模型融合+gru</p>\n<p><img src=\"https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png\" alt></p>\n</li>\n</ul>","more":"\n\n\n\n\n<p>假图片</p>\n<p><strong>基本统计特征：</strong></p>\n<ul>\n<li><p>图片尺寸</p>\n</li>\n<li><p>图片后缀类型</p>\n</li>\n<li><p>图片模式（RGB、灰度等）</p>\n</li>\n<li><p>清晰度、亮度</p>\n</li>\n<li><p>直方图分布特征</p>\n</li>\n<li><p>各通道的均值方差等统计特征</p>\n</li>\n</ul>\n<p><strong>特征意义：</strong></p>\n<ul>\n<li>关键特征包括图片尺寸和清晰度特征</li>\n<li>图片尺寸可以识别图片的来源，比如手机截图的尺寸和相机照片尺寸截然不同</li>\n</ul>\n<p>一般认为图像越清晰越是真的，因为图像经过ps篡改之后清晰度会下降，还有一种可能性是谣言往往传播得更快，传播过程中的每一次保存和发送都可能会降低清晰度</p>\n"},{"title":"1833：网易云里永远定格的数字","date":"2020-03-01T07:50:39.000Z","mathjax":true,"description":"纪念网易云里那些热爱生活的人，愿生活温柔以待你","_content":"\n## 1833：网易云里永远定格的数字\n\n​        2017年2月15日23时30分在上海市普陀区中山北路2605弄43号一处出租屋的发生一起火灾事故，此次事故导致4人死亡。\n​\t\t事后采访小区居民说，事发时一同在屋内的还有男主人的妻子和一对儿女。 “这个师傅人很好的，看到我们去他店里修东西，打招呼都很和善。女儿正在读大学，15日刚过完春节回来，儿子还在读小学，本来今天就应该开学了“。\n\n😀**我们虽不曾相识**，也不知你走的那一刻有多孤单，害怕。可你什么都没有做错啊，为什么意外这样对待你啊。1833是这个小姐姐的听歌排行，她听的最多的一首歌是”[**终有一天，我会抛弃你们**](https://music.163.com/#/song?id=32408774)“，而现在这个数字永远停留在了1833。我也多么希望这个数字哪怕会变一下，告诉我你还好。\n\n> 错的不是你，是这个世界。愿天堂有音乐，愿天堂没有火灾。\n\n***\n\n![](http://web.wvdon.com/%E6%89%B9%E6%B3%A8%202020-03-01%20153003.png)\n\n👩[@框女](https://music.163.com/#/user/home?id=254967036)  如今她也有了30885关注。\n\n> 或许我喜欢网易云的原因大概是每首歌的每一条评论里都包含了故事与爱。\n\n---\n\n","source":"_posts/纪念网易云里那些热爱生活的人.md","raw":"---\ntitle: '1833：网易云里永远定格的数字'\ndate: 2020-3-1 15:50:39\ntags: \n  - 网易云\n  - 框女\ncategories: [remember]\nmathjax: true\ndescription: 纪念网易云里那些热爱生活的人，愿生活温柔以待你\n---\n\n## 1833：网易云里永远定格的数字\n\n​        2017年2月15日23时30分在上海市普陀区中山北路2605弄43号一处出租屋的发生一起火灾事故，此次事故导致4人死亡。\n​\t\t事后采访小区居民说，事发时一同在屋内的还有男主人的妻子和一对儿女。 “这个师傅人很好的，看到我们去他店里修东西，打招呼都很和善。女儿正在读大学，15日刚过完春节回来，儿子还在读小学，本来今天就应该开学了“。\n\n😀**我们虽不曾相识**，也不知你走的那一刻有多孤单，害怕。可你什么都没有做错啊，为什么意外这样对待你啊。1833是这个小姐姐的听歌排行，她听的最多的一首歌是”[**终有一天，我会抛弃你们**](https://music.163.com/#/song?id=32408774)“，而现在这个数字永远停留在了1833。我也多么希望这个数字哪怕会变一下，告诉我你还好。\n\n> 错的不是你，是这个世界。愿天堂有音乐，愿天堂没有火灾。\n\n***\n\n![](http://web.wvdon.com/%E6%89%B9%E6%B3%A8%202020-03-01%20153003.png)\n\n👩[@框女](https://music.163.com/#/user/home?id=254967036)  如今她也有了30885关注。\n\n> 或许我喜欢网易云的原因大概是每首歌的每一条评论里都包含了故事与爱。\n\n---\n\n","slug":"纪念网易云里那些热爱生活的人","published":1,"updated":"2020-03-22T11:18:27.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5no000srwv0aqp6ujb3","content":"<h2 id=\"1833：网易云里永远定格的数字\"><a href=\"#1833：网易云里永远定格的数字\" class=\"headerlink\" title=\"1833：网易云里永远定格的数字\"></a>1833：网易云里永远定格的数字</h2><p>​        2017年2月15日23时30分在上海市普陀区中山北路2605弄43号一处出租屋的发生一起火灾事故，此次事故导致4人死亡。<br>​        事后采访小区居民说，事发时一同在屋内的还有男主人的妻子和一对儿女。 “这个师傅人很好的，看到我们去他店里修东西，打招呼都很和善。女儿正在读大学，15日刚过完春节回来，儿子还在读小学，本来今天就应该开学了“。</p><a id=\"more\"></a>\n<p>😀<strong>我们虽不曾相识</strong>，也不知你走的那一刻有多孤单，害怕。可你什么都没有做错啊，为什么意外这样对待你啊。1833是这个小姐姐的听歌排行，她听的最多的一首歌是”<a href=\"https://music.163.com/#/song?id=32408774\" target=\"_blank\" rel=\"noopener\"><strong>终有一天，我会抛弃你们</strong></a>“，而现在这个数字永远停留在了1833。我也多么希望这个数字哪怕会变一下，告诉我你还好。</p>\n<blockquote>\n<p>错的不是你，是这个世界。愿天堂有音乐，愿天堂没有火灾。</p>\n</blockquote>\n<hr>\n<p><img src=\"http://web.wvdon.com/%E6%89%B9%E6%B3%A8%202020-03-01%20153003.png\" alt></p>\n<p>👩<a href=\"https://music.163.com/#/user/home?id=254967036\" target=\"_blank\" rel=\"noopener\">@框女</a>  如今她也有了30885关注。</p>\n<blockquote>\n<p>或许我喜欢网易云的原因大概是每首歌的每一条评论里都包含了故事与爱。</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"1833：网易云里永远定格的数字\"><a href=\"#1833：网易云里永远定格的数字\" class=\"headerlink\" title=\"1833：网易云里永远定格的数字\"></a>1833：网易云里永远定格的数字</h2><p>​        2017年2月15日23时30分在上海市普陀区中山北路2605弄43号一处出租屋的发生一起火灾事故，此次事故导致4人死亡。<br>​        事后采访小区居民说，事发时一同在屋内的还有男主人的妻子和一对儿女。 “这个师傅人很好的，看到我们去他店里修东西，打招呼都很和善。女儿正在读大学，15日刚过完春节回来，儿子还在读小学，本来今天就应该开学了“。</p>","more":"\n<p>😀<strong>我们虽不曾相识</strong>，也不知你走的那一刻有多孤单，害怕。可你什么都没有做错啊，为什么意外这样对待你啊。1833是这个小姐姐的听歌排行，她听的最多的一首歌是”<a href=\"https://music.163.com/#/song?id=32408774\" target=\"_blank\" rel=\"noopener\"><strong>终有一天，我会抛弃你们</strong></a>“，而现在这个数字永远停留在了1833。我也多么希望这个数字哪怕会变一下，告诉我你还好。</p>\n<blockquote>\n<p>错的不是你，是这个世界。愿天堂有音乐，愿天堂没有火灾。</p>\n</blockquote>\n<hr>\n<p><img src=\"http://web.wvdon.com/%E6%89%B9%E6%B3%A8%202020-03-01%20153003.png\" alt></p>\n<p>👩<a href=\"https://music.163.com/#/user/home?id=254967036\" target=\"_blank\" rel=\"noopener\">@框女</a>  如今她也有了30885关注。</p>\n<blockquote>\n<p>或许我喜欢网易云的原因大概是每首歌的每一条评论里都包含了故事与爱。</p>\n</blockquote>\n<hr>\n"},{"title":"字符串匹配:KMP","date":"2019-10-16T09:50:39.000Z","mathjax":true,"description":"JAVA数据结构与算法：字符串匹配之KMP","_content":"\n\n\n## 摘要\n\n​\tKMP算法是一种改进的[字符串匹配](https://baike.baidu.com/item/字符串匹配)算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为[克努特](https://baike.baidu.com/item/克努特)—[莫里斯](https://baike.baidu.com/item/莫里斯)—[普拉特](https://baike.baidu.com/item/普拉特)操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的[时间复杂度](https://baike.baidu.com/item/时间复杂度)O(m+n)。\n\n## 简介\n\n​\t字符串的匹配是对字符串的基本操作，最直接的方式是进行全遍历搜索的回溯法，但是其复杂度较高，而随着人们对于匹配效率的追求与匹配优化，其匹配的复杂度逐渐降低。\n​\t在这个过程中最重要的当属于KMP了，他将原有的算法复杂度降低到了O(n+m) 其中n,m是指两个字符串的长度。\n\n## 详解\n\n### 最直接的回溯法\n\n​\t从字符串左边开始匹配，如果遇到相同的sc与j同事进行+1，直到全部遍历完p的时候进行返回下标，如果匹配过程有不一样的sc进行回溯到i。\n\n```java\npublic class Match_kmp {\n    public static void main(String[] args) {\n        System.out.println(indexOf(\"aaavbvdd\",\"vbv\"));\n    }\n    private static int indexOf(String s,String p){\n        int i = 0;\n        int sc = i;\n        int j = 0;\n        while (sc<s.length()){\n            if(s.charAt(sc)==p.charAt(j)){\n                j++;\n                sc++;\n                if(j==p.length()){\n                    return i;\n                }\n            }else\n            {\n                i++;\n                sc=i;\n                j=0;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n其结果是返回第一个匹配的下标i\n\n- 这种求解的方法复杂度达到O(n*m)，下面介绍KMP算法.\n\n### KMP匹配\n\n#### 图解\n\n ![1571297220130](http://web.wvdon.com/arithmetic/1571297220130.png)\n\n①从左到右进行匹配,此时 i =0,j=0;如果相同 j++,i++，如果不相同 j进行回溯\n\n②匹配到最后一个不相同的时候进行回溯，如果暴力进行匹配的时候 i ++，令j=0;\n但是我们可以借助之前已经比较的字符串T，进行回溯。这样比较的时候就会减少复杂度。j回溯的大小取决于匹配字符串T的next[数组]。Next数组的求解放到下面说.next={0,0,0,0,2,2}\n$$\n右移的大小=以经匹配的字符串-next[j]\n$$\n所以next[5]=2，右移的大小=5-2，此时j也进行回溯，\n$$\nj = next[j-1]\n$$\n③以此类推，此时j=2;进行比较 ，不相同，进行回溯 j = 2-next[j-1]=2........\n\n\n\n#### KMP\n\n```java\npublic class MatchKMP {\n    public static void main(String[] args) {\n        int ne[] =getNext(\"abcdabd\");\n        int res = kmp(\"ssdfgasdbababa\",\"bababa\",ne);\n        System.out.println(res);\n    }\n    private static int kmp(String s,String t,int[] next){\n        for (int i = 0,j=0;i<s.length();i++){\n            while(j>0&&s.charAt(i)!=t.charAt(j)){\n                j=next[j-1];\n            }if(s.charAt(i)==t.charAt(j)){\n                j++;\n            }\n            if(j==t.length()){\n                return i-j+1;\n            }\n        }\n        return 0;\n    }\n    private static int[] getNext(String t){\n        int next[]=new int[t.length()];\n        next[0]=0;\n        for (int i = 1,j=0; i < t.length(); i++) {\n            while (j>0&&t.charAt(j)!=t.charAt(i))\n                j=next[j-1];\n            if(t.charAt(i)==t.charAt(j))\n                j++;\n            next[i]=j;\n        }\n        return next;\n    }\n}\n\n```\n\n#### 求解 next数组\n\n- 前缀是除了最后一个字符的集合\n- 后缀是除了第一个字符的集合\n  a b c a b d的前缀和后缀计算方法\n  a 一个字符的前后缀都为0\n  a b的前缀是 [ a ]  后缀是[ b ] 相同为 0\n  a b c 的前缀是 [a ,a b] 后缀是 [b c,c] 相同为0\n  a b c a 的前缀为 [a,ab,abc] 后缀是[b c a,c a,a] 0\n  a b c a b 的前缀为 [a ,ab,abc,abca]后缀是 [bcab,cab,ab,b] 最大相同为ab  next[4]=2\n  a b c a b d 的前缀为 [a,ab,abc,abcb,abcabd]\n  后缀为 [bcabd,cabd,abd,bd,d]最大共有长度还是ab 故 next[5] = 2;\n\n```jav\n  private static int[] getNext(String t){\n        int next[]=new int[t.length()];\n        next[0]=0;\n        for (int i = 1,j=0; i < t.length(); i++) {\n            while (j>0&&t.charAt(j)!=t.charAt(i))\n                j=next[j-1];\n            if(t.charAt(i)==t.charAt(j))\n                j++;\n            next[i]=j;\n        }\n        return next;\n    }\n```\n\n\n\n## 小结\n\n学习KMP算法花了我不少的时间，当时看了一直没有特别理解。后来经过自己画图，瞬间明白了；凡事还是要多动手。\n\n## 参考\n\n百度百科 [KMP算法]([https://baike.baidu.com/item/KMP%E7%AE%97%E6%B3%95/10951804](https://baike.baidu.com/item/KMP算法/10951804))\n\n阮一峰的博客 [字符串匹配的KMP算法](http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html)","source":"_posts/arithmetic/2019-10-16-JAVA数据结构与算法KMP.md","raw":"---\ntitle: '字符串匹配:KMP'\ndate: 2019-10-16 17:50:39\ntags: \n  - java\n  - 数据结构\n  - KMP\n  - 字符串匹配\ncategories: [JAVA数据结构与算法]\nmathjax: true\ndescription: JAVA数据结构与算法：字符串匹配之KMP\n---\n\n\n\n## 摘要\n\n​\tKMP算法是一种改进的[字符串匹配](https://baike.baidu.com/item/字符串匹配)算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为[克努特](https://baike.baidu.com/item/克努特)—[莫里斯](https://baike.baidu.com/item/莫里斯)—[普拉特](https://baike.baidu.com/item/普拉特)操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的[时间复杂度](https://baike.baidu.com/item/时间复杂度)O(m+n)。\n\n## 简介\n\n​\t字符串的匹配是对字符串的基本操作，最直接的方式是进行全遍历搜索的回溯法，但是其复杂度较高，而随着人们对于匹配效率的追求与匹配优化，其匹配的复杂度逐渐降低。\n​\t在这个过程中最重要的当属于KMP了，他将原有的算法复杂度降低到了O(n+m) 其中n,m是指两个字符串的长度。\n\n## 详解\n\n### 最直接的回溯法\n\n​\t从字符串左边开始匹配，如果遇到相同的sc与j同事进行+1，直到全部遍历完p的时候进行返回下标，如果匹配过程有不一样的sc进行回溯到i。\n\n```java\npublic class Match_kmp {\n    public static void main(String[] args) {\n        System.out.println(indexOf(\"aaavbvdd\",\"vbv\"));\n    }\n    private static int indexOf(String s,String p){\n        int i = 0;\n        int sc = i;\n        int j = 0;\n        while (sc<s.length()){\n            if(s.charAt(sc)==p.charAt(j)){\n                j++;\n                sc++;\n                if(j==p.length()){\n                    return i;\n                }\n            }else\n            {\n                i++;\n                sc=i;\n                j=0;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n其结果是返回第一个匹配的下标i\n\n- 这种求解的方法复杂度达到O(n*m)，下面介绍KMP算法.\n\n### KMP匹配\n\n#### 图解\n\n ![1571297220130](http://web.wvdon.com/arithmetic/1571297220130.png)\n\n①从左到右进行匹配,此时 i =0,j=0;如果相同 j++,i++，如果不相同 j进行回溯\n\n②匹配到最后一个不相同的时候进行回溯，如果暴力进行匹配的时候 i ++，令j=0;\n但是我们可以借助之前已经比较的字符串T，进行回溯。这样比较的时候就会减少复杂度。j回溯的大小取决于匹配字符串T的next[数组]。Next数组的求解放到下面说.next={0,0,0,0,2,2}\n$$\n右移的大小=以经匹配的字符串-next[j]\n$$\n所以next[5]=2，右移的大小=5-2，此时j也进行回溯，\n$$\nj = next[j-1]\n$$\n③以此类推，此时j=2;进行比较 ，不相同，进行回溯 j = 2-next[j-1]=2........\n\n\n\n#### KMP\n\n```java\npublic class MatchKMP {\n    public static void main(String[] args) {\n        int ne[] =getNext(\"abcdabd\");\n        int res = kmp(\"ssdfgasdbababa\",\"bababa\",ne);\n        System.out.println(res);\n    }\n    private static int kmp(String s,String t,int[] next){\n        for (int i = 0,j=0;i<s.length();i++){\n            while(j>0&&s.charAt(i)!=t.charAt(j)){\n                j=next[j-1];\n            }if(s.charAt(i)==t.charAt(j)){\n                j++;\n            }\n            if(j==t.length()){\n                return i-j+1;\n            }\n        }\n        return 0;\n    }\n    private static int[] getNext(String t){\n        int next[]=new int[t.length()];\n        next[0]=0;\n        for (int i = 1,j=0; i < t.length(); i++) {\n            while (j>0&&t.charAt(j)!=t.charAt(i))\n                j=next[j-1];\n            if(t.charAt(i)==t.charAt(j))\n                j++;\n            next[i]=j;\n        }\n        return next;\n    }\n}\n\n```\n\n#### 求解 next数组\n\n- 前缀是除了最后一个字符的集合\n- 后缀是除了第一个字符的集合\n  a b c a b d的前缀和后缀计算方法\n  a 一个字符的前后缀都为0\n  a b的前缀是 [ a ]  后缀是[ b ] 相同为 0\n  a b c 的前缀是 [a ,a b] 后缀是 [b c,c] 相同为0\n  a b c a 的前缀为 [a,ab,abc] 后缀是[b c a,c a,a] 0\n  a b c a b 的前缀为 [a ,ab,abc,abca]后缀是 [bcab,cab,ab,b] 最大相同为ab  next[4]=2\n  a b c a b d 的前缀为 [a,ab,abc,abcb,abcabd]\n  后缀为 [bcabd,cabd,abd,bd,d]最大共有长度还是ab 故 next[5] = 2;\n\n```jav\n  private static int[] getNext(String t){\n        int next[]=new int[t.length()];\n        next[0]=0;\n        for (int i = 1,j=0; i < t.length(); i++) {\n            while (j>0&&t.charAt(j)!=t.charAt(i))\n                j=next[j-1];\n            if(t.charAt(i)==t.charAt(j))\n                j++;\n            next[i]=j;\n        }\n        return next;\n    }\n```\n\n\n\n## 小结\n\n学习KMP算法花了我不少的时间，当时看了一直没有特别理解。后来经过自己画图，瞬间明白了；凡事还是要多动手。\n\n## 参考\n\n百度百科 [KMP算法]([https://baike.baidu.com/item/KMP%E7%AE%97%E6%B3%95/10951804](https://baike.baidu.com/item/KMP算法/10951804))\n\n阮一峰的博客 [字符串匹配的KMP算法](http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html)","slug":"arithmetic/2019-10-16-JAVA数据结构与算法KMP","published":1,"updated":"2020-03-22T11:13:25.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5tw001trwv0og4n1ail","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>​    KMP算法是一种改进的<a href=\"https://baike.baidu.com/item/字符串匹配\" target=\"_blank\" rel=\"noopener\">字符串匹配</a>算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为<a href=\"https://baike.baidu.com/item/克努特\" target=\"_blank\" rel=\"noopener\">克努特</a>—<a href=\"https://baike.baidu.com/item/莫里斯\" target=\"_blank\" rel=\"noopener\">莫里斯</a>—<a href=\"https://baike.baidu.com/item/普拉特\" target=\"_blank\" rel=\"noopener\">普拉特</a>操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的<a href=\"https://baike.baidu.com/item/时间复杂度\" target=\"_blank\" rel=\"noopener\">时间复杂度</a>O(m+n)。</p><a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>​    字符串的匹配是对字符串的基本操作，最直接的方式是进行全遍历搜索的回溯法，但是其复杂度较高，而随着人们对于匹配效率的追求与匹配优化，其匹配的复杂度逐渐降低。<br>​    在这个过程中最重要的当属于KMP了，他将原有的算法复杂度降低到了O(n+m) 其中n,m是指两个字符串的长度。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"最直接的回溯法\"><a href=\"#最直接的回溯法\" class=\"headerlink\" title=\"最直接的回溯法\"></a>最直接的回溯法</h3><p>​    从字符串左边开始匹配，如果遇到相同的sc与j同事进行+1，直到全部遍历完p的时候进行返回下标，如果匹配过程有不一样的sc进行回溯到i。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Match_kmp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(indexOf(<span class=\"string\">\"aaavbvdd\"</span>,<span class=\"string\">\"vbv\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(String s,String p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sc = i;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sc&lt;s.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(sc)==p.charAt(j))&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                sc++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j==p.length())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                sc=i;</span><br><span class=\"line\">                j=<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其结果是返回第一个匹配的下标i</p>\n<ul>\n<li>这种求解的方法复杂度达到O(n*m)，下面介绍KMP算法.</li>\n</ul>\n<h3 id=\"KMP匹配\"><a href=\"#KMP匹配\" class=\"headerlink\" title=\"KMP匹配\"></a>KMP匹配</h3><h4 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h4><p> <img src=\"http://web.wvdon.com/arithmetic/1571297220130.png\" alt=\"1571297220130\"></p>\n<p>①从左到右进行匹配,此时 i =0,j=0;如果相同 j++,i++，如果不相同 j进行回溯</p>\n<p>②匹配到最后一个不相同的时候进行回溯，如果暴力进行匹配的时候 i ++，令j=0;<br>但是我们可以借助之前已经比较的字符串T，进行回溯。这样比较的时候就会减少复杂度。j回溯的大小取决于匹配字符串T的next[数组]。Next数组的求解放到下面说.next={0,0,0,0,2,2}<br>$$<br>右移的大小=以经匹配的字符串-next[j]<br>$$<br>所以next[5]=2，右移的大小=5-2，此时j也进行回溯，<br>$$<br>j = next[j-1]<br>$$<br>③以此类推，此时j=2;进行比较 ，不相同，进行回溯 j = 2-next[j-1]=2……..</p>\n<h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchKMP</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ne[] =getNext(<span class=\"string\">\"abcdabd\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = kmp(<span class=\"string\">\"ssdfgasdbababa\"</span>,<span class=\"string\">\"bababa\"</span>,ne);</span><br><span class=\"line\">        System.out.println(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kmp</span><span class=\"params\">(String s,String t,<span class=\"keyword\">int</span>[] next)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span>&amp;&amp;s.charAt(i)!=t.charAt(j))&#123;</span><br><span class=\"line\">                j=next[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">if</span>(s.charAt(i)==t.charAt(j))&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==t.length())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i-j+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] getNext(String t)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> next[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[t.length()];</span><br><span class=\"line\">        next[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>,j=<span class=\"number\">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j&gt;<span class=\"number\">0</span>&amp;&amp;t.charAt(j)!=t.charAt(i))</span><br><span class=\"line\">                j=next[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t.charAt(i)==t.charAt(j))</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            next[i]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"求解-next数组\"><a href=\"#求解-next数组\" class=\"headerlink\" title=\"求解 next数组\"></a>求解 next数组</h4><ul>\n<li>前缀是除了最后一个字符的集合</li>\n<li>后缀是除了第一个字符的集合<br>a b c a b d的前缀和后缀计算方法<br>a 一个字符的前后缀都为0<br>a b的前缀是 [ a ]  后缀是[ b ] 相同为 0<br>a b c 的前缀是 [a ,a b] 后缀是 [b c,c] 相同为0<br>a b c a 的前缀为 [a,ab,abc] 后缀是[b c a,c a,a] 0<br>a b c a b 的前缀为 [a ,ab,abc,abca]后缀是 [bcab,cab,ab,b] 最大相同为ab  next[4]=2<br>a b c a b d 的前缀为 [a,ab,abc,abcb,abcabd]<br>后缀为 [bcabd,cabd,abd,bd,d]最大共有长度还是ab 故 next[5] = 2;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static int[] getNext(String t)&#123;</span><br><span class=\"line\">      int next[]=new int[t.length()];</span><br><span class=\"line\">      next[0]=0;</span><br><span class=\"line\">      for (int i = 1,j=0; i &lt; t.length(); i++) &#123;</span><br><span class=\"line\">          while (j&gt;0&amp;&amp;t.charAt(j)!=t.charAt(i))</span><br><span class=\"line\">              j=next[j-1];</span><br><span class=\"line\">          if(t.charAt(i)==t.charAt(j))</span><br><span class=\"line\">              j++;</span><br><span class=\"line\">          next[i]=j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return next;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>学习KMP算法花了我不少的时间，当时看了一直没有特别理解。后来经过自己画图，瞬间明白了；凡事还是要多动手。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>百度百科 <a href=\"[https://baike.baidu.com/item/KMP%E7%AE%97%E6%B3%95/10951804](https://baike.baidu.com/item/KMP算法/10951804)\">KMP算法</a></p>\n<p>阮一峰的博客 <a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">字符串匹配的KMP算法</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>​    KMP算法是一种改进的<a href=\"https://baike.baidu.com/item/字符串匹配\" target=\"_blank\" rel=\"noopener\">字符串匹配</a>算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为<a href=\"https://baike.baidu.com/item/克努特\" target=\"_blank\" rel=\"noopener\">克努特</a>—<a href=\"https://baike.baidu.com/item/莫里斯\" target=\"_blank\" rel=\"noopener\">莫里斯</a>—<a href=\"https://baike.baidu.com/item/普拉特\" target=\"_blank\" rel=\"noopener\">普拉特</a>操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的<a href=\"https://baike.baidu.com/item/时间复杂度\" target=\"_blank\" rel=\"noopener\">时间复杂度</a>O(m+n)。</p>","more":"\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>​    字符串的匹配是对字符串的基本操作，最直接的方式是进行全遍历搜索的回溯法，但是其复杂度较高，而随着人们对于匹配效率的追求与匹配优化，其匹配的复杂度逐渐降低。<br>​    在这个过程中最重要的当属于KMP了，他将原有的算法复杂度降低到了O(n+m) 其中n,m是指两个字符串的长度。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"最直接的回溯法\"><a href=\"#最直接的回溯法\" class=\"headerlink\" title=\"最直接的回溯法\"></a>最直接的回溯法</h3><p>​    从字符串左边开始匹配，如果遇到相同的sc与j同事进行+1，直到全部遍历完p的时候进行返回下标，如果匹配过程有不一样的sc进行回溯到i。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Match_kmp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(indexOf(<span class=\"string\">\"aaavbvdd\"</span>,<span class=\"string\">\"vbv\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(String s,String p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sc = i;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sc&lt;s.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(sc)==p.charAt(j))&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                sc++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j==p.length())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                sc=i;</span><br><span class=\"line\">                j=<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其结果是返回第一个匹配的下标i</p>\n<ul>\n<li>这种求解的方法复杂度达到O(n*m)，下面介绍KMP算法.</li>\n</ul>\n<h3 id=\"KMP匹配\"><a href=\"#KMP匹配\" class=\"headerlink\" title=\"KMP匹配\"></a>KMP匹配</h3><h4 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h4><p> <img src=\"http://web.wvdon.com/arithmetic/1571297220130.png\" alt=\"1571297220130\"></p>\n<p>①从左到右进行匹配,此时 i =0,j=0;如果相同 j++,i++，如果不相同 j进行回溯</p>\n<p>②匹配到最后一个不相同的时候进行回溯，如果暴力进行匹配的时候 i ++，令j=0;<br>但是我们可以借助之前已经比较的字符串T，进行回溯。这样比较的时候就会减少复杂度。j回溯的大小取决于匹配字符串T的next[数组]。Next数组的求解放到下面说.next={0,0,0,0,2,2}<br>$$<br>右移的大小=以经匹配的字符串-next[j]<br>$$<br>所以next[5]=2，右移的大小=5-2，此时j也进行回溯，<br>$$<br>j = next[j-1]<br>$$<br>③以此类推，此时j=2;进行比较 ，不相同，进行回溯 j = 2-next[j-1]=2……..</p>\n<h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchKMP</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ne[] =getNext(<span class=\"string\">\"abcdabd\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = kmp(<span class=\"string\">\"ssdfgasdbababa\"</span>,<span class=\"string\">\"bababa\"</span>,ne);</span><br><span class=\"line\">        System.out.println(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kmp</span><span class=\"params\">(String s,String t,<span class=\"keyword\">int</span>[] next)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span>&amp;&amp;s.charAt(i)!=t.charAt(j))&#123;</span><br><span class=\"line\">                j=next[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">if</span>(s.charAt(i)==t.charAt(j))&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==t.length())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i-j+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] getNext(String t)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> next[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[t.length()];</span><br><span class=\"line\">        next[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>,j=<span class=\"number\">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j&gt;<span class=\"number\">0</span>&amp;&amp;t.charAt(j)!=t.charAt(i))</span><br><span class=\"line\">                j=next[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t.charAt(i)==t.charAt(j))</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            next[i]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"求解-next数组\"><a href=\"#求解-next数组\" class=\"headerlink\" title=\"求解 next数组\"></a>求解 next数组</h4><ul>\n<li>前缀是除了最后一个字符的集合</li>\n<li>后缀是除了第一个字符的集合<br>a b c a b d的前缀和后缀计算方法<br>a 一个字符的前后缀都为0<br>a b的前缀是 [ a ]  后缀是[ b ] 相同为 0<br>a b c 的前缀是 [a ,a b] 后缀是 [b c,c] 相同为0<br>a b c a 的前缀为 [a,ab,abc] 后缀是[b c a,c a,a] 0<br>a b c a b 的前缀为 [a ,ab,abc,abca]后缀是 [bcab,cab,ab,b] 最大相同为ab  next[4]=2<br>a b c a b d 的前缀为 [a,ab,abc,abcb,abcabd]<br>后缀为 [bcabd,cabd,abd,bd,d]最大共有长度还是ab 故 next[5] = 2;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static int[] getNext(String t)&#123;</span><br><span class=\"line\">      int next[]=new int[t.length()];</span><br><span class=\"line\">      next[0]=0;</span><br><span class=\"line\">      for (int i = 1,j=0; i &lt; t.length(); i++) &#123;</span><br><span class=\"line\">          while (j&gt;0&amp;&amp;t.charAt(j)!=t.charAt(i))</span><br><span class=\"line\">              j=next[j-1];</span><br><span class=\"line\">          if(t.charAt(i)==t.charAt(j))</span><br><span class=\"line\">              j++;</span><br><span class=\"line\">          next[i]=j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return next;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>学习KMP算法花了我不少的时间，当时看了一直没有特别理解。后来经过自己画图，瞬间明白了；凡事还是要多动手。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>百度百科 <a href=\"[https://baike.baidu.com/item/KMP%E7%AE%97%E6%B3%95/10951804](https://baike.baidu.com/item/KMP算法/10951804)\">KMP算法</a></p>\n<p>阮一峰的博客 <a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">字符串匹配的KMP算法</a></p>\n"},{"title":"Java数据结构与算法","date":"2019-10-16T09:50:39.000Z","mathjax":true,"description":"JAVA数据结构与算法","_content":"\n\n\n# 目录：\n\n1.[前言](#first-say)\n\n3.[输入输出与基本函数](#3)\n\n4.[常用函数](#usually_function)\n\n5.[数学问题](http://wvdon.com/2019/08/02/arithmetic/JAVA_Alg_Math/)\n\n7.[排序](#sort)\n\n8.[栈，队列，链表](#zhan)\n\n9.[搜索](#search)\n\n10.[树](#tree)\n\n11.[图](#map)\n\n12.[动态规划](#drop)\n\n13.[英文篇](#English)\n\n14.[总结](#summary)\n\n15.[板子]()\n\n## <span id=\"first-say\">1.  前言</span>\n\n\n\n> 本文主要以总结自己学习算法的笔记摘要，目的是想记录下自己学习的点点滴滴。\n>\n> 希望能够与大家进行交流，共同提高，如果有什么问题，欢迎大家提出issue\n>\n> 参考资料：《算法笔记》 ，《啊哈！算法》，《算法 第四版》，《java 编程思想》，《数学之美》。\n\n##### 如何去学习\n\n> 在学习过程中我一直在想，如果我是一个小孩子，你要怎么样才能对我讲明白这些知识点，\n>\n> 我不停的反问自己  \n>\n> ```\n> 它是什么？\n> ```\n>\n> ```\n> 它有什么用？\n> ```\n>\n> ```\n> 如何实现它？\n> ```\n>\n> ```\n> 还有没有其他的方法呢？\n> ```\n>\n> 人只有在不停的去审视自己的想法的时候才能走的更快，走的更稳。\n\n","source":"_posts/arithmetic/arithmetic.md","raw":"---\ntitle: 'Java数据结构与算法'\ndate: 2019-10-16 17:50:39\ntags: \n  - java\n  - 数据结构\ncategories: [JAVA数据结构与算法]\nmathjax: true\ndescription: JAVA数据结构与算法\n---\n\n\n\n# 目录：\n\n1.[前言](#first-say)\n\n3.[输入输出与基本函数](#3)\n\n4.[常用函数](#usually_function)\n\n5.[数学问题](http://wvdon.com/2019/08/02/arithmetic/JAVA_Alg_Math/)\n\n7.[排序](#sort)\n\n8.[栈，队列，链表](#zhan)\n\n9.[搜索](#search)\n\n10.[树](#tree)\n\n11.[图](#map)\n\n12.[动态规划](#drop)\n\n13.[英文篇](#English)\n\n14.[总结](#summary)\n\n15.[板子]()\n\n## <span id=\"first-say\">1.  前言</span>\n\n\n\n> 本文主要以总结自己学习算法的笔记摘要，目的是想记录下自己学习的点点滴滴。\n>\n> 希望能够与大家进行交流，共同提高，如果有什么问题，欢迎大家提出issue\n>\n> 参考资料：《算法笔记》 ，《啊哈！算法》，《算法 第四版》，《java 编程思想》，《数学之美》。\n\n##### 如何去学习\n\n> 在学习过程中我一直在想，如果我是一个小孩子，你要怎么样才能对我讲明白这些知识点，\n>\n> 我不停的反问自己  \n>\n> ```\n> 它是什么？\n> ```\n>\n> ```\n> 它有什么用？\n> ```\n>\n> ```\n> 如何实现它？\n> ```\n>\n> ```\n> 还有没有其他的方法呢？\n> ```\n>\n> 人只有在不停的去审视自己的想法的时候才能走的更快，走的更稳。\n\n","slug":"arithmetic/arithmetic","published":1,"updated":"2020-03-22T11:13:25.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5tx001urwv0qurf1hp0","content":"<h1 id=\"目录：\"><a href=\"#目录：\" class=\"headerlink\" title=\"目录：\"></a>目录：</h1><p>1.<a href=\"#first-say\">前言</a></p><p>3.<a href=\"#3\">输入输出与基本函数</a></p><p>4.<a href=\"#usually_function\">常用函数</a></p><p>5.<a href=\"http://wvdon.com/2019/08/02/arithmetic/JAVA_Alg_Math/\">数学问题</a></p><p>7.<a href=\"#sort\">排序</a></p><p>8.<a href=\"#zhan\">栈，队列，链表</a></p><p>9.<a href=\"#search\">搜索</a></p><p>10.<a href=\"#tree\">树</a></p><p>11.<a href=\"#map\">图</a></p><p>12.<a href=\"#drop\">动态规划</a></p><p>13.<a href=\"#English\">英文篇</a></p><p>14.<a href=\"#summary\">总结</a></p><p>15.<a href>板子</a></p><h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.  前言\"></a><span id=\"first-say\">1.  前言</span></h2><blockquote>\n<p>本文主要以总结自己学习算法的笔记摘要，目的是想记录下自己学习的点点滴滴。</p>\n<p>希望能够与大家进行交流，共同提高，如果有什么问题，欢迎大家提出issue</p>\n<p>参考资料：《算法笔记》 ，《啊哈！算法》，《算法 第四版》，《java 编程思想》，《数学之美》。</p>\n</blockquote><a id=\"more\"></a>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h5 id=\"如何去学习\"><a href=\"#如何去学习\" class=\"headerlink\" title=\"如何去学习\"></a>如何去学习</h5><blockquote>\n<p>在学习过程中我一直在想，如果我是一个小孩子，你要怎么样才能对我讲明白这些知识点，</p>\n<p>我不停的反问自己  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 它是什么？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 它有什么用？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 如何实现它？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 还有没有其他的方法呢？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>人只有在不停的去审视自己的想法的时候才能走的更快，走的更稳。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"目录：\"><a href=\"#目录：\" class=\"headerlink\" title=\"目录：\"></a>目录：</h1><p>1.<a href=\"#first-say\">前言</a></p><p>3.<a href=\"#3\">输入输出与基本函数</a></p><p>4.<a href=\"#usually_function\">常用函数</a></p><p>5.<a href=\"http://wvdon.com/2019/08/02/arithmetic/JAVA_Alg_Math/\">数学问题</a></p><p>7.<a href=\"#sort\">排序</a></p><p>8.<a href=\"#zhan\">栈，队列，链表</a></p><p>9.<a href=\"#search\">搜索</a></p><p>10.<a href=\"#tree\">树</a></p><p>11.<a href=\"#map\">图</a></p><p>12.<a href=\"#drop\">动态规划</a></p><p>13.<a href=\"#English\">英文篇</a></p><p>14.<a href=\"#summary\">总结</a></p><p>15.<a href>板子</a></p><h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.  前言\"></a><span id=\"first-say\">1.  前言</span></h2><blockquote>\n<p>本文主要以总结自己学习算法的笔记摘要，目的是想记录下自己学习的点点滴滴。</p>\n<p>希望能够与大家进行交流，共同提高，如果有什么问题，欢迎大家提出issue</p>\n<p>参考资料：《算法笔记》 ，《啊哈！算法》，《算法 第四版》，《java 编程思想》，《数学之美》。</p>\n</blockquote>","more":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h5 id=\"如何去学习\"><a href=\"#如何去学习\" class=\"headerlink\" title=\"如何去学习\"></a>如何去学习</h5><blockquote>\n<p>在学习过程中我一直在想，如果我是一个小孩子，你要怎么样才能对我讲明白这些知识点，</p>\n<p>我不停的反问自己  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 它是什么？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 它有什么用？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 如何实现它？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 还有没有其他的方法呢？</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>人只有在不停的去审视自己的想法的时候才能走的更快，走的更稳。</p>\n</blockquote>\n"},{"title":"PAT_JAVA题解","date":"2019-06-06T12:58:00.000Z","description":"浙江大学PAT甲乙试题题解","_content":"\n\n\n## <span id=\"PAT-A\">2.1 PAT 甲级题解  </span>\n\n\n\n|  ID  |    Title    |                             链接                             | 备注 |\n| :--: | :---------: | :----------------------------------------------------------: | :--: |\n| 1025 | PAT Ranking | [链接](https://blog.csdn.net/WeDon_t/article/details/93044044) |      |\n| 1059 |             |                                                              |      |\n\n\n\n## <span id=\"PAT-B\">2.2 PAT乙级题解</span>\n\n| ID   |      Title       |                             链接                             | 备注 |\n| ---- | :--------------: | :----------------------------------------------------------: | ---- |\n| 1001 |                  |                                                              |      |\n| 1002 |    写出这个数    | [链接](https://blog.csdn.net/WeDon_t/article/details/93043998) |      |\n| 1003 |     我要通过     | [链接](https://blog.csdn.net/WeDon_t/article/details/93044065) |      |\n| 1004 |     成绩排名     | [链接](https://blog.csdn.net/WeDon_t/article/details/93044070) |      |\n|      |                  |                                                              |      |\n| 1007 |    素数对猜想    | [链接](https://blog.csdn.net/WeDon_t/article/details/93044093) |      |\n| 1009 |      说反话      | [链接](https://blog.csdn.net/WeDon_t/article/details/93044025) |      |\n| 1013 |      数素数      |                                                              |      |\n| 1020 |       月饼       | [链接](https://blog.csdn.net/WeDon_t/article/details/93043969) |      |\n| 1022 |    D进制的A+B    | [链接](https://blog.csdn.net/WeDon_t/article/details/93043969) |      |\n| 1023 |     组最小数     | [链接](https://blog.csdn.net/WeDon_t/article/details/93043955) |      |\n| 1032 | 挖掘机技术哪家强 |                                                              |      |\n| 1036 | 跟奥巴马一起编程 | [链接](https://blog.csdn.net/WeDon_t/article/details/93043983) |      |\n|      |                  |                                                              |      |\n\n\n\n\n\n","source":"_posts/code/pat.md","raw":"---\ntitle: \"PAT_JAVA题解\"\ndate: 2019-6-6 20:58:00\ncategories: [JAVA数据结构与算法]\ntags: [java,pat题解]\ndescription: 浙江大学PAT甲乙试题题解\n---\n\n\n\n## <span id=\"PAT-A\">2.1 PAT 甲级题解  </span>\n\n\n\n|  ID  |    Title    |                             链接                             | 备注 |\n| :--: | :---------: | :----------------------------------------------------------: | :--: |\n| 1025 | PAT Ranking | [链接](https://blog.csdn.net/WeDon_t/article/details/93044044) |      |\n| 1059 |             |                                                              |      |\n\n\n\n## <span id=\"PAT-B\">2.2 PAT乙级题解</span>\n\n| ID   |      Title       |                             链接                             | 备注 |\n| ---- | :--------------: | :----------------------------------------------------------: | ---- |\n| 1001 |                  |                                                              |      |\n| 1002 |    写出这个数    | [链接](https://blog.csdn.net/WeDon_t/article/details/93043998) |      |\n| 1003 |     我要通过     | [链接](https://blog.csdn.net/WeDon_t/article/details/93044065) |      |\n| 1004 |     成绩排名     | [链接](https://blog.csdn.net/WeDon_t/article/details/93044070) |      |\n|      |                  |                                                              |      |\n| 1007 |    素数对猜想    | [链接](https://blog.csdn.net/WeDon_t/article/details/93044093) |      |\n| 1009 |      说反话      | [链接](https://blog.csdn.net/WeDon_t/article/details/93044025) |      |\n| 1013 |      数素数      |                                                              |      |\n| 1020 |       月饼       | [链接](https://blog.csdn.net/WeDon_t/article/details/93043969) |      |\n| 1022 |    D进制的A+B    | [链接](https://blog.csdn.net/WeDon_t/article/details/93043969) |      |\n| 1023 |     组最小数     | [链接](https://blog.csdn.net/WeDon_t/article/details/93043955) |      |\n| 1032 | 挖掘机技术哪家强 |                                                              |      |\n| 1036 | 跟奥巴马一起编程 | [链接](https://blog.csdn.net/WeDon_t/article/details/93043983) |      |\n|      |                  |                                                              |      |\n\n\n\n\n\n","slug":"code/pat","published":1,"updated":"2020-03-22T11:13:25.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5u0001xrwv02xhpgk63","content":"<h2 id=\"2-1-PAT-甲级题解\"><a href=\"#2-1-PAT-甲级题解\" class=\"headerlink\" title=\"2.1 PAT 甲级题解  \"></a><span id=\"PAT-A\">2.1 PAT 甲级题解  </span></h2><table>\n<thead>\n<tr>\n<th align=\"center\">ID</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">链接</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1025</td>\n<td align=\"center\">PAT Ranking</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044044\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">1059</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-2-PAT乙级题解\"><a href=\"#2-2-PAT乙级题解\" class=\"headerlink\" title=\"2.2 PAT乙级题解\"></a><span id=\"PAT-B\">2.2 PAT乙级题解</span></h2><table>\n<thead>\n<tr>\n<th>ID</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">链接</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1001</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1002</td>\n<td align=\"center\">写出这个数</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043998\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1003</td>\n<td align=\"center\">我要通过</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044065\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1004</td>\n<td align=\"center\">成绩排名</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044070\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1007</td>\n<td align=\"center\">素数对猜想</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044093\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1009</td>\n<td align=\"center\">说反话</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044025\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1013</td>\n<td align=\"center\">数素数</td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1020</td>\n<td align=\"center\">月饼</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043969\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1022</td>\n<td align=\"center\">D进制的A+B</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043969\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1023</td>\n<td align=\"center\">组最小数</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043955\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1032</td>\n<td align=\"center\">挖掘机技术哪家强</td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1036</td>\n<td align=\"center\">跟奥巴马一起编程</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043983\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2-1-PAT-甲级题解\"><a href=\"#2-1-PAT-甲级题解\" class=\"headerlink\" title=\"2.1 PAT 甲级题解  \"></a><span id=\"PAT-A\">2.1 PAT 甲级题解  </span></h2><table>\n<thead>\n<tr>\n<th align=\"center\">ID</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">链接</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1025</td>\n<td align=\"center\">PAT Ranking</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044044\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">1059</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-2-PAT乙级题解\"><a href=\"#2-2-PAT乙级题解\" class=\"headerlink\" title=\"2.2 PAT乙级题解\"></a><span id=\"PAT-B\">2.2 PAT乙级题解</span></h2><table>\n<thead>\n<tr>\n<th>ID</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">链接</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1001</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1002</td>\n<td align=\"center\">写出这个数</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043998\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1003</td>\n<td align=\"center\">我要通过</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044065\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1004</td>\n<td align=\"center\">成绩排名</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044070\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1007</td>\n<td align=\"center\">素数对猜想</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044093\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1009</td>\n<td align=\"center\">说反话</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93044025\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1013</td>\n<td align=\"center\">数素数</td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1020</td>\n<td align=\"center\">月饼</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043969\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1022</td>\n<td align=\"center\">D进制的A+B</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043969\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1023</td>\n<td align=\"center\">组最小数</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043955\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td>1032</td>\n<td align=\"center\">挖掘机技术哪家强</td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n<tr>\n<td>1036</td>\n<td align=\"center\">跟奥巴马一起编程</td>\n<td align=\"center\"><a href=\"https://blog.csdn.net/WeDon_t/article/details/93043983\" target=\"_blank\" rel=\"noopener\">链接</a></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"Linux命令缩写一揽表","date":"2019-10-18T07:50:39.000Z","mathjax":true,"description":"生产力工具","_content":"\n\n\n## 摘要\n\n每每都会忘记linux命令，不过我记得全拼的时候可能就能想起来了。                                                                                                     \n\n​                                                                                                                                                                              \n\n> ls：list(列出目录内容)\n>\n> cd：Change Directory（改变目录）\n>\n> su:switch user 切换用户\n>\n> rpm:redhat package manager 红帽子打包管理器\n>\n> pwd:print work directory 打印当前目录显示出当前工作目录的绝对路径\n>\n> ps: process status(进程状态，类似于 windows 的任务管理器)\n>\n> 常用参数：－auxf\n>\n> ps -auxf 显示进程状态\n>\n> df: disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。\n>\n> rpm：即 RedHat Package Management，是 RedHat 的发明之一\n>\n> rmdir：Remove Directory（删除目录）\n>\n> rm：Remove（删除目录或文件）\n>\n> cat: concatenate 连锁 cat file1 file2>>file3把文件1和文件2的内容联合起来放到 file3中\n>\n> insmod: install module,载入模块\n>\n> ln -s : link -soft 创建一个软链接，相当于创建一个快捷方式\n>\n> mkdir：Make Directory(创建目录\n>\n> touch\n>\n> man: Manual\n>\n> pwd：Print working directory\n>\n> su：Swith user\n>\n> cd：Change directory\n>\n> ls：List files\n>\n> ps：Process Status\n>\n> mkdir：Make directory\n>\n> rmdir：Remove directory\n>\n> mkfs: Make file system\n>\n> fsck：File system check\n>\n> cat: Concatenate\n>\n> uname: Unix name\n>\n> df: Disk free\n>\n> du: Disk usage\n>\n> lsmod: List modules\n>\n> mv: Move file\n>\n> rm: Remove file\n>\n> cp: Copy file\n>\n> ln: Link files\n>\n> fg: Foreground\n>\n> bg: Background\n>\n> chown: Change owner\n>\n> chgrp: Change group\n>\n> chmod: Change mode\n>\n> umount: Unmount\n>\n> dd: 本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”\n>\n> tar：Tape archive\n>\n> ldd：List dynamic dependencies\n>\n> insmod：Install module\n>\n> rmmod：Remove module\n>\n> lsmod：List module\n>\n> 文件结尾的\"rc\"（如.bashrc、.xinitrc 等）：Resource configuration\n>\n> Knnxxx / Snnxxx（位于 rcx.d 目录下）：K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）\n>\n> .a（扩展名 a）：Archive，static library\n>\n> .so（扩展名 so）：Shared object，dynamically linked library\n>\n> .o（扩展名 o）：Object file，complied result of C/C++ source file\n>\n> RPM：Red hat package manager\n>\n> dpkg：Debian package manager\n>\n> apt：Advanced package tool（Debian 或基于 Debian 的发行版中提供）\n>\n> bin = BINaries\n>\n> /dev = DEVices\n>\n> /etc = ETCetera\n>\n> /lib = LIBrary\n>\n> /proc = PROCesses\n>\n> /sbin = Superuser BINaries\n>\n> /tmp = TeMPorary\n>\n> /usr = Unix Shared Resources\n>\n> /var = VARiable ?\n>\n> FIFO = First In, First Out\n>\n> GRUB = GRand Unified Bootloader\n>\n> IFS = Internal Field Seperators\n>\n> LILO = LInux LOader\n>\n> MySQL = My 是最初作者女儿的名字，SQL = Structured Query Language\n>\n> PHP = Personal Home Page Tools = PHP Hypertext Preprocessor\n>\n> PS = Prompt String\n>\n> Perl = \"Pratical Extraction and Report Language\" = \"Pathologically Eclectic Rubbish Lister\"\n>\n> Python 得名于电视剧 Monty Python's Flying Circus\n>\n> Tcl = Tool Command Language\n>\n> Tk = ToolKit\n>\n> VT = Video Terminal\n>\n> YaST = Yet Another Setup Tool\n>\n> apache = \"a patchy\" server\n>\n> apt = Advanced Packaging Tool\n>\n> ar = archiver\n>\n> as = assembler\n>\n> awk = \"Aho Weiberger and Kernighan\" 三个作者的姓的第一个字母\n>\n> bash = Bourne Again SHell\n>\n> bc = Basic (Better) Calculator\n>\n> bg = BackGround\n>\n> biff = 作者 Heidi Stettner 在 U.C.Berkely 养的一条狗,喜欢对邮递员汪汪叫。\n>\n> cal = CALendar\n>\n> cat = CATenate\n>\n> cd = Change Directory\n>\n> chgrp = CHange GRouP\n>\n> chmod = CHange MODe\n>\n> chown = CHange OWNer\n>\n> chsh = CHange SHell\n>\n> cmp = compare\n>\n> cobra = Common Object Request Broker Architecture\n>\n> comm = common\n>\n> cp = CoPy\n>\n> cpio = CoPy In and Out\n>\n> cpp = C Pre Processor\n>\n> cron = Chronos 希腊文时间\n>\n> cups = Common Unix Printing System\n>\n> cvs = Current Version System\n>\n> daemon = Disk And Execution MONitor\n>\n> dc = Desk Calculator\n>\n> dd = Disk Dump\n>\n> df = Disk Free\n>\n> diff = DIFFerence\n>\n> dmesg = diagnostic message\n>\n> du = Disk Usage\n>\n> ed = editor\n>\n> egrep = Extended GREP\n>\n> elf = Extensible Linking Format\n>\n> elm = ELectronic Mail\n>\n> emacs = Editor MACroS\n>\n> eval = EVALuate\n>\n> ex = EXtended\n>\n> exec = EXECute\n>\n> fd = file descriptors\n>\n> fg = ForeGround\n>\n> fgrep = Fixed GREP\n>\n> fmt = format\n>\n> fsck = File System ChecK\n>\n> fstab = FileSystem TABle\n>\n> fvwm = F*** Virtual Window Manager\n>\n> gawk = GNU AWK\n>\n> gpg = GNU Privacy Guard\n>\n> groff = GNU troff\n>\n> hal = Hardware Abstraction Layer\n>\n> joe = Joe's Own Editor\n>\n> ksh = Korn SHell\n>\n> lame = Lame Ain't an MP3 Encoder\n>\n> lex = LEXical analyser\n>\n> lisp = LISt Processing = Lots of Irritating Superfluous Parentheses\n>\n> ln = LiNk\n>\n> lpr = Line PRint\n>\n> ls = list\n>\n> lsof = LiSt Open Files\n>\n> m4 = Macro processor Version 4\n>\n> man = MANual pages\n>\n> mawk = Mike Brennan's AWK\n>\n> mc = Midnight Commander\n>\n> mkfs = MaKe FileSystem\n>\n> mknod = MaKe NODe\n>\n> motd = Message of The Day\n>\n> mozilla = MOsaic GodZILLa\n>\n> mtab = Mount TABle\n>\n> mv = MoVe\n>\n> nano = Nano's ANOther editor\n>\n> nawk = New AWK\n>\n> nl = Number of Lines\n>\n> nm = names\n>\n> nohup = No HangUP\n>\n> nroff = New ROFF\n>\n> od = Octal Dump\n>\n> passwd = PASSWorD\n>\n> pg = pager\n>\n> pico = PIne's message COmposition editor\n>\n> pine = \"Program for Internet News & Email\" = \"Pine is not Elm\"\n>\n> ping = 拟声又 = Packet InterNet Grouper\n>\n> pirntcap = PRINTer CAPability\n>\n> popd = POP Directory\n>\n> pr = pre\n>\n> printf = PRINT Formatted\n>\n> ps = Processes Status\n>\n> pty = pseudo tty\n>\n> pushd = PUSH Directory\n>\n> pwd = Print Working Directory\n>\n> rc = runcom = run command, rc 还是 plan9的 shell\n>\n> rev = REVerse\n>\n> rm = ReMove\n>\n> rn = Read News\n>\n> roff = RunOFF\n>\n> rpm = RPM Package Manager = RedHat Package Manager\n>\n> rsh, rlogin, rvim 中的 r = Remote\n>\n> rxvt = ouR XVT\n>\n> seamoneky = 我\n>\n> sed = Stream EDitor\n>\n> seq = SEQuence\n>\n> shar = SHell ARchive\n>\n> slrn = S-Lang rn\n>\n> ssh = Secure SHell\n>\n> ssl = Secure Sockets Layer\n>\n> stty = Set TTY\n>\n> su = Substitute User\n>\n> svn = SubVersioN\n>\n> tar = Tape ARchive\n>\n> tcsh = TENEX C shell\n>\n> tee = T (T 形水管接口)\n>\n> telnet = TEminaL over Network\n>\n> termcap = terminal capability\n>\n> terminfo = terminal information\n>\n> tex = τ\n> ","source":"_posts/linux/2019-10-17-Linux命令缩写一览表.md","raw":"---\ntitle: 'Linux命令缩写一揽表'\ndate: 2019-10-18 15:50:39\ntags: \n- linux\ncategories: [tools]\nmathjax: true\ndescription: 生产力工具\n---\n\n\n\n## 摘要\n\n每每都会忘记linux命令，不过我记得全拼的时候可能就能想起来了。                                                                                                     \n\n​                                                                                                                                                                              \n\n> ls：list(列出目录内容)\n>\n> cd：Change Directory（改变目录）\n>\n> su:switch user 切换用户\n>\n> rpm:redhat package manager 红帽子打包管理器\n>\n> pwd:print work directory 打印当前目录显示出当前工作目录的绝对路径\n>\n> ps: process status(进程状态，类似于 windows 的任务管理器)\n>\n> 常用参数：－auxf\n>\n> ps -auxf 显示进程状态\n>\n> df: disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。\n>\n> rpm：即 RedHat Package Management，是 RedHat 的发明之一\n>\n> rmdir：Remove Directory（删除目录）\n>\n> rm：Remove（删除目录或文件）\n>\n> cat: concatenate 连锁 cat file1 file2>>file3把文件1和文件2的内容联合起来放到 file3中\n>\n> insmod: install module,载入模块\n>\n> ln -s : link -soft 创建一个软链接，相当于创建一个快捷方式\n>\n> mkdir：Make Directory(创建目录\n>\n> touch\n>\n> man: Manual\n>\n> pwd：Print working directory\n>\n> su：Swith user\n>\n> cd：Change directory\n>\n> ls：List files\n>\n> ps：Process Status\n>\n> mkdir：Make directory\n>\n> rmdir：Remove directory\n>\n> mkfs: Make file system\n>\n> fsck：File system check\n>\n> cat: Concatenate\n>\n> uname: Unix name\n>\n> df: Disk free\n>\n> du: Disk usage\n>\n> lsmod: List modules\n>\n> mv: Move file\n>\n> rm: Remove file\n>\n> cp: Copy file\n>\n> ln: Link files\n>\n> fg: Foreground\n>\n> bg: Background\n>\n> chown: Change owner\n>\n> chgrp: Change group\n>\n> chmod: Change mode\n>\n> umount: Unmount\n>\n> dd: 本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”\n>\n> tar：Tape archive\n>\n> ldd：List dynamic dependencies\n>\n> insmod：Install module\n>\n> rmmod：Remove module\n>\n> lsmod：List module\n>\n> 文件结尾的\"rc\"（如.bashrc、.xinitrc 等）：Resource configuration\n>\n> Knnxxx / Snnxxx（位于 rcx.d 目录下）：K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）\n>\n> .a（扩展名 a）：Archive，static library\n>\n> .so（扩展名 so）：Shared object，dynamically linked library\n>\n> .o（扩展名 o）：Object file，complied result of C/C++ source file\n>\n> RPM：Red hat package manager\n>\n> dpkg：Debian package manager\n>\n> apt：Advanced package tool（Debian 或基于 Debian 的发行版中提供）\n>\n> bin = BINaries\n>\n> /dev = DEVices\n>\n> /etc = ETCetera\n>\n> /lib = LIBrary\n>\n> /proc = PROCesses\n>\n> /sbin = Superuser BINaries\n>\n> /tmp = TeMPorary\n>\n> /usr = Unix Shared Resources\n>\n> /var = VARiable ?\n>\n> FIFO = First In, First Out\n>\n> GRUB = GRand Unified Bootloader\n>\n> IFS = Internal Field Seperators\n>\n> LILO = LInux LOader\n>\n> MySQL = My 是最初作者女儿的名字，SQL = Structured Query Language\n>\n> PHP = Personal Home Page Tools = PHP Hypertext Preprocessor\n>\n> PS = Prompt String\n>\n> Perl = \"Pratical Extraction and Report Language\" = \"Pathologically Eclectic Rubbish Lister\"\n>\n> Python 得名于电视剧 Monty Python's Flying Circus\n>\n> Tcl = Tool Command Language\n>\n> Tk = ToolKit\n>\n> VT = Video Terminal\n>\n> YaST = Yet Another Setup Tool\n>\n> apache = \"a patchy\" server\n>\n> apt = Advanced Packaging Tool\n>\n> ar = archiver\n>\n> as = assembler\n>\n> awk = \"Aho Weiberger and Kernighan\" 三个作者的姓的第一个字母\n>\n> bash = Bourne Again SHell\n>\n> bc = Basic (Better) Calculator\n>\n> bg = BackGround\n>\n> biff = 作者 Heidi Stettner 在 U.C.Berkely 养的一条狗,喜欢对邮递员汪汪叫。\n>\n> cal = CALendar\n>\n> cat = CATenate\n>\n> cd = Change Directory\n>\n> chgrp = CHange GRouP\n>\n> chmod = CHange MODe\n>\n> chown = CHange OWNer\n>\n> chsh = CHange SHell\n>\n> cmp = compare\n>\n> cobra = Common Object Request Broker Architecture\n>\n> comm = common\n>\n> cp = CoPy\n>\n> cpio = CoPy In and Out\n>\n> cpp = C Pre Processor\n>\n> cron = Chronos 希腊文时间\n>\n> cups = Common Unix Printing System\n>\n> cvs = Current Version System\n>\n> daemon = Disk And Execution MONitor\n>\n> dc = Desk Calculator\n>\n> dd = Disk Dump\n>\n> df = Disk Free\n>\n> diff = DIFFerence\n>\n> dmesg = diagnostic message\n>\n> du = Disk Usage\n>\n> ed = editor\n>\n> egrep = Extended GREP\n>\n> elf = Extensible Linking Format\n>\n> elm = ELectronic Mail\n>\n> emacs = Editor MACroS\n>\n> eval = EVALuate\n>\n> ex = EXtended\n>\n> exec = EXECute\n>\n> fd = file descriptors\n>\n> fg = ForeGround\n>\n> fgrep = Fixed GREP\n>\n> fmt = format\n>\n> fsck = File System ChecK\n>\n> fstab = FileSystem TABle\n>\n> fvwm = F*** Virtual Window Manager\n>\n> gawk = GNU AWK\n>\n> gpg = GNU Privacy Guard\n>\n> groff = GNU troff\n>\n> hal = Hardware Abstraction Layer\n>\n> joe = Joe's Own Editor\n>\n> ksh = Korn SHell\n>\n> lame = Lame Ain't an MP3 Encoder\n>\n> lex = LEXical analyser\n>\n> lisp = LISt Processing = Lots of Irritating Superfluous Parentheses\n>\n> ln = LiNk\n>\n> lpr = Line PRint\n>\n> ls = list\n>\n> lsof = LiSt Open Files\n>\n> m4 = Macro processor Version 4\n>\n> man = MANual pages\n>\n> mawk = Mike Brennan's AWK\n>\n> mc = Midnight Commander\n>\n> mkfs = MaKe FileSystem\n>\n> mknod = MaKe NODe\n>\n> motd = Message of The Day\n>\n> mozilla = MOsaic GodZILLa\n>\n> mtab = Mount TABle\n>\n> mv = MoVe\n>\n> nano = Nano's ANOther editor\n>\n> nawk = New AWK\n>\n> nl = Number of Lines\n>\n> nm = names\n>\n> nohup = No HangUP\n>\n> nroff = New ROFF\n>\n> od = Octal Dump\n>\n> passwd = PASSWorD\n>\n> pg = pager\n>\n> pico = PIne's message COmposition editor\n>\n> pine = \"Program for Internet News & Email\" = \"Pine is not Elm\"\n>\n> ping = 拟声又 = Packet InterNet Grouper\n>\n> pirntcap = PRINTer CAPability\n>\n> popd = POP Directory\n>\n> pr = pre\n>\n> printf = PRINT Formatted\n>\n> ps = Processes Status\n>\n> pty = pseudo tty\n>\n> pushd = PUSH Directory\n>\n> pwd = Print Working Directory\n>\n> rc = runcom = run command, rc 还是 plan9的 shell\n>\n> rev = REVerse\n>\n> rm = ReMove\n>\n> rn = Read News\n>\n> roff = RunOFF\n>\n> rpm = RPM Package Manager = RedHat Package Manager\n>\n> rsh, rlogin, rvim 中的 r = Remote\n>\n> rxvt = ouR XVT\n>\n> seamoneky = 我\n>\n> sed = Stream EDitor\n>\n> seq = SEQuence\n>\n> shar = SHell ARchive\n>\n> slrn = S-Lang rn\n>\n> ssh = Secure SHell\n>\n> ssl = Secure Sockets Layer\n>\n> stty = Set TTY\n>\n> su = Substitute User\n>\n> svn = SubVersioN\n>\n> tar = Tape ARchive\n>\n> tcsh = TENEX C shell\n>\n> tee = T (T 形水管接口)\n>\n> telnet = TEminaL over Network\n>\n> termcap = terminal capability\n>\n> terminfo = terminal information\n>\n> tex = τ\n> ","slug":"linux/2019-10-17-Linux命令缩写一览表","published":1,"updated":"2020-03-22T11:13:25.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5u1001yrwv0j0qjbei0","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>每每都会忘记linux命令，不过我记得全拼的时候可能就能想起来了。                                                                                                     </p><a id=\"more\"></a>\n<p>​                                                                                                                                                                              </p>\n<blockquote>\n<p>ls：list(列出目录内容)</p>\n<p>cd：Change Directory（改变目录）</p>\n<p>su:switch user 切换用户</p>\n<p>rpm:redhat package manager 红帽子打包管理器</p>\n<p>pwd:print work directory 打印当前目录显示出当前工作目录的绝对路径</p>\n<p>ps: process status(进程状态，类似于 windows 的任务管理器)</p>\n<p>常用参数：－auxf</p>\n<p>ps -auxf 显示进程状态</p>\n<p>df: disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</p>\n<p>rpm：即 RedHat Package Management，是 RedHat 的发明之一</p>\n<p>rmdir：Remove Directory（删除目录）</p>\n<p>rm：Remove（删除目录或文件）</p>\n<p>cat: concatenate 连锁 cat file1 file2&gt;&gt;file3把文件1和文件2的内容联合起来放到 file3中</p>\n<p>insmod: install module,载入模块</p>\n<p>ln -s : link -soft 创建一个软链接，相当于创建一个快捷方式</p>\n<p>mkdir：Make Directory(创建目录</p>\n<p>touch</p>\n<p>man: Manual</p>\n<p>pwd：Print working directory</p>\n<p>su：Swith user</p>\n<p>cd：Change directory</p>\n<p>ls：List files</p>\n<p>ps：Process Status</p>\n<p>mkdir：Make directory</p>\n<p>rmdir：Remove directory</p>\n<p>mkfs: Make file system</p>\n<p>fsck：File system check</p>\n<p>cat: Concatenate</p>\n<p>uname: Unix name</p>\n<p>df: Disk free</p>\n<p>du: Disk usage</p>\n<p>lsmod: List modules</p>\n<p>mv: Move file</p>\n<p>rm: Remove file</p>\n<p>cp: Copy file</p>\n<p>ln: Link files</p>\n<p>fg: Foreground</p>\n<p>bg: Background</p>\n<p>chown: Change owner</p>\n<p>chgrp: Change group</p>\n<p>chmod: Change mode</p>\n<p>umount: Unmount</p>\n<p>dd: 本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”</p>\n<p>tar：Tape archive</p>\n<p>ldd：List dynamic dependencies</p>\n<p>insmod：Install module</p>\n<p>rmmod：Remove module</p>\n<p>lsmod：List module</p>\n<p>文件结尾的”rc”（如.bashrc、.xinitrc 等）：Resource configuration</p>\n<p>Knnxxx / Snnxxx（位于 rcx.d 目录下）：K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）</p>\n<p>.a（扩展名 a）：Archive，static library</p>\n<p>.so（扩展名 so）：Shared object，dynamically linked library</p>\n<p>.o（扩展名 o）：Object file，complied result of C/C++ source file</p>\n<p>RPM：Red hat package manager</p>\n<p>dpkg：Debian package manager</p>\n<p>apt：Advanced package tool（Debian 或基于 Debian 的发行版中提供）</p>\n<p>bin = BINaries</p>\n<p>/dev = DEVices</p>\n<p>/etc = ETCetera</p>\n<p>/lib = LIBrary</p>\n<p>/proc = PROCesses</p>\n<p>/sbin = Superuser BINaries</p>\n<p>/tmp = TeMPorary</p>\n<p>/usr = Unix Shared Resources</p>\n<p>/var = VARiable ?</p>\n<p>FIFO = First In, First Out</p>\n<p>GRUB = GRand Unified Bootloader</p>\n<p>IFS = Internal Field Seperators</p>\n<p>LILO = LInux LOader</p>\n<p>MySQL = My 是最初作者女儿的名字，SQL = Structured Query Language</p>\n<p>PHP = Personal Home Page Tools = PHP Hypertext Preprocessor</p>\n<p>PS = Prompt String</p>\n<p>Perl = “Pratical Extraction and Report Language” = “Pathologically Eclectic Rubbish Lister”</p>\n<p>Python 得名于电视剧 Monty Python’s Flying Circus</p>\n<p>Tcl = Tool Command Language</p>\n<p>Tk = ToolKit</p>\n<p>VT = Video Terminal</p>\n<p>YaST = Yet Another Setup Tool</p>\n<p>apache = “a patchy” server</p>\n<p>apt = Advanced Packaging Tool</p>\n<p>ar = archiver</p>\n<p>as = assembler</p>\n<p>awk = “Aho Weiberger and Kernighan” 三个作者的姓的第一个字母</p>\n<p>bash = Bourne Again SHell</p>\n<p>bc = Basic (Better) Calculator</p>\n<p>bg = BackGround</p>\n<p>biff = 作者 Heidi Stettner 在 U.C.Berkely 养的一条狗,喜欢对邮递员汪汪叫。</p>\n<p>cal = CALendar</p>\n<p>cat = CATenate</p>\n<p>cd = Change Directory</p>\n<p>chgrp = CHange GRouP</p>\n<p>chmod = CHange MODe</p>\n<p>chown = CHange OWNer</p>\n<p>chsh = CHange SHell</p>\n<p>cmp = compare</p>\n<p>cobra = Common Object Request Broker Architecture</p>\n<p>comm = common</p>\n<p>cp = CoPy</p>\n<p>cpio = CoPy In and Out</p>\n<p>cpp = C Pre Processor</p>\n<p>cron = Chronos 希腊文时间</p>\n<p>cups = Common Unix Printing System</p>\n<p>cvs = Current Version System</p>\n<p>daemon = Disk And Execution MONitor</p>\n<p>dc = Desk Calculator</p>\n<p>dd = Disk Dump</p>\n<p>df = Disk Free</p>\n<p>diff = DIFFerence</p>\n<p>dmesg = diagnostic message</p>\n<p>du = Disk Usage</p>\n<p>ed = editor</p>\n<p>egrep = Extended GREP</p>\n<p>elf = Extensible Linking Format</p>\n<p>elm = ELectronic Mail</p>\n<p>emacs = Editor MACroS</p>\n<p>eval = EVALuate</p>\n<p>ex = EXtended</p>\n<p>exec = EXECute</p>\n<p>fd = file descriptors</p>\n<p>fg = ForeGround</p>\n<p>fgrep = Fixed GREP</p>\n<p>fmt = format</p>\n<p>fsck = File System ChecK</p>\n<p>fstab = FileSystem TABle</p>\n<p>fvwm = F*** Virtual Window Manager</p>\n<p>gawk = GNU AWK</p>\n<p>gpg = GNU Privacy Guard</p>\n<p>groff = GNU troff</p>\n<p>hal = Hardware Abstraction Layer</p>\n<p>joe = Joe’s Own Editor</p>\n<p>ksh = Korn SHell</p>\n<p>lame = Lame Ain’t an MP3 Encoder</p>\n<p>lex = LEXical analyser</p>\n<p>lisp = LISt Processing = Lots of Irritating Superfluous Parentheses</p>\n<p>ln = LiNk</p>\n<p>lpr = Line PRint</p>\n<p>ls = list</p>\n<p>lsof = LiSt Open Files</p>\n<p>m4 = Macro processor Version 4</p>\n<p>man = MANual pages</p>\n<p>mawk = Mike Brennan’s AWK</p>\n<p>mc = Midnight Commander</p>\n<p>mkfs = MaKe FileSystem</p>\n<p>mknod = MaKe NODe</p>\n<p>motd = Message of The Day</p>\n<p>mozilla = MOsaic GodZILLa</p>\n<p>mtab = Mount TABle</p>\n<p>mv = MoVe</p>\n<p>nano = Nano’s ANOther editor</p>\n<p>nawk = New AWK</p>\n<p>nl = Number of Lines</p>\n<p>nm = names</p>\n<p>nohup = No HangUP</p>\n<p>nroff = New ROFF</p>\n<p>od = Octal Dump</p>\n<p>passwd = PASSWorD</p>\n<p>pg = pager</p>\n<p>pico = PIne’s message COmposition editor</p>\n<p>pine = “Program for Internet News &amp; Email” = “Pine is not Elm”</p>\n<p>ping = 拟声又 = Packet InterNet Grouper</p>\n<p>pirntcap = PRINTer CAPability</p>\n<p>popd = POP Directory</p>\n<p>pr = pre</p>\n<p>printf = PRINT Formatted</p>\n<p>ps = Processes Status</p>\n<p>pty = pseudo tty</p>\n<p>pushd = PUSH Directory</p>\n<p>pwd = Print Working Directory</p>\n<p>rc = runcom = run command, rc 还是 plan9的 shell</p>\n<p>rev = REVerse</p>\n<p>rm = ReMove</p>\n<p>rn = Read News</p>\n<p>roff = RunOFF</p>\n<p>rpm = RPM Package Manager = RedHat Package Manager</p>\n<p>rsh, rlogin, rvim 中的 r = Remote</p>\n<p>rxvt = ouR XVT</p>\n<p>seamoneky = 我</p>\n<p>sed = Stream EDitor</p>\n<p>seq = SEQuence</p>\n<p>shar = SHell ARchive</p>\n<p>slrn = S-Lang rn</p>\n<p>ssh = Secure SHell</p>\n<p>ssl = Secure Sockets Layer</p>\n<p>stty = Set TTY</p>\n<p>su = Substitute User</p>\n<p>svn = SubVersioN</p>\n<p>tar = Tape ARchive</p>\n<p>tcsh = TENEX C shell</p>\n<p>tee = T (T 形水管接口)</p>\n<p>telnet = TEminaL over Network</p>\n<p>termcap = terminal capability</p>\n<p>terminfo = terminal information</p>\n<p>tex = τ</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>每每都会忘记linux命令，不过我记得全拼的时候可能就能想起来了。                                                                                                     </p>","more":"\n<p>​                                                                                                                                                                              </p>\n<blockquote>\n<p>ls：list(列出目录内容)</p>\n<p>cd：Change Directory（改变目录）</p>\n<p>su:switch user 切换用户</p>\n<p>rpm:redhat package manager 红帽子打包管理器</p>\n<p>pwd:print work directory 打印当前目录显示出当前工作目录的绝对路径</p>\n<p>ps: process status(进程状态，类似于 windows 的任务管理器)</p>\n<p>常用参数：－auxf</p>\n<p>ps -auxf 显示进程状态</p>\n<p>df: disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</p>\n<p>rpm：即 RedHat Package Management，是 RedHat 的发明之一</p>\n<p>rmdir：Remove Directory（删除目录）</p>\n<p>rm：Remove（删除目录或文件）</p>\n<p>cat: concatenate 连锁 cat file1 file2&gt;&gt;file3把文件1和文件2的内容联合起来放到 file3中</p>\n<p>insmod: install module,载入模块</p>\n<p>ln -s : link -soft 创建一个软链接，相当于创建一个快捷方式</p>\n<p>mkdir：Make Directory(创建目录</p>\n<p>touch</p>\n<p>man: Manual</p>\n<p>pwd：Print working directory</p>\n<p>su：Swith user</p>\n<p>cd：Change directory</p>\n<p>ls：List files</p>\n<p>ps：Process Status</p>\n<p>mkdir：Make directory</p>\n<p>rmdir：Remove directory</p>\n<p>mkfs: Make file system</p>\n<p>fsck：File system check</p>\n<p>cat: Concatenate</p>\n<p>uname: Unix name</p>\n<p>df: Disk free</p>\n<p>du: Disk usage</p>\n<p>lsmod: List modules</p>\n<p>mv: Move file</p>\n<p>rm: Remove file</p>\n<p>cp: Copy file</p>\n<p>ln: Link files</p>\n<p>fg: Foreground</p>\n<p>bg: Background</p>\n<p>chown: Change owner</p>\n<p>chgrp: Change group</p>\n<p>chmod: Change mode</p>\n<p>umount: Unmount</p>\n<p>dd: 本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”</p>\n<p>tar：Tape archive</p>\n<p>ldd：List dynamic dependencies</p>\n<p>insmod：Install module</p>\n<p>rmmod：Remove module</p>\n<p>lsmod：List module</p>\n<p>文件结尾的”rc”（如.bashrc、.xinitrc 等）：Resource configuration</p>\n<p>Knnxxx / Snnxxx（位于 rcx.d 目录下）：K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）</p>\n<p>.a（扩展名 a）：Archive，static library</p>\n<p>.so（扩展名 so）：Shared object，dynamically linked library</p>\n<p>.o（扩展名 o）：Object file，complied result of C/C++ source file</p>\n<p>RPM：Red hat package manager</p>\n<p>dpkg：Debian package manager</p>\n<p>apt：Advanced package tool（Debian 或基于 Debian 的发行版中提供）</p>\n<p>bin = BINaries</p>\n<p>/dev = DEVices</p>\n<p>/etc = ETCetera</p>\n<p>/lib = LIBrary</p>\n<p>/proc = PROCesses</p>\n<p>/sbin = Superuser BINaries</p>\n<p>/tmp = TeMPorary</p>\n<p>/usr = Unix Shared Resources</p>\n<p>/var = VARiable ?</p>\n<p>FIFO = First In, First Out</p>\n<p>GRUB = GRand Unified Bootloader</p>\n<p>IFS = Internal Field Seperators</p>\n<p>LILO = LInux LOader</p>\n<p>MySQL = My 是最初作者女儿的名字，SQL = Structured Query Language</p>\n<p>PHP = Personal Home Page Tools = PHP Hypertext Preprocessor</p>\n<p>PS = Prompt String</p>\n<p>Perl = “Pratical Extraction and Report Language” = “Pathologically Eclectic Rubbish Lister”</p>\n<p>Python 得名于电视剧 Monty Python’s Flying Circus</p>\n<p>Tcl = Tool Command Language</p>\n<p>Tk = ToolKit</p>\n<p>VT = Video Terminal</p>\n<p>YaST = Yet Another Setup Tool</p>\n<p>apache = “a patchy” server</p>\n<p>apt = Advanced Packaging Tool</p>\n<p>ar = archiver</p>\n<p>as = assembler</p>\n<p>awk = “Aho Weiberger and Kernighan” 三个作者的姓的第一个字母</p>\n<p>bash = Bourne Again SHell</p>\n<p>bc = Basic (Better) Calculator</p>\n<p>bg = BackGround</p>\n<p>biff = 作者 Heidi Stettner 在 U.C.Berkely 养的一条狗,喜欢对邮递员汪汪叫。</p>\n<p>cal = CALendar</p>\n<p>cat = CATenate</p>\n<p>cd = Change Directory</p>\n<p>chgrp = CHange GRouP</p>\n<p>chmod = CHange MODe</p>\n<p>chown = CHange OWNer</p>\n<p>chsh = CHange SHell</p>\n<p>cmp = compare</p>\n<p>cobra = Common Object Request Broker Architecture</p>\n<p>comm = common</p>\n<p>cp = CoPy</p>\n<p>cpio = CoPy In and Out</p>\n<p>cpp = C Pre Processor</p>\n<p>cron = Chronos 希腊文时间</p>\n<p>cups = Common Unix Printing System</p>\n<p>cvs = Current Version System</p>\n<p>daemon = Disk And Execution MONitor</p>\n<p>dc = Desk Calculator</p>\n<p>dd = Disk Dump</p>\n<p>df = Disk Free</p>\n<p>diff = DIFFerence</p>\n<p>dmesg = diagnostic message</p>\n<p>du = Disk Usage</p>\n<p>ed = editor</p>\n<p>egrep = Extended GREP</p>\n<p>elf = Extensible Linking Format</p>\n<p>elm = ELectronic Mail</p>\n<p>emacs = Editor MACroS</p>\n<p>eval = EVALuate</p>\n<p>ex = EXtended</p>\n<p>exec = EXECute</p>\n<p>fd = file descriptors</p>\n<p>fg = ForeGround</p>\n<p>fgrep = Fixed GREP</p>\n<p>fmt = format</p>\n<p>fsck = File System ChecK</p>\n<p>fstab = FileSystem TABle</p>\n<p>fvwm = F*** Virtual Window Manager</p>\n<p>gawk = GNU AWK</p>\n<p>gpg = GNU Privacy Guard</p>\n<p>groff = GNU troff</p>\n<p>hal = Hardware Abstraction Layer</p>\n<p>joe = Joe’s Own Editor</p>\n<p>ksh = Korn SHell</p>\n<p>lame = Lame Ain’t an MP3 Encoder</p>\n<p>lex = LEXical analyser</p>\n<p>lisp = LISt Processing = Lots of Irritating Superfluous Parentheses</p>\n<p>ln = LiNk</p>\n<p>lpr = Line PRint</p>\n<p>ls = list</p>\n<p>lsof = LiSt Open Files</p>\n<p>m4 = Macro processor Version 4</p>\n<p>man = MANual pages</p>\n<p>mawk = Mike Brennan’s AWK</p>\n<p>mc = Midnight Commander</p>\n<p>mkfs = MaKe FileSystem</p>\n<p>mknod = MaKe NODe</p>\n<p>motd = Message of The Day</p>\n<p>mozilla = MOsaic GodZILLa</p>\n<p>mtab = Mount TABle</p>\n<p>mv = MoVe</p>\n<p>nano = Nano’s ANOther editor</p>\n<p>nawk = New AWK</p>\n<p>nl = Number of Lines</p>\n<p>nm = names</p>\n<p>nohup = No HangUP</p>\n<p>nroff = New ROFF</p>\n<p>od = Octal Dump</p>\n<p>passwd = PASSWorD</p>\n<p>pg = pager</p>\n<p>pico = PIne’s message COmposition editor</p>\n<p>pine = “Program for Internet News &amp; Email” = “Pine is not Elm”</p>\n<p>ping = 拟声又 = Packet InterNet Grouper</p>\n<p>pirntcap = PRINTer CAPability</p>\n<p>popd = POP Directory</p>\n<p>pr = pre</p>\n<p>printf = PRINT Formatted</p>\n<p>ps = Processes Status</p>\n<p>pty = pseudo tty</p>\n<p>pushd = PUSH Directory</p>\n<p>pwd = Print Working Directory</p>\n<p>rc = runcom = run command, rc 还是 plan9的 shell</p>\n<p>rev = REVerse</p>\n<p>rm = ReMove</p>\n<p>rn = Read News</p>\n<p>roff = RunOFF</p>\n<p>rpm = RPM Package Manager = RedHat Package Manager</p>\n<p>rsh, rlogin, rvim 中的 r = Remote</p>\n<p>rxvt = ouR XVT</p>\n<p>seamoneky = 我</p>\n<p>sed = Stream EDitor</p>\n<p>seq = SEQuence</p>\n<p>shar = SHell ARchive</p>\n<p>slrn = S-Lang rn</p>\n<p>ssh = Secure SHell</p>\n<p>ssl = Secure Sockets Layer</p>\n<p>stty = Set TTY</p>\n<p>su = Substitute User</p>\n<p>svn = SubVersioN</p>\n<p>tar = Tape ARchive</p>\n<p>tcsh = TENEX C shell</p>\n<p>tee = T (T 形水管接口)</p>\n<p>telnet = TEminaL over Network</p>\n<p>termcap = terminal capability</p>\n<p>terminfo = terminal information</p>\n<p>tex = τ</p>\n</blockquote>\n"},{"title":"Linux","date":"2019-10-18T07:50:39.000Z","mathjax":true,"description":"生产力工具","_content":"\n![](http://web.wvdon.com/md/1571398826282.jpeg)\n\n> unnatural 石原里美 入坑了她的美\n\n## Linux基本知识\n\n##### 查询命令 man\n\nlinux的命令和参数太多，而且容易记错，我们可以通过man [命令] 来查看如何命令的使用文档\n\n\n\n## Linux的文件权限和目录配置\n\n##### 用户组与用户\n\n![1571385663320](http://web.wvdon.com/md/1571385663320.png)\n\n其中 老王家就代表一个用户组 ，单个人代表为用户。\n\n> - linux的用户是记录在 \n>   /etc/passwd\n> - 密码记录在\n>   /etc/shadow\n> - 所有的组记录在\n>   /etc/group\n\n###### 添加新用户 ：\n\n```shell\nadduser wvdon \n#修改所添加用户的密码\npasswd wvdon\n```\n\n##### 文件权限\n\n文件的权限被分为 可读(read) 可写(write) 可执行（execute） 简称为 r w x\n\n用数字表示 r:4 w:2 x:1\n\n文件显示的权限\n\n> ```shell\n>  -rw-rw-r-- 1 wuweidong061 wvdon    0 Oct 18 23:08 testfile.txt\n> ```\n>\n> > ①第一个符合 为 d 或者 - 分别代表 文件夹或者文件\n> > ②2-4符号代表所属用户的权限 rw- 即可读可写（4+2+0）\n> > ③5-7符号代表所属用户组的权限 rw- 即可读可写（4+2+0）\n> > ④8-10符号代表其他用户的权限为r--仅读(4) \n> > ⑤代表连接数\n> > ⑥代表 文件所有者 wuweidong061\n> > ⑦代表 文件所属用户组 wvdon\n> > ⑧时间代表文件最后修改的时间\n> > ⑨文件名\n\n##### 修改文件用户与权限的三个命令\n\n###### chgrp\n\n```shell\n #chgrp=change group\n #修改用户组\n -R 递归更改(连着文件夹下的目录和文件都进行更改)\n chgrp user filename\n```\n\n###### chown\n\n```shell\n#chown=change owner\n#修改文件所属者\nchown [-R] 账户名称 文件或目录\n```\n\n###### chmod\n\n```shell\n#chmod = chmod mode\n#更改文件的权限\n#一个文件共有三种权限分别是w r x，同时一个文件也对三种用户组状态设置权限 所有者用户② 用户组③ 其他用户④\n#更改权限的方法有三种，\n#1 利用对应的数值\nchmod 777 filename\n#2 利用对应的身份状态设置\n# a u g o代表 all[所有用户] user[文件所有者] group[用户所有组] other[其他用户] \n#设置类型可以为 + - =\nchmod u=rwx,g=rx,o=x filename\n#增加或者减少文件的权限 可以通过 \n#chmod [用户类型][设置类型 + -][权限w r x] filename\n#例如添加w或者减去x\nchmod a+w filename\nchmod a-x filename\n```\n\n##### 对文件与目录的常见操作\n\n### 1. ls\n\n列出文件或者目录的信息，目录的信息就是其中包含的文件。\n\n```\n# ls [-aAdfFhilnrRSt] file|dir\n-a ：列出全部的文件\n-d ：仅列出目录本身\n-l ：以长数据串行列出，包含文件的属性与权限等等数据\n```\n\n### 2. cd\n\n更换当前目录。\n\n```\ncd [相对路径或绝对路径]\n```\n\n### 3. mkdir\n\n创建目录。\n\n```\n# mkdir [-mp] 目录名称\n-m ：配置目录权限\n-p ：递归创建目录\n```\n\n### 4. rmdir\n\n删除目录，目录必须为空。\n\n```\nrmdir [-p] 目录名称\n-p ：递归删除目录\n```\n\n### 5. touch\n\n更新文件时间或者建立新文件。\n\n```\n# touch [-acdmt] filename\n-a ： 更新 atime\n-c ： 更新 ctime，若该文件不存在则不建立新文件\n-m ： 更新 mtime\n-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=\"日期或时间\"\n-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]\n```\n\n### 6. cp\n\n复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。\n\n```\ncp [-adfilprsu] source destination\n-a ：相当于 -dr --preserve=all\n-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身\n-i ：若目标文件已经存在时，在覆盖前会先询问\n-p ：连同文件的属性一起复制过去\n-r ：递归复制\n-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制\n--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了\n```\n\n### 7. rm\n\n删除文件。\n\n```\n# rm [-fir] 文件或目录\n-r ：递归删除\n```\n\n### 8. mv\n\n移动文件。\n\n```\n# mv [-fiu] source destination\n# mv [options] source1 source2 source3 .... directory\n-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n```\n\n\n\n## 附表\n\n### 命令缩写一览表\n\n[链接](../linux/2019-10-17-Linux命令缩写一览表/)\n\n\n\n\n ## 参考\n\n鸟哥的linux私房菜 第三版 \n\n[https://cyc2018.github.io/CS-Notes/#/notes/Linux](https://cyc2018.github.io/CS-Notes/#/notes/Linux)\n\n[命令缩写](https://blog.csdn.net/sinat_29742125/article/details/52818115)\n\n\n\n","source":"_posts/linux/2019-10-18-Linux.md","raw":"---\ntitle: 'Linux'\ndate: 2019-10-18 15:50:39\ntags: \n- linux\ncategories: [tools]\nmathjax: true\ndescription: 生产力工具\n---\n\n![](http://web.wvdon.com/md/1571398826282.jpeg)\n\n> unnatural 石原里美 入坑了她的美\n\n## Linux基本知识\n\n##### 查询命令 man\n\nlinux的命令和参数太多，而且容易记错，我们可以通过man [命令] 来查看如何命令的使用文档\n\n\n\n## Linux的文件权限和目录配置\n\n##### 用户组与用户\n\n![1571385663320](http://web.wvdon.com/md/1571385663320.png)\n\n其中 老王家就代表一个用户组 ，单个人代表为用户。\n\n> - linux的用户是记录在 \n>   /etc/passwd\n> - 密码记录在\n>   /etc/shadow\n> - 所有的组记录在\n>   /etc/group\n\n###### 添加新用户 ：\n\n```shell\nadduser wvdon \n#修改所添加用户的密码\npasswd wvdon\n```\n\n##### 文件权限\n\n文件的权限被分为 可读(read) 可写(write) 可执行（execute） 简称为 r w x\n\n用数字表示 r:4 w:2 x:1\n\n文件显示的权限\n\n> ```shell\n>  -rw-rw-r-- 1 wuweidong061 wvdon    0 Oct 18 23:08 testfile.txt\n> ```\n>\n> > ①第一个符合 为 d 或者 - 分别代表 文件夹或者文件\n> > ②2-4符号代表所属用户的权限 rw- 即可读可写（4+2+0）\n> > ③5-7符号代表所属用户组的权限 rw- 即可读可写（4+2+0）\n> > ④8-10符号代表其他用户的权限为r--仅读(4) \n> > ⑤代表连接数\n> > ⑥代表 文件所有者 wuweidong061\n> > ⑦代表 文件所属用户组 wvdon\n> > ⑧时间代表文件最后修改的时间\n> > ⑨文件名\n\n##### 修改文件用户与权限的三个命令\n\n###### chgrp\n\n```shell\n #chgrp=change group\n #修改用户组\n -R 递归更改(连着文件夹下的目录和文件都进行更改)\n chgrp user filename\n```\n\n###### chown\n\n```shell\n#chown=change owner\n#修改文件所属者\nchown [-R] 账户名称 文件或目录\n```\n\n###### chmod\n\n```shell\n#chmod = chmod mode\n#更改文件的权限\n#一个文件共有三种权限分别是w r x，同时一个文件也对三种用户组状态设置权限 所有者用户② 用户组③ 其他用户④\n#更改权限的方法有三种，\n#1 利用对应的数值\nchmod 777 filename\n#2 利用对应的身份状态设置\n# a u g o代表 all[所有用户] user[文件所有者] group[用户所有组] other[其他用户] \n#设置类型可以为 + - =\nchmod u=rwx,g=rx,o=x filename\n#增加或者减少文件的权限 可以通过 \n#chmod [用户类型][设置类型 + -][权限w r x] filename\n#例如添加w或者减去x\nchmod a+w filename\nchmod a-x filename\n```\n\n##### 对文件与目录的常见操作\n\n### 1. ls\n\n列出文件或者目录的信息，目录的信息就是其中包含的文件。\n\n```\n# ls [-aAdfFhilnrRSt] file|dir\n-a ：列出全部的文件\n-d ：仅列出目录本身\n-l ：以长数据串行列出，包含文件的属性与权限等等数据\n```\n\n### 2. cd\n\n更换当前目录。\n\n```\ncd [相对路径或绝对路径]\n```\n\n### 3. mkdir\n\n创建目录。\n\n```\n# mkdir [-mp] 目录名称\n-m ：配置目录权限\n-p ：递归创建目录\n```\n\n### 4. rmdir\n\n删除目录，目录必须为空。\n\n```\nrmdir [-p] 目录名称\n-p ：递归删除目录\n```\n\n### 5. touch\n\n更新文件时间或者建立新文件。\n\n```\n# touch [-acdmt] filename\n-a ： 更新 atime\n-c ： 更新 ctime，若该文件不存在则不建立新文件\n-m ： 更新 mtime\n-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=\"日期或时间\"\n-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]\n```\n\n### 6. cp\n\n复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。\n\n```\ncp [-adfilprsu] source destination\n-a ：相当于 -dr --preserve=all\n-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身\n-i ：若目标文件已经存在时，在覆盖前会先询问\n-p ：连同文件的属性一起复制过去\n-r ：递归复制\n-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制\n--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了\n```\n\n### 7. rm\n\n删除文件。\n\n```\n# rm [-fir] 文件或目录\n-r ：递归删除\n```\n\n### 8. mv\n\n移动文件。\n\n```\n# mv [-fiu] source destination\n# mv [options] source1 source2 source3 .... directory\n-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n```\n\n\n\n## 附表\n\n### 命令缩写一览表\n\n[链接](../linux/2019-10-17-Linux命令缩写一览表/)\n\n\n\n\n ## 参考\n\n鸟哥的linux私房菜 第三版 \n\n[https://cyc2018.github.io/CS-Notes/#/notes/Linux](https://cyc2018.github.io/CS-Notes/#/notes/Linux)\n\n[命令缩写](https://blog.csdn.net/sinat_29742125/article/details/52818115)\n\n\n\n","slug":"linux/2019-10-18-Linux","published":1,"updated":"2020-03-22T11:13:25.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5u2001zrwv0svs4iek3","content":"<p><img src=\"http://web.wvdon.com/md/1571398826282.jpeg\" alt></p><blockquote>\n<p>unnatural 石原里美 入坑了她的美</p>\n</blockquote><h2 id=\"Linux基本知识\"><a href=\"#Linux基本知识\" class=\"headerlink\" title=\"Linux基本知识\"></a>Linux基本知识</h2><h5 id=\"查询命令-man\"><a href=\"#查询命令-man\" class=\"headerlink\" title=\"查询命令 man\"></a>查询命令 man</h5><p>linux的命令和参数太多，而且容易记错，我们可以通过man [命令] 来查看如何命令的使用文档</p><h2 id=\"Linux的文件权限和目录配置\"><a href=\"#Linux的文件权限和目录配置\" class=\"headerlink\" title=\"Linux的文件权限和目录配置\"></a>Linux的文件权限和目录配置</h2><a id=\"more\"></a>\n\n\n<h5 id=\"用户组与用户\"><a href=\"#用户组与用户\" class=\"headerlink\" title=\"用户组与用户\"></a>用户组与用户</h5><p><img src=\"http://web.wvdon.com/md/1571385663320.png\" alt=\"1571385663320\"></p>\n<p>其中 老王家就代表一个用户组 ，单个人代表为用户。</p>\n<blockquote>\n<ul>\n<li>linux的用户是记录在<br>/etc/passwd</li>\n<li>密码记录在<br>/etc/shadow</li>\n<li>所有的组记录在<br>/etc/group</li>\n</ul>\n</blockquote>\n<h6 id=\"添加新用户-：\"><a href=\"#添加新用户-：\" class=\"headerlink\" title=\"添加新用户 ：\"></a>添加新用户 ：</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser wvdon </span><br><span class=\"line\"><span class=\"meta\">#</span>修改所添加用户的密码</span><br><span class=\"line\">passwd wvdon</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h5><p>文件的权限被分为 可读(read) 可写(write) 可执行（execute） 简称为 r w x</p>\n<p>用数字表示 r:4 w:2 x:1</p>\n<p>文件显示的权限</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>  -rw-rw-r-- 1 wuweidong061 wvdon    0 Oct 18 23:08 testfile.txt</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>①第一个符合 为 d 或者 - 分别代表 文件夹或者文件<br>②2-4符号代表所属用户的权限 rw- 即可读可写（4+2+0）<br>③5-7符号代表所属用户组的权限 rw- 即可读可写（4+2+0）<br>④8-10符号代表其他用户的权限为r–仅读(4)<br>⑤代表连接数<br>⑥代表 文件所有者 wuweidong061<br>⑦代表 文件所属用户组 wvdon<br>⑧时间代表文件最后修改的时间<br>⑨文件名</p>\n</blockquote>\n</blockquote>\n<h5 id=\"修改文件用户与权限的三个命令\"><a href=\"#修改文件用户与权限的三个命令\" class=\"headerlink\" title=\"修改文件用户与权限的三个命令\"></a>修改文件用户与权限的三个命令</h5><h6 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>chgrp=change group</span><br><span class=\"line\"><span class=\"meta\">#</span>修改用户组</span><br><span class=\"line\">-R 递归更改(连着文件夹下的目录和文件都进行更改)</span><br><span class=\"line\">chgrp user filename</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>chown=change owner</span><br><span class=\"line\"><span class=\"meta\">#</span>修改文件所属者</span><br><span class=\"line\">chown [-R] 账户名称 文件或目录</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>chmod = chmod mode</span><br><span class=\"line\"><span class=\"meta\">#</span>更改文件的权限</span><br><span class=\"line\"><span class=\"meta\">#</span>一个文件共有三种权限分别是w r x，同时一个文件也对三种用户组状态设置权限 所有者用户② 用户组③ 其他用户④</span><br><span class=\"line\"><span class=\"meta\">#</span>更改权限的方法有三种，</span><br><span class=\"line\"><span class=\"meta\">#</span>1 利用对应的数值</span><br><span class=\"line\">chmod 777 filename</span><br><span class=\"line\"><span class=\"meta\">#</span>2 利用对应的身份状态设置</span><br><span class=\"line\"><span class=\"meta\">#</span> a u g o代表 all[所有用户] user[文件所有者] group[用户所有组] other[其他用户] </span><br><span class=\"line\"><span class=\"meta\">#</span>设置类型可以为 + - =</span><br><span class=\"line\">chmod u=rwx,g=rx,o=x filename</span><br><span class=\"line\"><span class=\"meta\">#</span>增加或者减少文件的权限 可以通过 </span><br><span class=\"line\"><span class=\"meta\">#</span>chmod [用户类型][设置类型 + -][权限w r x] filename</span><br><span class=\"line\"><span class=\"meta\">#</span>例如添加w或者减去x</span><br><span class=\"line\">chmod a+w filename</span><br><span class=\"line\">chmod a-x filename</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"对文件与目录的常见操作\"><a href=\"#对文件与目录的常见操作\" class=\"headerlink\" title=\"对文件与目录的常见操作\"></a>对文件与目录的常见操作</h5><h3 id=\"1-ls\"><a href=\"#1-ls\" class=\"headerlink\" title=\"1. ls\"></a>1. ls</h3><p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ls [-aAdfFhilnrRSt] file|dir</span><br><span class=\"line\">-a ：列出全部的文件</span><br><span class=\"line\">-d ：仅列出目录本身</span><br><span class=\"line\">-l ：以长数据串行列出，包含文件的属性与权限等等数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-cd\"><a href=\"#2-cd\" class=\"headerlink\" title=\"2. cd\"></a>2. cd</h3><p>更换当前目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-mkdir\"><a href=\"#3-mkdir\" class=\"headerlink\" title=\"3. mkdir\"></a>3. mkdir</h3><p>创建目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir [-mp] 目录名称</span><br><span class=\"line\">-m ：配置目录权限</span><br><span class=\"line\">-p ：递归创建目录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-rmdir\"><a href=\"#4-rmdir\" class=\"headerlink\" title=\"4. rmdir\"></a>4. rmdir</h3><p>删除目录，目录必须为空。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [-p] 目录名称</span><br><span class=\"line\">-p ：递归删除目录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-touch\"><a href=\"#5-touch\" class=\"headerlink\" title=\"5. touch\"></a>5. touch</h3><p>更新文件时间或者建立新文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch [-acdmt] filename</span><br><span class=\"line\">-a ： 更新 atime</span><br><span class=\"line\">-c ： 更新 ctime，若该文件不存在则不建立新文件</span><br><span class=\"line\">-m ： 更新 mtime</span><br><span class=\"line\">-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=&quot;日期或时间&quot;</span><br><span class=\"line\">-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-cp\"><a href=\"#6-cp\" class=\"headerlink\" title=\"6. cp\"></a>6. cp</h3><p>复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [-adfilprsu] source destination</span><br><span class=\"line\">-a ：相当于 -dr --preserve=all</span><br><span class=\"line\">-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身</span><br><span class=\"line\">-i ：若目标文件已经存在时，在覆盖前会先询问</span><br><span class=\"line\">-p ：连同文件的属性一起复制过去</span><br><span class=\"line\">-r ：递归复制</span><br><span class=\"line\">-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制</span><br><span class=\"line\">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-rm\"><a href=\"#7-rm\" class=\"headerlink\" title=\"7. rm\"></a>7. rm</h3><p>删除文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rm [-fir] 文件或目录</span><br><span class=\"line\">-r ：递归删除</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-mv\"><a href=\"#8-mv\" class=\"headerlink\" title=\"8. mv\"></a>8. mv</h3><p>移动文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv [-fiu] source destination</span><br><span class=\"line\"># mv [options] source1 source2 source3 .... directory</span><br><span class=\"line\">-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附表\"><a href=\"#附表\" class=\"headerlink\" title=\"附表\"></a>附表</h2><h3 id=\"命令缩写一览表\"><a href=\"#命令缩写一览表\" class=\"headerlink\" title=\"命令缩写一览表\"></a>命令缩写一览表</h3><p><a href=\"../linux/2019-10-17-Linux命令缩写一览表/\">链接</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>鸟哥的linux私房菜 第三版 </p>\n<p><a href=\"https://cyc2018.github.io/CS-Notes/#/notes/Linux\" target=\"_blank\" rel=\"noopener\">https://cyc2018.github.io/CS-Notes/#/notes/Linux</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_29742125/article/details/52818115\" target=\"_blank\" rel=\"noopener\">命令缩写</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://web.wvdon.com/md/1571398826282.jpeg\" alt></p><blockquote>\n<p>unnatural 石原里美 入坑了她的美</p>\n</blockquote><h2 id=\"Linux基本知识\"><a href=\"#Linux基本知识\" class=\"headerlink\" title=\"Linux基本知识\"></a>Linux基本知识</h2><h5 id=\"查询命令-man\"><a href=\"#查询命令-man\" class=\"headerlink\" title=\"查询命令 man\"></a>查询命令 man</h5><p>linux的命令和参数太多，而且容易记错，我们可以通过man [命令] 来查看如何命令的使用文档</p><h2 id=\"Linux的文件权限和目录配置\"><a href=\"#Linux的文件权限和目录配置\" class=\"headerlink\" title=\"Linux的文件权限和目录配置\"></a>Linux的文件权限和目录配置</h2>","more":"\n\n\n<h5 id=\"用户组与用户\"><a href=\"#用户组与用户\" class=\"headerlink\" title=\"用户组与用户\"></a>用户组与用户</h5><p><img src=\"http://web.wvdon.com/md/1571385663320.png\" alt=\"1571385663320\"></p>\n<p>其中 老王家就代表一个用户组 ，单个人代表为用户。</p>\n<blockquote>\n<ul>\n<li>linux的用户是记录在<br>/etc/passwd</li>\n<li>密码记录在<br>/etc/shadow</li>\n<li>所有的组记录在<br>/etc/group</li>\n</ul>\n</blockquote>\n<h6 id=\"添加新用户-：\"><a href=\"#添加新用户-：\" class=\"headerlink\" title=\"添加新用户 ：\"></a>添加新用户 ：</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser wvdon </span><br><span class=\"line\"><span class=\"meta\">#</span>修改所添加用户的密码</span><br><span class=\"line\">passwd wvdon</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h5><p>文件的权限被分为 可读(read) 可写(write) 可执行（execute） 简称为 r w x</p>\n<p>用数字表示 r:4 w:2 x:1</p>\n<p>文件显示的权限</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>  -rw-rw-r-- 1 wuweidong061 wvdon    0 Oct 18 23:08 testfile.txt</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>①第一个符合 为 d 或者 - 分别代表 文件夹或者文件<br>②2-4符号代表所属用户的权限 rw- 即可读可写（4+2+0）<br>③5-7符号代表所属用户组的权限 rw- 即可读可写（4+2+0）<br>④8-10符号代表其他用户的权限为r–仅读(4)<br>⑤代表连接数<br>⑥代表 文件所有者 wuweidong061<br>⑦代表 文件所属用户组 wvdon<br>⑧时间代表文件最后修改的时间<br>⑨文件名</p>\n</blockquote>\n</blockquote>\n<h5 id=\"修改文件用户与权限的三个命令\"><a href=\"#修改文件用户与权限的三个命令\" class=\"headerlink\" title=\"修改文件用户与权限的三个命令\"></a>修改文件用户与权限的三个命令</h5><h6 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>chgrp=change group</span><br><span class=\"line\"><span class=\"meta\">#</span>修改用户组</span><br><span class=\"line\">-R 递归更改(连着文件夹下的目录和文件都进行更改)</span><br><span class=\"line\">chgrp user filename</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>chown=change owner</span><br><span class=\"line\"><span class=\"meta\">#</span>修改文件所属者</span><br><span class=\"line\">chown [-R] 账户名称 文件或目录</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>chmod = chmod mode</span><br><span class=\"line\"><span class=\"meta\">#</span>更改文件的权限</span><br><span class=\"line\"><span class=\"meta\">#</span>一个文件共有三种权限分别是w r x，同时一个文件也对三种用户组状态设置权限 所有者用户② 用户组③ 其他用户④</span><br><span class=\"line\"><span class=\"meta\">#</span>更改权限的方法有三种，</span><br><span class=\"line\"><span class=\"meta\">#</span>1 利用对应的数值</span><br><span class=\"line\">chmod 777 filename</span><br><span class=\"line\"><span class=\"meta\">#</span>2 利用对应的身份状态设置</span><br><span class=\"line\"><span class=\"meta\">#</span> a u g o代表 all[所有用户] user[文件所有者] group[用户所有组] other[其他用户] </span><br><span class=\"line\"><span class=\"meta\">#</span>设置类型可以为 + - =</span><br><span class=\"line\">chmod u=rwx,g=rx,o=x filename</span><br><span class=\"line\"><span class=\"meta\">#</span>增加或者减少文件的权限 可以通过 </span><br><span class=\"line\"><span class=\"meta\">#</span>chmod [用户类型][设置类型 + -][权限w r x] filename</span><br><span class=\"line\"><span class=\"meta\">#</span>例如添加w或者减去x</span><br><span class=\"line\">chmod a+w filename</span><br><span class=\"line\">chmod a-x filename</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"对文件与目录的常见操作\"><a href=\"#对文件与目录的常见操作\" class=\"headerlink\" title=\"对文件与目录的常见操作\"></a>对文件与目录的常见操作</h5><h3 id=\"1-ls\"><a href=\"#1-ls\" class=\"headerlink\" title=\"1. ls\"></a>1. ls</h3><p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ls [-aAdfFhilnrRSt] file|dir</span><br><span class=\"line\">-a ：列出全部的文件</span><br><span class=\"line\">-d ：仅列出目录本身</span><br><span class=\"line\">-l ：以长数据串行列出，包含文件的属性与权限等等数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-cd\"><a href=\"#2-cd\" class=\"headerlink\" title=\"2. cd\"></a>2. cd</h3><p>更换当前目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-mkdir\"><a href=\"#3-mkdir\" class=\"headerlink\" title=\"3. mkdir\"></a>3. mkdir</h3><p>创建目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir [-mp] 目录名称</span><br><span class=\"line\">-m ：配置目录权限</span><br><span class=\"line\">-p ：递归创建目录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-rmdir\"><a href=\"#4-rmdir\" class=\"headerlink\" title=\"4. rmdir\"></a>4. rmdir</h3><p>删除目录，目录必须为空。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [-p] 目录名称</span><br><span class=\"line\">-p ：递归删除目录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-touch\"><a href=\"#5-touch\" class=\"headerlink\" title=\"5. touch\"></a>5. touch</h3><p>更新文件时间或者建立新文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch [-acdmt] filename</span><br><span class=\"line\">-a ： 更新 atime</span><br><span class=\"line\">-c ： 更新 ctime，若该文件不存在则不建立新文件</span><br><span class=\"line\">-m ： 更新 mtime</span><br><span class=\"line\">-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=&quot;日期或时间&quot;</span><br><span class=\"line\">-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-cp\"><a href=\"#6-cp\" class=\"headerlink\" title=\"6. cp\"></a>6. cp</h3><p>复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [-adfilprsu] source destination</span><br><span class=\"line\">-a ：相当于 -dr --preserve=all</span><br><span class=\"line\">-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身</span><br><span class=\"line\">-i ：若目标文件已经存在时，在覆盖前会先询问</span><br><span class=\"line\">-p ：连同文件的属性一起复制过去</span><br><span class=\"line\">-r ：递归复制</span><br><span class=\"line\">-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制</span><br><span class=\"line\">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-rm\"><a href=\"#7-rm\" class=\"headerlink\" title=\"7. rm\"></a>7. rm</h3><p>删除文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rm [-fir] 文件或目录</span><br><span class=\"line\">-r ：递归删除</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-mv\"><a href=\"#8-mv\" class=\"headerlink\" title=\"8. mv\"></a>8. mv</h3><p>移动文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv [-fiu] source destination</span><br><span class=\"line\"># mv [options] source1 source2 source3 .... directory</span><br><span class=\"line\">-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附表\"><a href=\"#附表\" class=\"headerlink\" title=\"附表\"></a>附表</h2><h3 id=\"命令缩写一览表\"><a href=\"#命令缩写一览表\" class=\"headerlink\" title=\"命令缩写一览表\"></a>命令缩写一览表</h3><p><a href=\"../linux/2019-10-17-Linux命令缩写一览表/\">链接</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>鸟哥的linux私房菜 第三版 </p>\n<p><a href=\"https://cyc2018.github.io/CS-Notes/#/notes/Linux\" target=\"_blank\" rel=\"noopener\">https://cyc2018.github.io/CS-Notes/#/notes/Linux</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_29742125/article/details/52818115\" target=\"_blank\" rel=\"noopener\">命令缩写</a></p>\n"},{"title":"JAVA数据结构与算法:数学问题","date":"2019-08-02T07:50:39.000Z","mathjax":true,"description":"JAVA数据结构与算法中有关于数学的问题","_content":"\n## <span id=\"math\">数学问题</span>\n\n写在前面\n\n自然数：非负整数，0,1,2,3,4......\n\n合数：存在a(1<a<n),使得n % a ==0,称n为合数\n\n素数(质数）：对于任意a(1<a<n),都有n % a !=0,称n为素数。\n\n​\t质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。\n\n约数与倍数：\n\n整数a能够被整数b整除，那么a就是b的倍数，b就是a的约数。\n\n```java\nint a,b;\nb/a==0约数又称为因数\n```\n\n\n\n### 5.1 最大公约数和最小公倍数\n\n#### 5.1.1 最大公约数\n\nQ1:什么是最大公约数\n\n> 最大公约数，又称最大公因数，指两个整数相同的最大约数。\n\n```java\nint a=12,b=8;\ngcd(12,8)\n//gcd(12,8)=4\n```\n\nQ2:有什么用呢？\n\n> 欧几里德算法可用于RSA加密等领域。\n\nQ3:如何去求最大公约数\n\n```java\nint gcd(int a,int b){\n // a>=b\n swap(a，b);\n if(b==0){\n     return a;\n }\n return gcd(b,a%b);\n}\nvoid swap(a,b){\n int temp;\n if(a<b){\n     a=temp;\n     a=b;\n     b=temp;\n }\n}\n```\n\n\n\n> 证明：\n>\n> > 既证明 gcd(a,b) = gcd(b,a mod b) 的过程\n> >\n> > 其计算原理依赖于下面的定理：\n> > *定理：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。最大公约数（Greatest Common Divisor）缩写为GCD。\n> > gcd(a,b) = gcd(b,a mod b) (不妨设a>b 且r=a mod b ,r不为0)*\n> >\n> > a可以表示成a = kb + r（a，b，k，r皆为正整数，且r<b），则r = a % b\n> > 假设d是a,b的一个公约数，\n> > 而r = a - kb，两边同时除以d，\n> >\n> >  $$ \\frac{r}{d}=\\frac{a}{d}-\\frac{kb}{d}=m $$\n> >\n> > 由等式右边可知m为整数，因此d是r的约数\n> > 因此d也是b,a % b的公约数\n> > 进而d|a.因此d也是a,b的公约数，由于d的任意性，得a和b的公约数都是a%b的公约数\n> > 由a = kb + r,同理可证 b 和 a % b的公约数都是 a和b的公约数。\n> > 因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，\n> > 得证。\n\nQ4:还有其他方法吗？\n\n> 目前求 最大公约数有 质因数分解法、短除法、辗转相除法、更相减损法\n>\n> 其中最常用的为辗转相除法（又名欧几里得算法）\n>\n> 有精力的话可以了解一下扩展欧几里得算法\n\n\n\n#### 5.1.2 最小公倍数\n\n最小公倍数建立在最大公约数的基础上，即除了a,b的最大公约数外a与b的成绩除以最大公约数，\n表示为  lcm(a,b)\n$$\n最小公倍数=\\frac{a*b}{最大公约数}\n$$\n证明：\n\n> 有集合A，集合B，\n> 则知最大公约数 d=A∩B\n> 所以最小公倍数=(A-D)∪(B-D)\n> =AB/D\n\n### 5.2 分数的四则运算\n\n真分数：分子小于分母\n\n假分数：分子大于分母\n\n假分数：fen\n\n#### 5.2.1 分数的表示和化简\n\n分数通常写成假分数模式\n\nQ：如何表示分数\n\n1. 保证分母为正\n2. 约去公约数\n3. 分子为0，分母为1；\n\n```java\nclass  Fractional{\n\t\tFractional(int up,int down){\n\t\t\tint up;int down;\n            up=this.up;\n    \t\tdown=this.down;\n           \n        }\n}\nstatic Fractional fractional(int up,int down){\n     if(down<0){\n         up=-up;\n         down=-down;\n         }\n      if(up==0){\n          down=1;\n         }\n       else{\n          int d = gcd(abs(up),abs(down))\n          up/=d;\n          down/=d;\t\n            }\n   return Fractional\n}\npublic static void main(String args[]){\n    int up=5,down=2;\n    f = new Fractional(up,down)\n        \n}\n```\n\n\n\n#### 5.2.2 分数的运算\n\n分数有加减乘除运算\n\n1. 加法运算\n\n   ```java\n   Fractional add(Fraction f1,Fraction f2){\n       Fractional result;\n       result.up = f1.up*f2.down + f2.up*f1.down;\n       result.down = f1.down*f2.down;\n       return result;\n   }\n   ```\n\n   \n\n2. 减法，乘法，除法 同理\n\n#### 5.2.3 分数的标准输出\n\n1. 进行化简\n2. 1/1输出为1\n3. 输出真分数，整数部分为 $$ \\frac{r.up}{r.down}$$,分数的分母为 r.up%r.down;\n\n### 5.3 素数\n\n> 1 既不是素数也不是合数 \n>\n> 素数范围（1，n)\n\n#### 5.3.1素数判断\n\n方法一：对（1，sqrt(n)) 进行遍历 复杂度为 O(sqrt(n))\n\n```java\nboolean isPrame(int a){\n  \n    if(a<1){\n        return false;\n    }\n    for(int i=2;i<=sqrt(a);i++){\n        if(a%i==0)\n            return false;\n        \tbreak;\n    }\n    return true;\n}\n```\n\n方法二：对于要求复杂度的算法题时可以使用打表的方法解决\n\n```java\nint[] a = new int[101];\nint num = 0;\nvoid Find_Prame(){\n    for(int i=1){\n        if(isPrame(i)){\n            a[num++]=i;\n            \n        }\n}\n}\n```\n\n方法三：（埃氏筛法）复杂度为O(nlog(log(n))\n\n利用从前到后消除的原理\n\n```java\nint[] a = new int[101];\nboolean [] b = new boolean [n];//如果b[i]=false，是素数，b[i]=true不是素数\nvoid Find_Prame(){\n    for(int i=2;i<=n;i++){\n        if(b[i]=false){\n            for(int j=i+i;j<n;j+=i){\n                b[j]=true;\n            }\n            b[i]=false;\n        }\n    }\n}\n```\n\n例题：求解100内所有的素数\n\n```java\npublic static void main(String args[]){\n\t   boolean [] b = new boolean [101];\n\t    Find_Prame(b,100);\n\t    for(int i=2;i<=100;i++){\n\t        if(!b[i]){\n\t            System.out.print(i+\" \");\n\t        }\n\t    }\n}\t\nstatic void Find_Prame(boolean[] b,int n){\n   \n\t    for(int i=2;i<=n;i++){\n\t        if(!b[i]){\n\t            for(int j=i+i;j<=n;j+=i){\n\t                b[j]=true;\n\t            }\n\t            b[i]=false;\n\t        } \n\t    }\n}\n```\n\n\n\n### 5.4 质因子分解\n\nQ:什么是质因子分解：\n\n> 将一个正整数写成一个或多个质数乘积的形式\n> 6=2*3,12=2^2\\*3\n\n分解过程\n\n> 构造类 Factor记录 因子x，与因子的个数 cunt\n>\n> 因为所取最简化的因子一定为素数，直接采取对n进行取模运算。\n>\n> 对于正整数n，只存在一个因子大于sqrt(n),会存在一个或多个小于n的因子，\n>\n> 以此入手，如果在前sqrt(n)循环之前，仍然存在n!=1,必定n为素数\n>\n> 此时算法复杂度降到O(sqrt(n))\n\n```java\npublic static void main(String args[]){\n\t  int n=1997;\n\t  int m=n;\n\t  boolean []b=new boolean[10100];  \n\t  Factor [] fac= new Factor[10];  \n\t  int num=0;\n\t   int [] prime = Find_Prame(b);\n\t   \n\t\tfor(int i=2;prime[i-2]<Math.sqrt(m);i++){\n\t\t\tif(n%prime[i-2]==0){\n\t\t\t\tfac[num]=new Factor();\n\t\t\t\tfac[num].x=prime[i-2];\n\t\t\t\tfac[num].cunt=0;\n\t\t\t\twhile(n%prime[i-2]==0){\n\t\t\t\t\tfac[num].cunt++;\n\t\t\t\t\tn/=prime[i-2];\n                    //每次都除以因子\n\t\t\t\t}\n\t\t\t\tnum++;\n            }\t\t\t\n\t\t}\n\t\tif(n!=1){\n\t\t\tfac[num] = new Factor();\n\t\t\tfac[num].x=n;\n\t\t\tfac[num].cunt=1;\n\t\t}\n\t\tSystem.out.print(m+\"=\");\n\t\t\n\t\tfor(int i=0;i<num;i++){\n\t\t\t//System.out.println(fac[0].x);\n\t\t\tSystem.out.print(fac[i].x+\"^\"+fac[i].cunt+\"+\");\n\t\t}\n\t\tSystem.out.print(fac[num].x+\"^\"+String.valueOf(fac[num].cunt));\n}\t\nstatic  int[] Find_Prame(boolean[] b){\n\tint [] prame = new int[1000];\n\tint num = 0;\n\tfor(int i=2;i<=prame.length;i++){\n\t\tif(!b[i]){\n\t\t\tfor(int j=i+i;j<=b.length-1;j+=i){\n\t\t\t\tb[j]=true;\n\t\t\t\t\n\t\t\t}\n\t\t\tb[i]=false;\n\t\t\tprame[num++]=i;\n            //记录素数\n\t\t}\n\t}\n\treturn prame;\n}\n}\nclass Factor{\n\t//素数 x代表因子，cunt代表该因子的次方数\n\tint x;\n\tint cunt;\t\n\t\n}\n```\n\n\n\n### 5.5 大数运算\n\n#### 5.5.1 基本数据类型\n\n为什么要用大数计算？\n\n> 当数值大于可以取的范围时就不得不用到大数了。\n\n> 八种基本类型的运算范围如下\n>\n> | 数据类型 | 字节数 | 二进制位数 | 范围                                       | 规律        |\n> | -------- | ------ | ---------- | ------------------------------------------ | ----------- |\n> | byte     | 1      | 8          | -128～127                                  | -27～27-1   |\n> | short    | 2      | 16         | -32768～32767                              | -215～215-1 |\n> | int      | 4      | 32         | -2147483648～2147483647                    | -231～231-1 |\n> | long     | 8      | 64         | -9223372036854775808 ~ 9223372036854775807 | -263～263-1 |\n> | float    | 4      | 32         | 1.4E-45~3.4028235E38                       |             |\n> | double   | 8      | 64         | 4.9E-324~1.7976931348623157E308            |             |\n> | char     | 2      | 16         | 0～65535                                   | 0~216-1     |\n> | boolean  | 1      | 8          | true或false                                | true或false |\n\n#### 5.2.2 BigInteger\n\nJAVA里面提供了Integer类，专门运用于大数的计算。官方文档这样介绍\n\n> 不可变的任意精度的整数。所有操作中，都以二进制补码形式表示 BigInteger（如 Java 的基本整数类型）。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。\n\n也就是说\n\n> BigInteger 任意大的整数，原则上是，只要你的计算机的内存足够大，可以有无限位的.\n>\n> BigInteger属于java.math.BigInteger;\n\n由于biginteger不是基本类型，所以需要 new \n\n```\nBigInteger abs()  返回大整数的绝对值\nBigInteger add(BigInteger val) 返回两个大整数的和\nBigInteger and(BigInteger val)  返回两个大整数的按位与的结果\nBigInteger andNot(BigInteger val) 返回两个大整数与非的结果\nBigInteger divide(BigInteger val)  返回两个大整数的商\ndouble doubleValue()   返回大整数的double类型的值\nfloat floatValue()   返回大整数的float类型的值\nBigInteger gcd(BigInteger val)  返回大整数的最大公约数\nint intValue() 返回大整数的整型值\nlong longValue() 返回大整数的long型值\nBigInteger max(BigInteger val) 返回两个大整数的最大者\nBigInteger min(BigInteger val) 返回两个大整数的最小者\nBigInteger mod(BigInteger val) 用当前大整数对val求模\nBigInteger multiply(BigInteger val) 返回两个大整数的积\nBigInteger negate() 返回当前大整数的相反数\nBigInteger not() 返回当前大整数的非\nBigInteger or(BigInteger val) 返回两个大整数的按位或\nBigInteger pow(int exponent) 返回当前大整数的exponent次方\nBigInteger remainder(BigInteger val) 返回当前大整数除以val的余数\nBigInteger leftShift(int n) 将当前大整数左移n位后返回\nBigInteger rightShift(int n) 将当前大整数右移n位后返回\nBigInteger subtract(BigInteger val)返回两个大整数相减的结果\nbyte[] toByteArray(BigInteger val)将大整数转换成二进制反码保存在byte数组中\nString toString() 将当前大整数转换成十进制的字符串形式\nBigInteger xor(BigInteger val) 返回两个大整数的异或\nBigInteger compareTo(BigInteger val) 根据该数值是小于、等于、或大于 val 返回 -1、0 或 1；\nequals：判断两数是否相等，也可以用compareTo来代替；\nintValue，longValue，floatValue，doublue：把该数转换为该类型的数的值。\n```\n\n#### 5.5.2 Integer\n\n说到BigIntegerJ就不得说说integer了。\n\n> **java.lang.Integer**\n>\n> `Integer` 类在对象中包装了一个基本类型 `int` 的值。`Integer` 类型的对象包含一个 `int` 类型的字段。\n> 此外，该类提供了多个方法，能在 `int` 类型和 `String` 类型之间互相转换，还提供了处理 `int` 类型时非常有用的其他一些常量和方法。\n\n概括就是：int与integer范围上是一样的，不过封装了不少的方法可以调用\n\n```\ncompareTo(Integer anotherInteger) 在数字上比较两个 Integer 对象\ndoubleValue(),floatValue() ,intValue(),longValue()以 xx 类型返回该 Integer 的值\nparseInt(String s) 将字符串参数作为有符号的十进制整数进行解析\ntoString() 返回一个表示该 Integer 值的 String 对象。。将该参数转换为有符号的十进制表示形式，并以字符串             的形式返回它。\npublic static String \n将十进制数转换为二进制数（由0 1组成）\npublic static String \n将十进制数转换为八进制数（以0开头）\npublic static String \n将十进制数转换为十六进制数（以0x开头）\n\n```\n\n```\n最常用的方法了，进制转换，类型转换。\nInteger i = new Integer(10);\nint ii = i.intValue();//Integer 转换成 int\nInteger kk = Integer.valueOf(ii)//将ii转换为Integer\nint iii = Integer.parsetInt(\"10\");//字符串转成int类型\nk = Integer.parseInt(\"110\", 2);//radix进制的字符串转换成int\ntoBinaryString(int i),toOctalString(int i),toHexString(int i),转换成2,8,16进制\n```\n\n#### 5.5.3补充：\n\nQ: ‘==’,和equals()的区别\n\n> 众所周知,==比较的是地址,equals比较值。\n> 但是在integer中存在一个**IntegerCache**，也就是范围在[-128,127]的数值是直接在IntegerCache里面缓存的，所以当赋值的时候不会重新的new，而是直接的进行调用。\n> 那么 有了以下的比较：\n>\n> > a = new Integer(12), Integer b = 12; 由于a是new进行创建对象的，所以a会存在于堆里面，而b是在IntegerCache里获取的.\n> >\n> > 所以(a==b)为false\n>\n> > 当 integer不在该范围的时候，Integer会进行new, 然后自动装箱产生对象;\n> > 若 Integer a = 128,Integer b=128;\n> > 也会出现 (a==b)为false\n> > 但是如果Integer a = 127,Integer b=127;\n> > (a==b)为true\n>\n> > 当int与Integer进行比较的时候回自动的拆箱，转换为int进行比较\n>\n> \n>\n> [参考文章](https://blog.csdn.net/wangyang1354/article/details/52623703)\n\nQ：默认值\n\n> Integer的默认值是null，int的默认值是0\n\n装箱就是  自动将基本数据类型转换为包装器类型；拆箱就是  自动将包装器类型转换为基本数据类型。\n\n关于拆箱和分箱可以参考博客文章 [深入剖析Java中的装箱和拆箱](https://www.cnblogs.com/dolphin0520/p/3780005.html)\n\n### 5.6 组合数 \n\n> 从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；\n>\n> 从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数。\n>\n> 公式：\n> $$\n> C_{n}^{m} = \\frac{n!}{m!(n-m)!}\n> $$\n> C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;;      C<sub>n</sub><sup>m</sup>=C<sub>n</sub><sup>n-m</sup>;\n\n#### 5.6.1阶乘的质因子\n\nQ: 什么是阶乘呢？\n\n> 便于记录连乘，形如 n! =  1\\*2\\*3.....*n\n\nQ: n! 中有多少质因子2呢？\n\n> 最直接的方式就是 套两个for循环，复杂度达到O(N^2)\n>\n> 但是当n很大时，内存占用的会非常多的。\n\n方法一：\n\n通过我们的观察\n\n​                                                   2     n!中2^3的个数\n\n​                          2                       2\tn!中2^2的个数\n\n​              2          2           2         2            2  n!中2的个数\n\n10!=1 * 2 * 3* 4 * 5 * 6 * 7 * 8 * 9 * 10\n\n通过上面得到 在10！中 因子 2的个数为5,2^2 为2个，2^3 1个\n10！的质因子共 1+2+5=8\n\n同理 求 n!的质因子为p个数\n\n> $$\n> \\frac{n}{p}+\\frac{n}{p^{2}}+\\frac{n}{p^{3}}+\\frac{n}{p^{4}}+\\frac{n}{p^{5}}+·····\n> $$\n\n求解的终止条件为当int m=log<sub>2</sub>(n),既log(n)的向下取整\n\n```java\nint cal(int n,int p){\n    int m=n;\n    int sum=0;\n    for(int i=0;i<=Math.log(m)/Math.log(2);i++){\n        sum+=n/p;\n        n/=p;\n    }\n    return sum;\n}\n```\n\n其中 在java提供的Math函数求对数\n\nMath.log(m) = log<sub>e</sub>(m) \n$$\nlog_{2}^{m} = \\frac{log_{e}^{m}}{log_{e}{2}}\n$$\n然后发现这样也是可以的(判断条件简单多了，用for用的太多了，瞬间感觉while挺好的)\n\n```java\nint cal(int n,int p){\n    int sum=0;\n    while(n!=0){\n        sum+=n/p;\n        n/=p;\n    }\n    return sum;\n}\n```\n\n\n\n> 通过这个方法也可以求 n!的结果中有多少个0?\n> 即是求cal(n,5)\n> 这里求的是质因子5的个数，是因为在一个阶乘中每有一个二就会有一个5，2*5会创造一个0,而不是一个10才创造一个0;\n\n方法二：逆向递归\n从书上的理解是：\n\n> 10! = 2<sup>5</sup>+5!+1\\*3\\*5\\*7\\*9\n>\n> 5! = 2<sup>2</sup> + 2！+ 1\\*3\\*5\n>\n> 和刚刚方法一是一样的原理\n\n```java\nint cal(int n,int p){\n    if(n<p) return 0;\n    return n/p + cal(n/p,p);\n}\n```\n\n#### 5.6.2 组合数的计算\n\n1，计算 C<sub>n</sub><sup>m</sup>\n$$\nC_{n}^{m} = \\frac{n!}{m!(n-m)!}=\\frac{(n-m+1)(n-m+2)····(n-m+m)}{m！}\n$$\n通过展开式能够看出，分子分母都为m项的，且C<sub>n</sub><sup>m</sup>的结果都是为整数，故此我们可以边乘边除，而不是每一项分开除再乘的；这样的话就可以避免乘法的溢出。\n\n```java\n  int C(int n,int m){\n        int sum=1;\n        for(int i=1;i<=m;i++){\n            sum=sum*(n-m+i)/i;\n            /**不能写成sum*=(n-m+i)/i;这样是先计算每一项除法的结果，而每一项无法保证为整数，只有先乘后除**/\n        }\n        return sum;\n    }\n```\n\n方法二：通过递推公式\n\n当我们从n个数中取出m个的组合也就是  C<sub>n</sub><sup>m</sup> ,如何我们先不取最后一个数，先从n-1个当中取出m个，然后选取最后一个，再从n-1个当中选取m-1个，既可以得到\n$$\nC_{n}^{m} = C_{n-1}^{m}+c_{n-1}^{m-1}\n$$\n运用递归可以很快的写出代码，递归的判断条件是当m=0，或者m=n；\n\n> 写递归一定要先判断好递归终止的条件 C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;\n\n```java\n int C(int n,int m){\n     if(n==m||m==0){\n         return 1;\n     }\n        return C(n-1,m)+C(n-1,m-1);\n  }\n```\n\n​                                                                                                                                             \n\n\n\n","source":"_posts/arithmetic/JAVA_Alg_Math.md","raw":"---\ntitle: 'JAVA数据结构与算法:数学问题'\ndate: 2019-08-02 15:50:39\ntags: \n  - java\n  - 数据结构\n  - 数学问题\ncategories: [JAVA数据结构与算法]\nmathjax: true\ndescription: JAVA数据结构与算法中有关于数学的问题\n---\n\n## <span id=\"math\">数学问题</span>\n\n写在前面\n\n自然数：非负整数，0,1,2,3,4......\n\n合数：存在a(1<a<n),使得n % a ==0,称n为合数\n\n素数(质数）：对于任意a(1<a<n),都有n % a !=0,称n为素数。\n\n​\t质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。\n\n约数与倍数：\n\n整数a能够被整数b整除，那么a就是b的倍数，b就是a的约数。\n\n```java\nint a,b;\nb/a==0约数又称为因数\n```\n\n\n\n### 5.1 最大公约数和最小公倍数\n\n#### 5.1.1 最大公约数\n\nQ1:什么是最大公约数\n\n> 最大公约数，又称最大公因数，指两个整数相同的最大约数。\n\n```java\nint a=12,b=8;\ngcd(12,8)\n//gcd(12,8)=4\n```\n\nQ2:有什么用呢？\n\n> 欧几里德算法可用于RSA加密等领域。\n\nQ3:如何去求最大公约数\n\n```java\nint gcd(int a,int b){\n // a>=b\n swap(a，b);\n if(b==0){\n     return a;\n }\n return gcd(b,a%b);\n}\nvoid swap(a,b){\n int temp;\n if(a<b){\n     a=temp;\n     a=b;\n     b=temp;\n }\n}\n```\n\n\n\n> 证明：\n>\n> > 既证明 gcd(a,b) = gcd(b,a mod b) 的过程\n> >\n> > 其计算原理依赖于下面的定理：\n> > *定理：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。最大公约数（Greatest Common Divisor）缩写为GCD。\n> > gcd(a,b) = gcd(b,a mod b) (不妨设a>b 且r=a mod b ,r不为0)*\n> >\n> > a可以表示成a = kb + r（a，b，k，r皆为正整数，且r<b），则r = a % b\n> > 假设d是a,b的一个公约数，\n> > 而r = a - kb，两边同时除以d，\n> >\n> >  $$ \\frac{r}{d}=\\frac{a}{d}-\\frac{kb}{d}=m $$\n> >\n> > 由等式右边可知m为整数，因此d是r的约数\n> > 因此d也是b,a % b的公约数\n> > 进而d|a.因此d也是a,b的公约数，由于d的任意性，得a和b的公约数都是a%b的公约数\n> > 由a = kb + r,同理可证 b 和 a % b的公约数都是 a和b的公约数。\n> > 因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，\n> > 得证。\n\nQ4:还有其他方法吗？\n\n> 目前求 最大公约数有 质因数分解法、短除法、辗转相除法、更相减损法\n>\n> 其中最常用的为辗转相除法（又名欧几里得算法）\n>\n> 有精力的话可以了解一下扩展欧几里得算法\n\n\n\n#### 5.1.2 最小公倍数\n\n最小公倍数建立在最大公约数的基础上，即除了a,b的最大公约数外a与b的成绩除以最大公约数，\n表示为  lcm(a,b)\n$$\n最小公倍数=\\frac{a*b}{最大公约数}\n$$\n证明：\n\n> 有集合A，集合B，\n> 则知最大公约数 d=A∩B\n> 所以最小公倍数=(A-D)∪(B-D)\n> =AB/D\n\n### 5.2 分数的四则运算\n\n真分数：分子小于分母\n\n假分数：分子大于分母\n\n假分数：fen\n\n#### 5.2.1 分数的表示和化简\n\n分数通常写成假分数模式\n\nQ：如何表示分数\n\n1. 保证分母为正\n2. 约去公约数\n3. 分子为0，分母为1；\n\n```java\nclass  Fractional{\n\t\tFractional(int up,int down){\n\t\t\tint up;int down;\n            up=this.up;\n    \t\tdown=this.down;\n           \n        }\n}\nstatic Fractional fractional(int up,int down){\n     if(down<0){\n         up=-up;\n         down=-down;\n         }\n      if(up==0){\n          down=1;\n         }\n       else{\n          int d = gcd(abs(up),abs(down))\n          up/=d;\n          down/=d;\t\n            }\n   return Fractional\n}\npublic static void main(String args[]){\n    int up=5,down=2;\n    f = new Fractional(up,down)\n        \n}\n```\n\n\n\n#### 5.2.2 分数的运算\n\n分数有加减乘除运算\n\n1. 加法运算\n\n   ```java\n   Fractional add(Fraction f1,Fraction f2){\n       Fractional result;\n       result.up = f1.up*f2.down + f2.up*f1.down;\n       result.down = f1.down*f2.down;\n       return result;\n   }\n   ```\n\n   \n\n2. 减法，乘法，除法 同理\n\n#### 5.2.3 分数的标准输出\n\n1. 进行化简\n2. 1/1输出为1\n3. 输出真分数，整数部分为 $$ \\frac{r.up}{r.down}$$,分数的分母为 r.up%r.down;\n\n### 5.3 素数\n\n> 1 既不是素数也不是合数 \n>\n> 素数范围（1，n)\n\n#### 5.3.1素数判断\n\n方法一：对（1，sqrt(n)) 进行遍历 复杂度为 O(sqrt(n))\n\n```java\nboolean isPrame(int a){\n  \n    if(a<1){\n        return false;\n    }\n    for(int i=2;i<=sqrt(a);i++){\n        if(a%i==0)\n            return false;\n        \tbreak;\n    }\n    return true;\n}\n```\n\n方法二：对于要求复杂度的算法题时可以使用打表的方法解决\n\n```java\nint[] a = new int[101];\nint num = 0;\nvoid Find_Prame(){\n    for(int i=1){\n        if(isPrame(i)){\n            a[num++]=i;\n            \n        }\n}\n}\n```\n\n方法三：（埃氏筛法）复杂度为O(nlog(log(n))\n\n利用从前到后消除的原理\n\n```java\nint[] a = new int[101];\nboolean [] b = new boolean [n];//如果b[i]=false，是素数，b[i]=true不是素数\nvoid Find_Prame(){\n    for(int i=2;i<=n;i++){\n        if(b[i]=false){\n            for(int j=i+i;j<n;j+=i){\n                b[j]=true;\n            }\n            b[i]=false;\n        }\n    }\n}\n```\n\n例题：求解100内所有的素数\n\n```java\npublic static void main(String args[]){\n\t   boolean [] b = new boolean [101];\n\t    Find_Prame(b,100);\n\t    for(int i=2;i<=100;i++){\n\t        if(!b[i]){\n\t            System.out.print(i+\" \");\n\t        }\n\t    }\n}\t\nstatic void Find_Prame(boolean[] b,int n){\n   \n\t    for(int i=2;i<=n;i++){\n\t        if(!b[i]){\n\t            for(int j=i+i;j<=n;j+=i){\n\t                b[j]=true;\n\t            }\n\t            b[i]=false;\n\t        } \n\t    }\n}\n```\n\n\n\n### 5.4 质因子分解\n\nQ:什么是质因子分解：\n\n> 将一个正整数写成一个或多个质数乘积的形式\n> 6=2*3,12=2^2\\*3\n\n分解过程\n\n> 构造类 Factor记录 因子x，与因子的个数 cunt\n>\n> 因为所取最简化的因子一定为素数，直接采取对n进行取模运算。\n>\n> 对于正整数n，只存在一个因子大于sqrt(n),会存在一个或多个小于n的因子，\n>\n> 以此入手，如果在前sqrt(n)循环之前，仍然存在n!=1,必定n为素数\n>\n> 此时算法复杂度降到O(sqrt(n))\n\n```java\npublic static void main(String args[]){\n\t  int n=1997;\n\t  int m=n;\n\t  boolean []b=new boolean[10100];  \n\t  Factor [] fac= new Factor[10];  \n\t  int num=0;\n\t   int [] prime = Find_Prame(b);\n\t   \n\t\tfor(int i=2;prime[i-2]<Math.sqrt(m);i++){\n\t\t\tif(n%prime[i-2]==0){\n\t\t\t\tfac[num]=new Factor();\n\t\t\t\tfac[num].x=prime[i-2];\n\t\t\t\tfac[num].cunt=0;\n\t\t\t\twhile(n%prime[i-2]==0){\n\t\t\t\t\tfac[num].cunt++;\n\t\t\t\t\tn/=prime[i-2];\n                    //每次都除以因子\n\t\t\t\t}\n\t\t\t\tnum++;\n            }\t\t\t\n\t\t}\n\t\tif(n!=1){\n\t\t\tfac[num] = new Factor();\n\t\t\tfac[num].x=n;\n\t\t\tfac[num].cunt=1;\n\t\t}\n\t\tSystem.out.print(m+\"=\");\n\t\t\n\t\tfor(int i=0;i<num;i++){\n\t\t\t//System.out.println(fac[0].x);\n\t\t\tSystem.out.print(fac[i].x+\"^\"+fac[i].cunt+\"+\");\n\t\t}\n\t\tSystem.out.print(fac[num].x+\"^\"+String.valueOf(fac[num].cunt));\n}\t\nstatic  int[] Find_Prame(boolean[] b){\n\tint [] prame = new int[1000];\n\tint num = 0;\n\tfor(int i=2;i<=prame.length;i++){\n\t\tif(!b[i]){\n\t\t\tfor(int j=i+i;j<=b.length-1;j+=i){\n\t\t\t\tb[j]=true;\n\t\t\t\t\n\t\t\t}\n\t\t\tb[i]=false;\n\t\t\tprame[num++]=i;\n            //记录素数\n\t\t}\n\t}\n\treturn prame;\n}\n}\nclass Factor{\n\t//素数 x代表因子，cunt代表该因子的次方数\n\tint x;\n\tint cunt;\t\n\t\n}\n```\n\n\n\n### 5.5 大数运算\n\n#### 5.5.1 基本数据类型\n\n为什么要用大数计算？\n\n> 当数值大于可以取的范围时就不得不用到大数了。\n\n> 八种基本类型的运算范围如下\n>\n> | 数据类型 | 字节数 | 二进制位数 | 范围                                       | 规律        |\n> | -------- | ------ | ---------- | ------------------------------------------ | ----------- |\n> | byte     | 1      | 8          | -128～127                                  | -27～27-1   |\n> | short    | 2      | 16         | -32768～32767                              | -215～215-1 |\n> | int      | 4      | 32         | -2147483648～2147483647                    | -231～231-1 |\n> | long     | 8      | 64         | -9223372036854775808 ~ 9223372036854775807 | -263～263-1 |\n> | float    | 4      | 32         | 1.4E-45~3.4028235E38                       |             |\n> | double   | 8      | 64         | 4.9E-324~1.7976931348623157E308            |             |\n> | char     | 2      | 16         | 0～65535                                   | 0~216-1     |\n> | boolean  | 1      | 8          | true或false                                | true或false |\n\n#### 5.2.2 BigInteger\n\nJAVA里面提供了Integer类，专门运用于大数的计算。官方文档这样介绍\n\n> 不可变的任意精度的整数。所有操作中，都以二进制补码形式表示 BigInteger（如 Java 的基本整数类型）。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。\n\n也就是说\n\n> BigInteger 任意大的整数，原则上是，只要你的计算机的内存足够大，可以有无限位的.\n>\n> BigInteger属于java.math.BigInteger;\n\n由于biginteger不是基本类型，所以需要 new \n\n```\nBigInteger abs()  返回大整数的绝对值\nBigInteger add(BigInteger val) 返回两个大整数的和\nBigInteger and(BigInteger val)  返回两个大整数的按位与的结果\nBigInteger andNot(BigInteger val) 返回两个大整数与非的结果\nBigInteger divide(BigInteger val)  返回两个大整数的商\ndouble doubleValue()   返回大整数的double类型的值\nfloat floatValue()   返回大整数的float类型的值\nBigInteger gcd(BigInteger val)  返回大整数的最大公约数\nint intValue() 返回大整数的整型值\nlong longValue() 返回大整数的long型值\nBigInteger max(BigInteger val) 返回两个大整数的最大者\nBigInteger min(BigInteger val) 返回两个大整数的最小者\nBigInteger mod(BigInteger val) 用当前大整数对val求模\nBigInteger multiply(BigInteger val) 返回两个大整数的积\nBigInteger negate() 返回当前大整数的相反数\nBigInteger not() 返回当前大整数的非\nBigInteger or(BigInteger val) 返回两个大整数的按位或\nBigInteger pow(int exponent) 返回当前大整数的exponent次方\nBigInteger remainder(BigInteger val) 返回当前大整数除以val的余数\nBigInteger leftShift(int n) 将当前大整数左移n位后返回\nBigInteger rightShift(int n) 将当前大整数右移n位后返回\nBigInteger subtract(BigInteger val)返回两个大整数相减的结果\nbyte[] toByteArray(BigInteger val)将大整数转换成二进制反码保存在byte数组中\nString toString() 将当前大整数转换成十进制的字符串形式\nBigInteger xor(BigInteger val) 返回两个大整数的异或\nBigInteger compareTo(BigInteger val) 根据该数值是小于、等于、或大于 val 返回 -1、0 或 1；\nequals：判断两数是否相等，也可以用compareTo来代替；\nintValue，longValue，floatValue，doublue：把该数转换为该类型的数的值。\n```\n\n#### 5.5.2 Integer\n\n说到BigIntegerJ就不得说说integer了。\n\n> **java.lang.Integer**\n>\n> `Integer` 类在对象中包装了一个基本类型 `int` 的值。`Integer` 类型的对象包含一个 `int` 类型的字段。\n> 此外，该类提供了多个方法，能在 `int` 类型和 `String` 类型之间互相转换，还提供了处理 `int` 类型时非常有用的其他一些常量和方法。\n\n概括就是：int与integer范围上是一样的，不过封装了不少的方法可以调用\n\n```\ncompareTo(Integer anotherInteger) 在数字上比较两个 Integer 对象\ndoubleValue(),floatValue() ,intValue(),longValue()以 xx 类型返回该 Integer 的值\nparseInt(String s) 将字符串参数作为有符号的十进制整数进行解析\ntoString() 返回一个表示该 Integer 值的 String 对象。。将该参数转换为有符号的十进制表示形式，并以字符串             的形式返回它。\npublic static String \n将十进制数转换为二进制数（由0 1组成）\npublic static String \n将十进制数转换为八进制数（以0开头）\npublic static String \n将十进制数转换为十六进制数（以0x开头）\n\n```\n\n```\n最常用的方法了，进制转换，类型转换。\nInteger i = new Integer(10);\nint ii = i.intValue();//Integer 转换成 int\nInteger kk = Integer.valueOf(ii)//将ii转换为Integer\nint iii = Integer.parsetInt(\"10\");//字符串转成int类型\nk = Integer.parseInt(\"110\", 2);//radix进制的字符串转换成int\ntoBinaryString(int i),toOctalString(int i),toHexString(int i),转换成2,8,16进制\n```\n\n#### 5.5.3补充：\n\nQ: ‘==’,和equals()的区别\n\n> 众所周知,==比较的是地址,equals比较值。\n> 但是在integer中存在一个**IntegerCache**，也就是范围在[-128,127]的数值是直接在IntegerCache里面缓存的，所以当赋值的时候不会重新的new，而是直接的进行调用。\n> 那么 有了以下的比较：\n>\n> > a = new Integer(12), Integer b = 12; 由于a是new进行创建对象的，所以a会存在于堆里面，而b是在IntegerCache里获取的.\n> >\n> > 所以(a==b)为false\n>\n> > 当 integer不在该范围的时候，Integer会进行new, 然后自动装箱产生对象;\n> > 若 Integer a = 128,Integer b=128;\n> > 也会出现 (a==b)为false\n> > 但是如果Integer a = 127,Integer b=127;\n> > (a==b)为true\n>\n> > 当int与Integer进行比较的时候回自动的拆箱，转换为int进行比较\n>\n> \n>\n> [参考文章](https://blog.csdn.net/wangyang1354/article/details/52623703)\n\nQ：默认值\n\n> Integer的默认值是null，int的默认值是0\n\n装箱就是  自动将基本数据类型转换为包装器类型；拆箱就是  自动将包装器类型转换为基本数据类型。\n\n关于拆箱和分箱可以参考博客文章 [深入剖析Java中的装箱和拆箱](https://www.cnblogs.com/dolphin0520/p/3780005.html)\n\n### 5.6 组合数 \n\n> 从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；\n>\n> 从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数。\n>\n> 公式：\n> $$\n> C_{n}^{m} = \\frac{n!}{m!(n-m)!}\n> $$\n> C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;;      C<sub>n</sub><sup>m</sup>=C<sub>n</sub><sup>n-m</sup>;\n\n#### 5.6.1阶乘的质因子\n\nQ: 什么是阶乘呢？\n\n> 便于记录连乘，形如 n! =  1\\*2\\*3.....*n\n\nQ: n! 中有多少质因子2呢？\n\n> 最直接的方式就是 套两个for循环，复杂度达到O(N^2)\n>\n> 但是当n很大时，内存占用的会非常多的。\n\n方法一：\n\n通过我们的观察\n\n​                                                   2     n!中2^3的个数\n\n​                          2                       2\tn!中2^2的个数\n\n​              2          2           2         2            2  n!中2的个数\n\n10!=1 * 2 * 3* 4 * 5 * 6 * 7 * 8 * 9 * 10\n\n通过上面得到 在10！中 因子 2的个数为5,2^2 为2个，2^3 1个\n10！的质因子共 1+2+5=8\n\n同理 求 n!的质因子为p个数\n\n> $$\n> \\frac{n}{p}+\\frac{n}{p^{2}}+\\frac{n}{p^{3}}+\\frac{n}{p^{4}}+\\frac{n}{p^{5}}+·····\n> $$\n\n求解的终止条件为当int m=log<sub>2</sub>(n),既log(n)的向下取整\n\n```java\nint cal(int n,int p){\n    int m=n;\n    int sum=0;\n    for(int i=0;i<=Math.log(m)/Math.log(2);i++){\n        sum+=n/p;\n        n/=p;\n    }\n    return sum;\n}\n```\n\n其中 在java提供的Math函数求对数\n\nMath.log(m) = log<sub>e</sub>(m) \n$$\nlog_{2}^{m} = \\frac{log_{e}^{m}}{log_{e}{2}}\n$$\n然后发现这样也是可以的(判断条件简单多了，用for用的太多了，瞬间感觉while挺好的)\n\n```java\nint cal(int n,int p){\n    int sum=0;\n    while(n!=0){\n        sum+=n/p;\n        n/=p;\n    }\n    return sum;\n}\n```\n\n\n\n> 通过这个方法也可以求 n!的结果中有多少个0?\n> 即是求cal(n,5)\n> 这里求的是质因子5的个数，是因为在一个阶乘中每有一个二就会有一个5，2*5会创造一个0,而不是一个10才创造一个0;\n\n方法二：逆向递归\n从书上的理解是：\n\n> 10! = 2<sup>5</sup>+5!+1\\*3\\*5\\*7\\*9\n>\n> 5! = 2<sup>2</sup> + 2！+ 1\\*3\\*5\n>\n> 和刚刚方法一是一样的原理\n\n```java\nint cal(int n,int p){\n    if(n<p) return 0;\n    return n/p + cal(n/p,p);\n}\n```\n\n#### 5.6.2 组合数的计算\n\n1，计算 C<sub>n</sub><sup>m</sup>\n$$\nC_{n}^{m} = \\frac{n!}{m!(n-m)!}=\\frac{(n-m+1)(n-m+2)····(n-m+m)}{m！}\n$$\n通过展开式能够看出，分子分母都为m项的，且C<sub>n</sub><sup>m</sup>的结果都是为整数，故此我们可以边乘边除，而不是每一项分开除再乘的；这样的话就可以避免乘法的溢出。\n\n```java\n  int C(int n,int m){\n        int sum=1;\n        for(int i=1;i<=m;i++){\n            sum=sum*(n-m+i)/i;\n            /**不能写成sum*=(n-m+i)/i;这样是先计算每一项除法的结果，而每一项无法保证为整数，只有先乘后除**/\n        }\n        return sum;\n    }\n```\n\n方法二：通过递推公式\n\n当我们从n个数中取出m个的组合也就是  C<sub>n</sub><sup>m</sup> ,如何我们先不取最后一个数，先从n-1个当中取出m个，然后选取最后一个，再从n-1个当中选取m-1个，既可以得到\n$$\nC_{n}^{m} = C_{n-1}^{m}+c_{n-1}^{m-1}\n$$\n运用递归可以很快的写出代码，递归的判断条件是当m=0，或者m=n；\n\n> 写递归一定要先判断好递归终止的条件 C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;\n\n```java\n int C(int n,int m){\n     if(n==m||m==0){\n         return 1;\n     }\n        return C(n-1,m)+C(n-1,m-1);\n  }\n```\n\n​                                                                                                                                             \n\n\n\n","slug":"arithmetic/JAVA_Alg_Math","published":1,"updated":"2020-03-22T11:13:25.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5xd002qrwv03k79on0a","content":"<h2 id=\"数学问题\"><a href=\"#数学问题\" class=\"headerlink\" title=\"数学问题\"></a><span id=\"math\">数学问题</span></h2><p>写在前面</p><p>自然数：非负整数，0,1,2,3,4……</p><p>合数：存在a(1&lt;a&lt;n),使得n % a ==0,称n为合数</p><p>素数(质数）：对于任意a(1&lt;a&lt;n),都有n % a !=0,称n为素数。</p><a id=\"more\"></a>\n\n\n\n<p>​    质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。</p>\n<p>约数与倍数：</p>\n<p>整数a能够被整数b整除，那么a就是b的倍数，b就是a的约数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">b/a==<span class=\"number\">0</span>约数又称为因数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-最大公约数和最小公倍数\"><a href=\"#5-1-最大公约数和最小公倍数\" class=\"headerlink\" title=\"5.1 最大公约数和最小公倍数\"></a>5.1 最大公约数和最小公倍数</h3><h4 id=\"5-1-1-最大公约数\"><a href=\"#5-1-1-最大公约数\" class=\"headerlink\" title=\"5.1.1 最大公约数\"></a>5.1.1 最大公约数</h4><p>Q1:什么是最大公约数</p>\n<blockquote>\n<p>最大公约数，又称最大公因数，指两个整数相同的最大约数。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">12</span>,b=<span class=\"number\">8</span>;</span><br><span class=\"line\">gcd(<span class=\"number\">12</span>,<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">//gcd(12,8)=4</span></span><br></pre></td></tr></table></figure>\n\n<p>Q2:有什么用呢？</p>\n<blockquote>\n<p>欧几里德算法可用于RSA加密等领域。</p>\n</blockquote>\n<p>Q3:如何去求最大公约数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// a&gt;=b</span></span><br><span class=\"line\"> swap(a，b);</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> gcd(b,a%b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(a,b)</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(a&lt;b)&#123;</span><br><span class=\"line\">     a=temp;</span><br><span class=\"line\">     a=b;</span><br><span class=\"line\">     b=temp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>证明：</p>\n<blockquote>\n<p>既证明 gcd(a,b) = gcd(b,a mod b) 的过程</p>\n<p>其计算原理依赖于下面的定理：<br><em>定理：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。最大公约数（Greatest Common Divisor）缩写为GCD。<br>gcd(a,b) = gcd(b,a mod b) (不妨设a&gt;b 且r=a mod b ,r不为0)</em></p>\n<p>a可以表示成a = kb + r（a，b，k，r皆为正整数，且r&lt;b），则r = a % b<br>假设d是a,b的一个公约数，<br>而r = a - kb，两边同时除以d，</p>\n<p> $$ \\frac{r}{d}=\\frac{a}{d}-\\frac{kb}{d}=m $$</p>\n<p>由等式右边可知m为整数，因此d是r的约数<br>因此d也是b,a % b的公约数<br>进而d|a.因此d也是a,b的公约数，由于d的任意性，得a和b的公约数都是a%b的公约数<br>由a = kb + r,同理可证 b 和 a % b的公约数都是 a和b的公约数。<br>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，<br>得证。</p>\n</blockquote>\n</blockquote>\n<p>Q4:还有其他方法吗？</p>\n<blockquote>\n<p>目前求 最大公约数有 质因数分解法、短除法、辗转相除法、更相减损法</p>\n<p>其中最常用的为辗转相除法（又名欧几里得算法）</p>\n<p>有精力的话可以了解一下扩展欧几里得算法</p>\n</blockquote>\n<h4 id=\"5-1-2-最小公倍数\"><a href=\"#5-1-2-最小公倍数\" class=\"headerlink\" title=\"5.1.2 最小公倍数\"></a>5.1.2 最小公倍数</h4><p>最小公倍数建立在最大公约数的基础上，即除了a,b的最大公约数外a与b的成绩除以最大公约数，<br>表示为  lcm(a,b)<br>$$<br>最小公倍数=\\frac{a*b}{最大公约数}<br>$$<br>证明：</p>\n<blockquote>\n<p>有集合A，集合B，<br>则知最大公约数 d=A∩B<br>所以最小公倍数=(A-D)∪(B-D)<br>=AB/D</p>\n</blockquote>\n<h3 id=\"5-2-分数的四则运算\"><a href=\"#5-2-分数的四则运算\" class=\"headerlink\" title=\"5.2 分数的四则运算\"></a>5.2 分数的四则运算</h3><p>真分数：分子小于分母</p>\n<p>假分数：分子大于分母</p>\n<p>假分数：fen</p>\n<h4 id=\"5-2-1-分数的表示和化简\"><a href=\"#5-2-1-分数的表示和化简\" class=\"headerlink\" title=\"5.2.1 分数的表示和化简\"></a>5.2.1 分数的表示和化简</h4><p>分数通常写成假分数模式</p>\n<p>Q：如何表示分数</p>\n<ol>\n<li>保证分母为正</li>\n<li>约去公约数</li>\n<li>分子为0，分母为1；</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Fractional</span></span>&#123;</span><br><span class=\"line\">\t\tFractional(<span class=\"keyword\">int</span> up,<span class=\"keyword\">int</span> down)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> up;<span class=\"keyword\">int</span> down;</span><br><span class=\"line\">            up=<span class=\"keyword\">this</span>.up;</span><br><span class=\"line\">    \t\tdown=<span class=\"keyword\">this</span>.down;</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Fractional <span class=\"title\">fractional</span><span class=\"params\">(<span class=\"keyword\">int</span> up,<span class=\"keyword\">int</span> down)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(down&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         up=-up;</span><br><span class=\"line\">         down=-down;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(up==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">          down=<span class=\"number\">1</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> d = gcd(abs(up),abs(down))</span><br><span class=\"line\">          up/=d;</span><br><span class=\"line\">          down/=d;\t</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> Fractional</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> up=<span class=\"number\">5</span>,down=<span class=\"number\">2</span>;</span><br><span class=\"line\">    f = <span class=\"keyword\">new</span> Fractional(up,down)</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-2-分数的运算\"><a href=\"#5-2-2-分数的运算\" class=\"headerlink\" title=\"5.2.2 分数的运算\"></a>5.2.2 分数的运算</h4><p>分数有加减乘除运算</p>\n<ol>\n<li><p>加法运算</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Fractional <span class=\"title\">add</span><span class=\"params\">(Fraction f1,Fraction f2)</span></span>&#123;</span><br><span class=\"line\">    Fractional result;</span><br><span class=\"line\">    result.up = f1.up*f2.down + f2.up*f1.down;</span><br><span class=\"line\">    result.down = f1.down*f2.down;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li>减法，乘法，除法 同理</li>\n</ol>\n<h4 id=\"5-2-3-分数的标准输出\"><a href=\"#5-2-3-分数的标准输出\" class=\"headerlink\" title=\"5.2.3 分数的标准输出\"></a>5.2.3 分数的标准输出</h4><ol>\n<li>进行化简</li>\n<li>1/1输出为1</li>\n<li>输出真分数，整数部分为 $$ \\frac{r.up}{r.down}$$,分数的分母为 r.up%r.down;</li>\n</ol>\n<h3 id=\"5-3-素数\"><a href=\"#5-3-素数\" class=\"headerlink\" title=\"5.3 素数\"></a>5.3 素数</h3><blockquote>\n<p>1 既不是素数也不是合数 </p>\n<p>素数范围（1，n)</p>\n</blockquote>\n<h4 id=\"5-3-1素数判断\"><a href=\"#5-3-1素数判断\" class=\"headerlink\" title=\"5.3.1素数判断\"></a>5.3.1素数判断</h4><p>方法一：对（1，sqrt(n)) 进行遍历 复杂度为 O(sqrt(n))</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isPrame</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&lt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=sqrt(a);i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二：对于要求复杂度的算法题时可以使用打表的方法解决</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Find_Prame</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrame(i))&#123;</span><br><span class=\"line\">            a[num++]=i;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法三：（埃氏筛法）复杂度为O(nlog(log(n))</p>\n<p>利用从前到后消除的原理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> [] b = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span> [n];<span class=\"comment\">//如果b[i]=false，是素数，b[i]=true不是素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Find_Prame</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]=<span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+i;j&lt;n;j+=i)&#123;</span><br><span class=\"line\">                b[j]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            b[i]=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例题：求解100内所有的素数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">boolean</span> [] b = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span> [<span class=\"number\">101</span>];</span><br><span class=\"line\">\t    Find_Prame(b,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span>(!b[i])&#123;</span><br><span class=\"line\">\t            System.out.print(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Find_Prame</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] b,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span>(!b[i])&#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class=\"line\">\t                b[j]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t            b[i]=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t        &#125; </span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-质因子分解\"><a href=\"#5-4-质因子分解\" class=\"headerlink\" title=\"5.4 质因子分解\"></a>5.4 质因子分解</h3><p>Q:什么是质因子分解：</p>\n<blockquote>\n<p>将一个正整数写成一个或多个质数乘积的形式<br>6=2<em>3,12=2^2\\</em>3</p>\n</blockquote>\n<p>分解过程</p>\n<blockquote>\n<p>构造类 Factor记录 因子x，与因子的个数 cunt</p>\n<p>因为所取最简化的因子一定为素数，直接采取对n进行取模运算。</p>\n<p>对于正整数n，只存在一个因子大于sqrt(n),会存在一个或多个小于n的因子，</p>\n<p>以此入手，如果在前sqrt(n)循环之前，仍然存在n!=1,必定n为素数</p>\n<p>此时算法复杂度降到O(sqrt(n))</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> n=<span class=\"number\">1997</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> m=n;</span><br><span class=\"line\">\t  <span class=\"keyword\">boolean</span> []b=<span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">10100</span>];  </span><br><span class=\"line\">\t  Factor [] fac= <span class=\"keyword\">new</span> Factor[<span class=\"number\">10</span>];  </span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"keyword\">int</span> [] prime = Find_Prame(b);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;prime[i-<span class=\"number\">2</span>]&lt;Math.sqrt(m);i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(n%prime[i-<span class=\"number\">2</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tfac[num]=<span class=\"keyword\">new</span> Factor();</span><br><span class=\"line\">\t\t\t\tfac[num].x=prime[i-<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t\t\tfac[num].cunt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(n%prime[i-<span class=\"number\">2</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tfac[num].cunt++;</span><br><span class=\"line\">\t\t\t\t\tn/=prime[i-<span class=\"number\">2</span>];</span><br><span class=\"line\">                    <span class=\"comment\">//每次都除以因子</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tnum++;</span><br><span class=\"line\">            &#125;\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\tfac[num] = <span class=\"keyword\">new</span> Factor();</span><br><span class=\"line\">\t\t\tfac[num].x=n;</span><br><span class=\"line\">\t\t\tfac[num].cunt=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(m+<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(fac[0].x);</span></span><br><span class=\"line\">\t\t\tSystem.out.print(fac[i].x+<span class=\"string\">\"^\"</span>+fac[i].cunt+<span class=\"string\">\"+\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(fac[num].x+<span class=\"string\">\"^\"</span>+String.valueOf(fac[num].cunt));</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"keyword\">static</span>  <span class=\"keyword\">int</span>[] Find_Prame(<span class=\"keyword\">boolean</span>[] b)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> [] prame = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=prame.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!b[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+i;j&lt;=b.length-<span class=\"number\">1</span>;j+=i)&#123;</span><br><span class=\"line\">\t\t\t\tb[j]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb[i]=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\tprame[num++]=i;</span><br><span class=\"line\">            <span class=\"comment\">//记录素数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> prame;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factor</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//素数 x代表因子，cunt代表该因子的次方数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cunt;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-大数运算\"><a href=\"#5-5-大数运算\" class=\"headerlink\" title=\"5.5 大数运算\"></a>5.5 大数运算</h3><h4 id=\"5-5-1-基本数据类型\"><a href=\"#5-5-1-基本数据类型\" class=\"headerlink\" title=\"5.5.1 基本数据类型\"></a>5.5.1 基本数据类型</h4><p>为什么要用大数计算？</p>\n<blockquote>\n<p>当数值大于可以取的范围时就不得不用到大数了。</p>\n</blockquote>\n<blockquote>\n<p>八种基本类型的运算范围如下</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节数</th>\n<th>二进制位数</th>\n<th>范围</th>\n<th>规律</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1</td>\n<td>8</td>\n<td>-128～127</td>\n<td>-27～27-1</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n<td>-32768～32767</td>\n<td>-215～215-1</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n<td>-2147483648～2147483647</td>\n<td>-231～231-1</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n<td>-9223372036854775808 ~ 9223372036854775807</td>\n<td>-263～263-1</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n<td>1.4E-45~3.4028235E38</td>\n<td></td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n<td>4.9E-324~1.7976931348623157E308</td>\n<td></td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n<td>16</td>\n<td>0～65535</td>\n<td>0~216-1</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>1</td>\n<td>8</td>\n<td>true或false</td>\n<td>true或false</td>\n</tr>\n</tbody></table>\n</blockquote>\n<h4 id=\"5-2-2-BigInteger\"><a href=\"#5-2-2-BigInteger\" class=\"headerlink\" title=\"5.2.2 BigInteger\"></a>5.2.2 BigInteger</h4><p>JAVA里面提供了Integer类，专门运用于大数的计算。官方文档这样介绍</p>\n<blockquote>\n<p>不可变的任意精度的整数。所有操作中，都以二进制补码形式表示 BigInteger（如 Java 的基本整数类型）。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。</p>\n</blockquote>\n<p>也就是说</p>\n<blockquote>\n<p>BigInteger 任意大的整数，原则上是，只要你的计算机的内存足够大，可以有无限位的.</p>\n<p>BigInteger属于java.math.BigInteger;</p>\n</blockquote>\n<p>由于biginteger不是基本类型，所以需要 new </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger abs()  返回大整数的绝对值</span><br><span class=\"line\">BigInteger add(BigInteger val) 返回两个大整数的和</span><br><span class=\"line\">BigInteger and(BigInteger val)  返回两个大整数的按位与的结果</span><br><span class=\"line\">BigInteger andNot(BigInteger val) 返回两个大整数与非的结果</span><br><span class=\"line\">BigInteger divide(BigInteger val)  返回两个大整数的商</span><br><span class=\"line\">double doubleValue()   返回大整数的double类型的值</span><br><span class=\"line\">float floatValue()   返回大整数的float类型的值</span><br><span class=\"line\">BigInteger gcd(BigInteger val)  返回大整数的最大公约数</span><br><span class=\"line\">int intValue() 返回大整数的整型值</span><br><span class=\"line\">long longValue() 返回大整数的long型值</span><br><span class=\"line\">BigInteger max(BigInteger val) 返回两个大整数的最大者</span><br><span class=\"line\">BigInteger min(BigInteger val) 返回两个大整数的最小者</span><br><span class=\"line\">BigInteger mod(BigInteger val) 用当前大整数对val求模</span><br><span class=\"line\">BigInteger multiply(BigInteger val) 返回两个大整数的积</span><br><span class=\"line\">BigInteger negate() 返回当前大整数的相反数</span><br><span class=\"line\">BigInteger not() 返回当前大整数的非</span><br><span class=\"line\">BigInteger or(BigInteger val) 返回两个大整数的按位或</span><br><span class=\"line\">BigInteger pow(int exponent) 返回当前大整数的exponent次方</span><br><span class=\"line\">BigInteger remainder(BigInteger val) 返回当前大整数除以val的余数</span><br><span class=\"line\">BigInteger leftShift(int n) 将当前大整数左移n位后返回</span><br><span class=\"line\">BigInteger rightShift(int n) 将当前大整数右移n位后返回</span><br><span class=\"line\">BigInteger subtract(BigInteger val)返回两个大整数相减的结果</span><br><span class=\"line\">byte[] toByteArray(BigInteger val)将大整数转换成二进制反码保存在byte数组中</span><br><span class=\"line\">String toString() 将当前大整数转换成十进制的字符串形式</span><br><span class=\"line\">BigInteger xor(BigInteger val) 返回两个大整数的异或</span><br><span class=\"line\">BigInteger compareTo(BigInteger val) 根据该数值是小于、等于、或大于 val 返回 -1、0 或 1；</span><br><span class=\"line\">equals：判断两数是否相等，也可以用compareTo来代替；</span><br><span class=\"line\">intValue，longValue，floatValue，doublue：把该数转换为该类型的数的值。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-5-2-Integer\"><a href=\"#5-5-2-Integer\" class=\"headerlink\" title=\"5.5.2 Integer\"></a>5.5.2 Integer</h4><p>说到BigIntegerJ就不得说说integer了。</p>\n<blockquote>\n<p><strong>java.lang.Integer</strong></p>\n<p><code>Integer</code> 类在对象中包装了一个基本类型 <code>int</code> 的值。<code>Integer</code> 类型的对象包含一个 <code>int</code> 类型的字段。<br>此外，该类提供了多个方法，能在 <code>int</code> 类型和 <code>String</code> 类型之间互相转换，还提供了处理 <code>int</code> 类型时非常有用的其他一些常量和方法。</p>\n</blockquote>\n<p>概括就是：int与integer范围上是一样的，不过封装了不少的方法可以调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compareTo(Integer anotherInteger) 在数字上比较两个 Integer 对象</span><br><span class=\"line\">doubleValue(),floatValue() ,intValue(),longValue()以 xx 类型返回该 Integer 的值</span><br><span class=\"line\">parseInt(String s) 将字符串参数作为有符号的十进制整数进行解析</span><br><span class=\"line\">toString() 返回一个表示该 Integer 值的 String 对象。。将该参数转换为有符号的十进制表示形式，并以字符串             的形式返回它。</span><br><span class=\"line\">public static String </span><br><span class=\"line\">将十进制数转换为二进制数（由0 1组成）</span><br><span class=\"line\">public static String </span><br><span class=\"line\">将十进制数转换为八进制数（以0开头）</span><br><span class=\"line\">public static String </span><br><span class=\"line\">将十进制数转换为十六进制数（以0x开头）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最常用的方法了，进制转换，类型转换。</span><br><span class=\"line\">Integer i = new Integer(10);</span><br><span class=\"line\">int ii = i.intValue();//Integer 转换成 int</span><br><span class=\"line\">Integer kk = Integer.valueOf(ii)//将ii转换为Integer</span><br><span class=\"line\">int iii = Integer.parsetInt(&quot;10&quot;);//字符串转成int类型</span><br><span class=\"line\">k = Integer.parseInt(&quot;110&quot;, 2);//radix进制的字符串转换成int</span><br><span class=\"line\">toBinaryString(int i),toOctalString(int i),toHexString(int i),转换成2,8,16进制</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-5-3补充：\"><a href=\"#5-5-3补充：\" class=\"headerlink\" title=\"5.5.3补充：\"></a>5.5.3补充：</h4><p>Q: ‘==’,和equals()的区别</p>\n<blockquote>\n<p>众所周知,==比较的是地址,equals比较值。<br>但是在integer中存在一个<strong>IntegerCache</strong>，也就是范围在[-128,127]的数值是直接在IntegerCache里面缓存的，所以当赋值的时候不会重新的new，而是直接的进行调用。<br>那么 有了以下的比较：</p>\n<blockquote>\n<p>a = new Integer(12), Integer b = 12; 由于a是new进行创建对象的，所以a会存在于堆里面，而b是在IntegerCache里获取的.</p>\n<p>所以(a==b)为false</p>\n</blockquote>\n<blockquote>\n<p>当 integer不在该范围的时候，Integer会进行new, 然后自动装箱产生对象;<br>若 Integer a = 128,Integer b=128;<br>也会出现 (a==b)为false<br>但是如果Integer a = 127,Integer b=127;<br>(a==b)为true</p>\n</blockquote>\n<blockquote>\n<p>当int与Integer进行比较的时候回自动的拆箱，转换为int进行比较</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/wangyang1354/article/details/52623703\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n</blockquote>\n<p>Q：默认值</p>\n<blockquote>\n<p>Integer的默认值是null，int的默认值是0</p>\n</blockquote>\n<p>装箱就是  自动将基本数据类型转换为包装器类型；拆箱就是  自动将包装器类型转换为基本数据类型。</p>\n<p>关于拆箱和分箱可以参考博客文章 <a href=\"https://www.cnblogs.com/dolphin0520/p/3780005.html\" target=\"_blank\" rel=\"noopener\">深入剖析Java中的装箱和拆箱</a></p>\n<h3 id=\"5-6-组合数\"><a href=\"#5-6-组合数\" class=\"headerlink\" title=\"5.6 组合数\"></a>5.6 组合数</h3><blockquote>\n<p>从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；</p>\n<p>从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数。</p>\n<p>公式：<br>$$<br>C_{n}^{m} = \\frac{n!}{m!(n-m)!}<br>$$<br>C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;;      C<sub>n</sub><sup>m</sup>=C<sub>n</sub><sup>n-m</sup>;</p>\n</blockquote>\n<h4 id=\"5-6-1阶乘的质因子\"><a href=\"#5-6-1阶乘的质因子\" class=\"headerlink\" title=\"5.6.1阶乘的质因子\"></a>5.6.1阶乘的质因子</h4><p>Q: 什么是阶乘呢？</p>\n<blockquote>\n<p>便于记录连乘，形如 n! =  1*2*3…..*n</p>\n</blockquote>\n<p>Q: n! 中有多少质因子2呢？</p>\n<blockquote>\n<p>最直接的方式就是 套两个for循环，复杂度达到O(N^2)</p>\n<p>但是当n很大时，内存占用的会非常多的。</p>\n</blockquote>\n<p>方法一：</p>\n<p>通过我们的观察</p>\n<p>​                                                   2     n!中2^3的个数</p>\n<p>​                          2                       2    n!中2^2的个数</p>\n<p>​              2          2           2         2            2  n!中2的个数</p>\n<p>10!=1 * 2 * 3* 4 * 5 * 6 * 7 * 8 * 9 * 10</p>\n<p>通过上面得到 在10！中 因子 2的个数为5,2^2 为2个，2^3 1个<br>10！的质因子共 1+2+5=8</p>\n<p>同理 求 n!的质因子为p个数</p>\n<blockquote>\n<p>$$<br>\\frac{n}{p}+\\frac{n}{p^{2}}+\\frac{n}{p^{3}}+\\frac{n}{p^{4}}+\\frac{n}{p^{5}}+·····<br>$$</p>\n</blockquote>\n<p>求解的终止条件为当int m=log<sub>2</sub>(n),既log(n)的向下取整</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=Math.log(m)/Math.log(<span class=\"number\">2</span>);i++)&#123;</span><br><span class=\"line\">        sum+=n/p;</span><br><span class=\"line\">        n/=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 在java提供的Math函数求对数</p>\n<p>Math.log(m) = log<sub>e</sub>(m)<br>$$<br>log_{2}^{m} = \\frac{log_{e}^{m}}{log_{e}{2}}<br>$$<br>然后发现这样也是可以的(判断条件简单多了，用for用的太多了，瞬间感觉while挺好的)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        sum+=n/p;</span><br><span class=\"line\">        n/=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通过这个方法也可以求 n!的结果中有多少个0?<br>即是求cal(n,5)<br>这里求的是质因子5的个数，是因为在一个阶乘中每有一个二就会有一个5，2*5会创造一个0,而不是一个10才创造一个0;</p>\n</blockquote>\n<p>方法二：逆向递归<br>从书上的理解是：</p>\n<blockquote>\n<p>10! = 2<sup>5</sup>+5!+1*3*5*7*9</p>\n<p>5! = 2<sup>2</sup> + 2！+ 1*3*5</p>\n<p>和刚刚方法一是一样的原理</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;p) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n/p + cal(n/p,p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-6-2-组合数的计算\"><a href=\"#5-6-2-组合数的计算\" class=\"headerlink\" title=\"5.6.2 组合数的计算\"></a>5.6.2 组合数的计算</h4><p>1，计算 C<sub>n</sub><sup>m</sup><br>$$<br>C_{n}^{m} = \\frac{n!}{m!(n-m)!}=\\frac{(n-m+1)(n-m+2)····(n-m+m)}{m！}<br>$$<br>通过展开式能够看出，分子分母都为m项的，且C<sub>n</sub><sup>m</sup>的结果都是为整数，故此我们可以边乘边除，而不是每一项分开除再乘的；这样的话就可以避免乘法的溢出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">          sum=sum*(n-m+i)/i;</span><br><span class=\"line\">          <span class=\"comment\">/**不能写成sum*=(n-m+i)/i;这样是先计算每一项除法的结果，而每一项无法保证为整数，只有先乘后除**/</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二：通过递推公式</p>\n<p>当我们从n个数中取出m个的组合也就是  C<sub>n</sub><sup>m</sup> ,如何我们先不取最后一个数，先从n-1个当中取出m个，然后选取最后一个，再从n-1个当中选取m-1个，既可以得到<br>$$<br>C_{n}^{m} = C_{n-1}^{m}+c_{n-1}^{m-1}<br>$$<br>运用递归可以很快的写出代码，递归的判断条件是当m=0，或者m=n；</p>\n<blockquote>\n<p>写递归一定要先判断好递归终止的条件 C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==m||m==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> C(n-<span class=\"number\">1</span>,m)+C(n-<span class=\"number\">1</span>,m-<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​                                                                                                                                             </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"数学问题\"><a href=\"#数学问题\" class=\"headerlink\" title=\"数学问题\"></a><span id=\"math\">数学问题</span></h2><p>写在前面</p><p>自然数：非负整数，0,1,2,3,4……</p><p>合数：存在a(1&lt;a&lt;n),使得n % a ==0,称n为合数</p><p>素数(质数）：对于任意a(1&lt;a&lt;n),都有n % a !=0,称n为素数。</p>","more":"\n\n\n\n<p>​    质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。</p>\n<p>约数与倍数：</p>\n<p>整数a能够被整数b整除，那么a就是b的倍数，b就是a的约数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">b/a==<span class=\"number\">0</span>约数又称为因数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-最大公约数和最小公倍数\"><a href=\"#5-1-最大公约数和最小公倍数\" class=\"headerlink\" title=\"5.1 最大公约数和最小公倍数\"></a>5.1 最大公约数和最小公倍数</h3><h4 id=\"5-1-1-最大公约数\"><a href=\"#5-1-1-最大公约数\" class=\"headerlink\" title=\"5.1.1 最大公约数\"></a>5.1.1 最大公约数</h4><p>Q1:什么是最大公约数</p>\n<blockquote>\n<p>最大公约数，又称最大公因数，指两个整数相同的最大约数。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">12</span>,b=<span class=\"number\">8</span>;</span><br><span class=\"line\">gcd(<span class=\"number\">12</span>,<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">//gcd(12,8)=4</span></span><br></pre></td></tr></table></figure>\n\n<p>Q2:有什么用呢？</p>\n<blockquote>\n<p>欧几里德算法可用于RSA加密等领域。</p>\n</blockquote>\n<p>Q3:如何去求最大公约数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// a&gt;=b</span></span><br><span class=\"line\"> swap(a，b);</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> gcd(b,a%b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(a,b)</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(a&lt;b)&#123;</span><br><span class=\"line\">     a=temp;</span><br><span class=\"line\">     a=b;</span><br><span class=\"line\">     b=temp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>证明：</p>\n<blockquote>\n<p>既证明 gcd(a,b) = gcd(b,a mod b) 的过程</p>\n<p>其计算原理依赖于下面的定理：<br><em>定理：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。最大公约数（Greatest Common Divisor）缩写为GCD。<br>gcd(a,b) = gcd(b,a mod b) (不妨设a&gt;b 且r=a mod b ,r不为0)</em></p>\n<p>a可以表示成a = kb + r（a，b，k，r皆为正整数，且r&lt;b），则r = a % b<br>假设d是a,b的一个公约数，<br>而r = a - kb，两边同时除以d，</p>\n<p> $$ \\frac{r}{d}=\\frac{a}{d}-\\frac{kb}{d}=m $$</p>\n<p>由等式右边可知m为整数，因此d是r的约数<br>因此d也是b,a % b的公约数<br>进而d|a.因此d也是a,b的公约数，由于d的任意性，得a和b的公约数都是a%b的公约数<br>由a = kb + r,同理可证 b 和 a % b的公约数都是 a和b的公约数。<br>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，<br>得证。</p>\n</blockquote>\n</blockquote>\n<p>Q4:还有其他方法吗？</p>\n<blockquote>\n<p>目前求 最大公约数有 质因数分解法、短除法、辗转相除法、更相减损法</p>\n<p>其中最常用的为辗转相除法（又名欧几里得算法）</p>\n<p>有精力的话可以了解一下扩展欧几里得算法</p>\n</blockquote>\n<h4 id=\"5-1-2-最小公倍数\"><a href=\"#5-1-2-最小公倍数\" class=\"headerlink\" title=\"5.1.2 最小公倍数\"></a>5.1.2 最小公倍数</h4><p>最小公倍数建立在最大公约数的基础上，即除了a,b的最大公约数外a与b的成绩除以最大公约数，<br>表示为  lcm(a,b)<br>$$<br>最小公倍数=\\frac{a*b}{最大公约数}<br>$$<br>证明：</p>\n<blockquote>\n<p>有集合A，集合B，<br>则知最大公约数 d=A∩B<br>所以最小公倍数=(A-D)∪(B-D)<br>=AB/D</p>\n</blockquote>\n<h3 id=\"5-2-分数的四则运算\"><a href=\"#5-2-分数的四则运算\" class=\"headerlink\" title=\"5.2 分数的四则运算\"></a>5.2 分数的四则运算</h3><p>真分数：分子小于分母</p>\n<p>假分数：分子大于分母</p>\n<p>假分数：fen</p>\n<h4 id=\"5-2-1-分数的表示和化简\"><a href=\"#5-2-1-分数的表示和化简\" class=\"headerlink\" title=\"5.2.1 分数的表示和化简\"></a>5.2.1 分数的表示和化简</h4><p>分数通常写成假分数模式</p>\n<p>Q：如何表示分数</p>\n<ol>\n<li>保证分母为正</li>\n<li>约去公约数</li>\n<li>分子为0，分母为1；</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Fractional</span></span>&#123;</span><br><span class=\"line\">\t\tFractional(<span class=\"keyword\">int</span> up,<span class=\"keyword\">int</span> down)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> up;<span class=\"keyword\">int</span> down;</span><br><span class=\"line\">            up=<span class=\"keyword\">this</span>.up;</span><br><span class=\"line\">    \t\tdown=<span class=\"keyword\">this</span>.down;</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Fractional <span class=\"title\">fractional</span><span class=\"params\">(<span class=\"keyword\">int</span> up,<span class=\"keyword\">int</span> down)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(down&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         up=-up;</span><br><span class=\"line\">         down=-down;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(up==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">          down=<span class=\"number\">1</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> d = gcd(abs(up),abs(down))</span><br><span class=\"line\">          up/=d;</span><br><span class=\"line\">          down/=d;\t</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> Fractional</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> up=<span class=\"number\">5</span>,down=<span class=\"number\">2</span>;</span><br><span class=\"line\">    f = <span class=\"keyword\">new</span> Fractional(up,down)</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-2-分数的运算\"><a href=\"#5-2-2-分数的运算\" class=\"headerlink\" title=\"5.2.2 分数的运算\"></a>5.2.2 分数的运算</h4><p>分数有加减乘除运算</p>\n<ol>\n<li><p>加法运算</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Fractional <span class=\"title\">add</span><span class=\"params\">(Fraction f1,Fraction f2)</span></span>&#123;</span><br><span class=\"line\">    Fractional result;</span><br><span class=\"line\">    result.up = f1.up*f2.down + f2.up*f1.down;</span><br><span class=\"line\">    result.down = f1.down*f2.down;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li>减法，乘法，除法 同理</li>\n</ol>\n<h4 id=\"5-2-3-分数的标准输出\"><a href=\"#5-2-3-分数的标准输出\" class=\"headerlink\" title=\"5.2.3 分数的标准输出\"></a>5.2.3 分数的标准输出</h4><ol>\n<li>进行化简</li>\n<li>1/1输出为1</li>\n<li>输出真分数，整数部分为 $$ \\frac{r.up}{r.down}$$,分数的分母为 r.up%r.down;</li>\n</ol>\n<h3 id=\"5-3-素数\"><a href=\"#5-3-素数\" class=\"headerlink\" title=\"5.3 素数\"></a>5.3 素数</h3><blockquote>\n<p>1 既不是素数也不是合数 </p>\n<p>素数范围（1，n)</p>\n</blockquote>\n<h4 id=\"5-3-1素数判断\"><a href=\"#5-3-1素数判断\" class=\"headerlink\" title=\"5.3.1素数判断\"></a>5.3.1素数判断</h4><p>方法一：对（1，sqrt(n)) 进行遍历 复杂度为 O(sqrt(n))</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isPrame</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&lt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=sqrt(a);i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二：对于要求复杂度的算法题时可以使用打表的方法解决</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Find_Prame</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrame(i))&#123;</span><br><span class=\"line\">            a[num++]=i;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法三：（埃氏筛法）复杂度为O(nlog(log(n))</p>\n<p>利用从前到后消除的原理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> [] b = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span> [n];<span class=\"comment\">//如果b[i]=false，是素数，b[i]=true不是素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Find_Prame</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]=<span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+i;j&lt;n;j+=i)&#123;</span><br><span class=\"line\">                b[j]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            b[i]=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例题：求解100内所有的素数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">boolean</span> [] b = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span> [<span class=\"number\">101</span>];</span><br><span class=\"line\">\t    Find_Prame(b,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span>(!b[i])&#123;</span><br><span class=\"line\">\t            System.out.print(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Find_Prame</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] b,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span>(!b[i])&#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class=\"line\">\t                b[j]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t            b[i]=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t        &#125; </span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-质因子分解\"><a href=\"#5-4-质因子分解\" class=\"headerlink\" title=\"5.4 质因子分解\"></a>5.4 质因子分解</h3><p>Q:什么是质因子分解：</p>\n<blockquote>\n<p>将一个正整数写成一个或多个质数乘积的形式<br>6=2<em>3,12=2^2\\</em>3</p>\n</blockquote>\n<p>分解过程</p>\n<blockquote>\n<p>构造类 Factor记录 因子x，与因子的个数 cunt</p>\n<p>因为所取最简化的因子一定为素数，直接采取对n进行取模运算。</p>\n<p>对于正整数n，只存在一个因子大于sqrt(n),会存在一个或多个小于n的因子，</p>\n<p>以此入手，如果在前sqrt(n)循环之前，仍然存在n!=1,必定n为素数</p>\n<p>此时算法复杂度降到O(sqrt(n))</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> n=<span class=\"number\">1997</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> m=n;</span><br><span class=\"line\">\t  <span class=\"keyword\">boolean</span> []b=<span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">10100</span>];  </span><br><span class=\"line\">\t  Factor [] fac= <span class=\"keyword\">new</span> Factor[<span class=\"number\">10</span>];  </span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"keyword\">int</span> [] prime = Find_Prame(b);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;prime[i-<span class=\"number\">2</span>]&lt;Math.sqrt(m);i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(n%prime[i-<span class=\"number\">2</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tfac[num]=<span class=\"keyword\">new</span> Factor();</span><br><span class=\"line\">\t\t\t\tfac[num].x=prime[i-<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t\t\tfac[num].cunt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(n%prime[i-<span class=\"number\">2</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tfac[num].cunt++;</span><br><span class=\"line\">\t\t\t\t\tn/=prime[i-<span class=\"number\">2</span>];</span><br><span class=\"line\">                    <span class=\"comment\">//每次都除以因子</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tnum++;</span><br><span class=\"line\">            &#125;\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\tfac[num] = <span class=\"keyword\">new</span> Factor();</span><br><span class=\"line\">\t\t\tfac[num].x=n;</span><br><span class=\"line\">\t\t\tfac[num].cunt=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(m+<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(fac[0].x);</span></span><br><span class=\"line\">\t\t\tSystem.out.print(fac[i].x+<span class=\"string\">\"^\"</span>+fac[i].cunt+<span class=\"string\">\"+\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(fac[num].x+<span class=\"string\">\"^\"</span>+String.valueOf(fac[num].cunt));</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"keyword\">static</span>  <span class=\"keyword\">int</span>[] Find_Prame(<span class=\"keyword\">boolean</span>[] b)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> [] prame = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=prame.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!b[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+i;j&lt;=b.length-<span class=\"number\">1</span>;j+=i)&#123;</span><br><span class=\"line\">\t\t\t\tb[j]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb[i]=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\tprame[num++]=i;</span><br><span class=\"line\">            <span class=\"comment\">//记录素数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> prame;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factor</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//素数 x代表因子，cunt代表该因子的次方数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cunt;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-大数运算\"><a href=\"#5-5-大数运算\" class=\"headerlink\" title=\"5.5 大数运算\"></a>5.5 大数运算</h3><h4 id=\"5-5-1-基本数据类型\"><a href=\"#5-5-1-基本数据类型\" class=\"headerlink\" title=\"5.5.1 基本数据类型\"></a>5.5.1 基本数据类型</h4><p>为什么要用大数计算？</p>\n<blockquote>\n<p>当数值大于可以取的范围时就不得不用到大数了。</p>\n</blockquote>\n<blockquote>\n<p>八种基本类型的运算范围如下</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节数</th>\n<th>二进制位数</th>\n<th>范围</th>\n<th>规律</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1</td>\n<td>8</td>\n<td>-128～127</td>\n<td>-27～27-1</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n<td>-32768～32767</td>\n<td>-215～215-1</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n<td>-2147483648～2147483647</td>\n<td>-231～231-1</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n<td>-9223372036854775808 ~ 9223372036854775807</td>\n<td>-263～263-1</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n<td>1.4E-45~3.4028235E38</td>\n<td></td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n<td>4.9E-324~1.7976931348623157E308</td>\n<td></td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n<td>16</td>\n<td>0～65535</td>\n<td>0~216-1</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>1</td>\n<td>8</td>\n<td>true或false</td>\n<td>true或false</td>\n</tr>\n</tbody></table>\n</blockquote>\n<h4 id=\"5-2-2-BigInteger\"><a href=\"#5-2-2-BigInteger\" class=\"headerlink\" title=\"5.2.2 BigInteger\"></a>5.2.2 BigInteger</h4><p>JAVA里面提供了Integer类，专门运用于大数的计算。官方文档这样介绍</p>\n<blockquote>\n<p>不可变的任意精度的整数。所有操作中，都以二进制补码形式表示 BigInteger（如 Java 的基本整数类型）。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。</p>\n</blockquote>\n<p>也就是说</p>\n<blockquote>\n<p>BigInteger 任意大的整数，原则上是，只要你的计算机的内存足够大，可以有无限位的.</p>\n<p>BigInteger属于java.math.BigInteger;</p>\n</blockquote>\n<p>由于biginteger不是基本类型，所以需要 new </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger abs()  返回大整数的绝对值</span><br><span class=\"line\">BigInteger add(BigInteger val) 返回两个大整数的和</span><br><span class=\"line\">BigInteger and(BigInteger val)  返回两个大整数的按位与的结果</span><br><span class=\"line\">BigInteger andNot(BigInteger val) 返回两个大整数与非的结果</span><br><span class=\"line\">BigInteger divide(BigInteger val)  返回两个大整数的商</span><br><span class=\"line\">double doubleValue()   返回大整数的double类型的值</span><br><span class=\"line\">float floatValue()   返回大整数的float类型的值</span><br><span class=\"line\">BigInteger gcd(BigInteger val)  返回大整数的最大公约数</span><br><span class=\"line\">int intValue() 返回大整数的整型值</span><br><span class=\"line\">long longValue() 返回大整数的long型值</span><br><span class=\"line\">BigInteger max(BigInteger val) 返回两个大整数的最大者</span><br><span class=\"line\">BigInteger min(BigInteger val) 返回两个大整数的最小者</span><br><span class=\"line\">BigInteger mod(BigInteger val) 用当前大整数对val求模</span><br><span class=\"line\">BigInteger multiply(BigInteger val) 返回两个大整数的积</span><br><span class=\"line\">BigInteger negate() 返回当前大整数的相反数</span><br><span class=\"line\">BigInteger not() 返回当前大整数的非</span><br><span class=\"line\">BigInteger or(BigInteger val) 返回两个大整数的按位或</span><br><span class=\"line\">BigInteger pow(int exponent) 返回当前大整数的exponent次方</span><br><span class=\"line\">BigInteger remainder(BigInteger val) 返回当前大整数除以val的余数</span><br><span class=\"line\">BigInteger leftShift(int n) 将当前大整数左移n位后返回</span><br><span class=\"line\">BigInteger rightShift(int n) 将当前大整数右移n位后返回</span><br><span class=\"line\">BigInteger subtract(BigInteger val)返回两个大整数相减的结果</span><br><span class=\"line\">byte[] toByteArray(BigInteger val)将大整数转换成二进制反码保存在byte数组中</span><br><span class=\"line\">String toString() 将当前大整数转换成十进制的字符串形式</span><br><span class=\"line\">BigInteger xor(BigInteger val) 返回两个大整数的异或</span><br><span class=\"line\">BigInteger compareTo(BigInteger val) 根据该数值是小于、等于、或大于 val 返回 -1、0 或 1；</span><br><span class=\"line\">equals：判断两数是否相等，也可以用compareTo来代替；</span><br><span class=\"line\">intValue，longValue，floatValue，doublue：把该数转换为该类型的数的值。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-5-2-Integer\"><a href=\"#5-5-2-Integer\" class=\"headerlink\" title=\"5.5.2 Integer\"></a>5.5.2 Integer</h4><p>说到BigIntegerJ就不得说说integer了。</p>\n<blockquote>\n<p><strong>java.lang.Integer</strong></p>\n<p><code>Integer</code> 类在对象中包装了一个基本类型 <code>int</code> 的值。<code>Integer</code> 类型的对象包含一个 <code>int</code> 类型的字段。<br>此外，该类提供了多个方法，能在 <code>int</code> 类型和 <code>String</code> 类型之间互相转换，还提供了处理 <code>int</code> 类型时非常有用的其他一些常量和方法。</p>\n</blockquote>\n<p>概括就是：int与integer范围上是一样的，不过封装了不少的方法可以调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compareTo(Integer anotherInteger) 在数字上比较两个 Integer 对象</span><br><span class=\"line\">doubleValue(),floatValue() ,intValue(),longValue()以 xx 类型返回该 Integer 的值</span><br><span class=\"line\">parseInt(String s) 将字符串参数作为有符号的十进制整数进行解析</span><br><span class=\"line\">toString() 返回一个表示该 Integer 值的 String 对象。。将该参数转换为有符号的十进制表示形式，并以字符串             的形式返回它。</span><br><span class=\"line\">public static String </span><br><span class=\"line\">将十进制数转换为二进制数（由0 1组成）</span><br><span class=\"line\">public static String </span><br><span class=\"line\">将十进制数转换为八进制数（以0开头）</span><br><span class=\"line\">public static String </span><br><span class=\"line\">将十进制数转换为十六进制数（以0x开头）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最常用的方法了，进制转换，类型转换。</span><br><span class=\"line\">Integer i = new Integer(10);</span><br><span class=\"line\">int ii = i.intValue();//Integer 转换成 int</span><br><span class=\"line\">Integer kk = Integer.valueOf(ii)//将ii转换为Integer</span><br><span class=\"line\">int iii = Integer.parsetInt(&quot;10&quot;);//字符串转成int类型</span><br><span class=\"line\">k = Integer.parseInt(&quot;110&quot;, 2);//radix进制的字符串转换成int</span><br><span class=\"line\">toBinaryString(int i),toOctalString(int i),toHexString(int i),转换成2,8,16进制</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-5-3补充：\"><a href=\"#5-5-3补充：\" class=\"headerlink\" title=\"5.5.3补充：\"></a>5.5.3补充：</h4><p>Q: ‘==’,和equals()的区别</p>\n<blockquote>\n<p>众所周知,==比较的是地址,equals比较值。<br>但是在integer中存在一个<strong>IntegerCache</strong>，也就是范围在[-128,127]的数值是直接在IntegerCache里面缓存的，所以当赋值的时候不会重新的new，而是直接的进行调用。<br>那么 有了以下的比较：</p>\n<blockquote>\n<p>a = new Integer(12), Integer b = 12; 由于a是new进行创建对象的，所以a会存在于堆里面，而b是在IntegerCache里获取的.</p>\n<p>所以(a==b)为false</p>\n</blockquote>\n<blockquote>\n<p>当 integer不在该范围的时候，Integer会进行new, 然后自动装箱产生对象;<br>若 Integer a = 128,Integer b=128;<br>也会出现 (a==b)为false<br>但是如果Integer a = 127,Integer b=127;<br>(a==b)为true</p>\n</blockquote>\n<blockquote>\n<p>当int与Integer进行比较的时候回自动的拆箱，转换为int进行比较</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/wangyang1354/article/details/52623703\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n</blockquote>\n<p>Q：默认值</p>\n<blockquote>\n<p>Integer的默认值是null，int的默认值是0</p>\n</blockquote>\n<p>装箱就是  自动将基本数据类型转换为包装器类型；拆箱就是  自动将包装器类型转换为基本数据类型。</p>\n<p>关于拆箱和分箱可以参考博客文章 <a href=\"https://www.cnblogs.com/dolphin0520/p/3780005.html\" target=\"_blank\" rel=\"noopener\">深入剖析Java中的装箱和拆箱</a></p>\n<h3 id=\"5-6-组合数\"><a href=\"#5-6-组合数\" class=\"headerlink\" title=\"5.6 组合数\"></a>5.6 组合数</h3><blockquote>\n<p>从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；</p>\n<p>从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数。</p>\n<p>公式：<br>$$<br>C_{n}^{m} = \\frac{n!}{m!(n-m)!}<br>$$<br>C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;;      C<sub>n</sub><sup>m</sup>=C<sub>n</sub><sup>n-m</sup>;</p>\n</blockquote>\n<h4 id=\"5-6-1阶乘的质因子\"><a href=\"#5-6-1阶乘的质因子\" class=\"headerlink\" title=\"5.6.1阶乘的质因子\"></a>5.6.1阶乘的质因子</h4><p>Q: 什么是阶乘呢？</p>\n<blockquote>\n<p>便于记录连乘，形如 n! =  1*2*3…..*n</p>\n</blockquote>\n<p>Q: n! 中有多少质因子2呢？</p>\n<blockquote>\n<p>最直接的方式就是 套两个for循环，复杂度达到O(N^2)</p>\n<p>但是当n很大时，内存占用的会非常多的。</p>\n</blockquote>\n<p>方法一：</p>\n<p>通过我们的观察</p>\n<p>​                                                   2     n!中2^3的个数</p>\n<p>​                          2                       2    n!中2^2的个数</p>\n<p>​              2          2           2         2            2  n!中2的个数</p>\n<p>10!=1 * 2 * 3* 4 * 5 * 6 * 7 * 8 * 9 * 10</p>\n<p>通过上面得到 在10！中 因子 2的个数为5,2^2 为2个，2^3 1个<br>10！的质因子共 1+2+5=8</p>\n<p>同理 求 n!的质因子为p个数</p>\n<blockquote>\n<p>$$<br>\\frac{n}{p}+\\frac{n}{p^{2}}+\\frac{n}{p^{3}}+\\frac{n}{p^{4}}+\\frac{n}{p^{5}}+·····<br>$$</p>\n</blockquote>\n<p>求解的终止条件为当int m=log<sub>2</sub>(n),既log(n)的向下取整</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=Math.log(m)/Math.log(<span class=\"number\">2</span>);i++)&#123;</span><br><span class=\"line\">        sum+=n/p;</span><br><span class=\"line\">        n/=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 在java提供的Math函数求对数</p>\n<p>Math.log(m) = log<sub>e</sub>(m)<br>$$<br>log_{2}^{m} = \\frac{log_{e}^{m}}{log_{e}{2}}<br>$$<br>然后发现这样也是可以的(判断条件简单多了，用for用的太多了，瞬间感觉while挺好的)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        sum+=n/p;</span><br><span class=\"line\">        n/=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通过这个方法也可以求 n!的结果中有多少个0?<br>即是求cal(n,5)<br>这里求的是质因子5的个数，是因为在一个阶乘中每有一个二就会有一个5，2*5会创造一个0,而不是一个10才创造一个0;</p>\n</blockquote>\n<p>方法二：逆向递归<br>从书上的理解是：</p>\n<blockquote>\n<p>10! = 2<sup>5</sup>+5!+1*3*5*7*9</p>\n<p>5! = 2<sup>2</sup> + 2！+ 1*3*5</p>\n<p>和刚刚方法一是一样的原理</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;p) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n/p + cal(n/p,p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-6-2-组合数的计算\"><a href=\"#5-6-2-组合数的计算\" class=\"headerlink\" title=\"5.6.2 组合数的计算\"></a>5.6.2 组合数的计算</h4><p>1，计算 C<sub>n</sub><sup>m</sup><br>$$<br>C_{n}^{m} = \\frac{n!}{m!(n-m)!}=\\frac{(n-m+1)(n-m+2)····(n-m+m)}{m！}<br>$$<br>通过展开式能够看出，分子分母都为m项的，且C<sub>n</sub><sup>m</sup>的结果都是为整数，故此我们可以边乘边除，而不是每一项分开除再乘的；这样的话就可以避免乘法的溢出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">          sum=sum*(n-m+i)/i;</span><br><span class=\"line\">          <span class=\"comment\">/**不能写成sum*=(n-m+i)/i;这样是先计算每一项除法的结果，而每一项无法保证为整数，只有先乘后除**/</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二：通过递推公式</p>\n<p>当我们从n个数中取出m个的组合也就是  C<sub>n</sub><sup>m</sup> ,如何我们先不取最后一个数，先从n-1个当中取出m个，然后选取最后一个，再从n-1个当中选取m-1个，既可以得到<br>$$<br>C_{n}^{m} = C_{n-1}^{m}+c_{n-1}^{m-1}<br>$$<br>运用递归可以很快的写出代码，递归的判断条件是当m=0，或者m=n；</p>\n<blockquote>\n<p>写递归一定要先判断好递归终止的条件 C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==m||m==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> C(n-<span class=\"number\">1</span>,m)+C(n-<span class=\"number\">1</span>,m-<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​                                                                                                                                             </p>\n"},{"title":"第一章 ：机器学习基础","date":"2019-10-22T13:04:52.000Z","_content":"\n## 前言\n\n本系列文章源自于读《机器学习实战》这本书的学习笔记，用于记录学习内容，不断更新，，\n\n21世纪互联网的发展，使得我们对于数据的收集更加容易，在这样大量数据的前提下，我们必须要挖掘出海量数据的价值，而机器学习的算法受到许多爱好技术人员的青睐，是因为这些算法在一定程度上可以帮助我们进行一些诸如回归预测，分类，识别等诸多场景的应用。\n\n#### 何谓数据，信息，知识呢？\n\n> 一切的实物都是数据，而信息是有用的数据\n>\n> 例如： 通过测量行星的位置和对应的时间，我们得到的就是数据。而通过这些数据获得行星的轨迹就是信息，通过这些信息总结出来开普勒三定律就是知识了。\n\n## 本书结构\n\n《机器学习实战》全书共15章，主要是介绍了数据挖掘的十大算法其八：\n\nC4.5决策树、K-均值（K-mean）、支持向量机（SVM）、Apriori、 最大期望算法（EM）、PageRank算法、AdaBoost算法、k-近邻算法（kNN）、朴素贝叶斯算法（NB） 和分类回归树（CART）算法。没有包括最大期望算法和PageRank 算法。本书没有包括PageRank算法，是因为搜索引擎巨头Google引入的PageRank算法已经在很多 著作里得到了充分的论述，没有必要进一步累述；而最大期望算法没有纳入，是因为涉及太多的\n\n####  选择本书的原因\n\n本书的实战性比较强，每个章节都是用例子来说明的，符合我这种喜欢写代码的同学，如果是西瓜书我可能看着就睡着了，理论知识太多了。\n\n我的计划是可以通过本书对这几个算法有一定的了解之后再选择西瓜书或李宏毅的课程进行研读。\n\n由于书上实现都是用的python2.x，我会用python3.7将其复现，并用jupyter展示出来。\n\n## 何谓机器学习呢？\n\n机器学习是一类算法的总称，这些算法企图从大量历史数据中挖掘出其中隐含的规律，并用于预测或者分类，更具体的说，机器学习可以看作是寻找一个函数，输入是样本数据，输出是期望的结果，只是这个函数过于复杂，以至于不太方便形式化表达。需要注意的是，机器学习的目标是使学到的函数很好地适用于“新样本”，而不仅仅是在训练样本上表现很好。学到的函数适用于新样本的能力，称为泛化（Generalization）能力。\n\n简言之，机器学习可以揭示数据背后的真实 含义\n\n## 人工智能 机器学习 深度学习 \n\n<b>人工智能是追求目标，机器学习是实现手段，深度学习是其中一种方法。</b>\n\n### 人工智能**（Artificial Intelligence）**：机器赋予人的智慧\n\n1956年，几个计算机科学家相聚在达特茅斯会议，提出了“人工智能”的概念，梦想着用当时刚刚出现的计算机来构造复杂的、拥有与人类智慧同样本质特性的机器\n2012年以后，得益于数据量的上涨、运算力的提升和机器学习新算法（深度学习）的出现，人工智能开始大爆发。\n\n现在人工智能的研究领域只要有 专家系统、机器学习、进化计算、模糊逻辑、计算机视觉、自然语言处理、推荐系统等\n\n##### 弱人工智能-强人工智能\n\n我们现在所说的人工智能都是弱人工智能，能够实现具体的某一种任务，如人脸识别，机器翻译。\n墙人工智能大概就像是人一样吧，能够自己学习everything\n\n### 机器学习（Machine Learning）：一种实现人工智能的手段\n\n机器学习的最基本做法，便是使用算法来对数据进行解析、学习，然后对真实世界中的数据/事件作出决策/预测。\n\n根据**使用算法**的不同，机器学习的算法可包括：决策树、聚类、支持向量机、朴素贝叶斯等。\n\n根据**学习方法**的不同，机器学习可以分为：监督学习、半监督学习、无监督学习、集成学习等。\n\n### 深度学习(Deep Learning)：一种实现机器学习的方法\n\n对机器学习来说，特征提取并不简单。特征工程往往需要大量的时间去优化，而此时，深度学习便可以自动学习特征和任务之间的关联，还能从简单特征中提取复杂的特征。深\n\n度学习的概念源于人工神经网络的研究，含多隐层的多层感知器就是一种深度学习结构，深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示\n\n### 三者联系\n\n![](http://web.wvdon.com/ai.PNG)\n\n人工智能 >> 机器学习 >> 深度学习\n\n## 补充\n\n机器学习的任务个人理解是主要做分类与回归。分类和回归属于监督学习，之所以称 之为监督学习，是因为这类算法必须知道预测什么，即目标变量的分类信息。\n\n与监督学习相对应的是无监督学习，此时数据没有类别信息，也不会给定目标值。对于离散型的遍历\n\n#### 选择合适的算法：\n如果想要预测目标变量的值，则可以选择监督学习算法， 否则可以选择无监督学习算法。确定选择监督学习算法之后，需要进一步确定目标变量类型，如 果目标变量是离散型，如是/否、1/2/3、A/B/C或者红/黄/黑等，则可以选择分类器算法；如果目 标变量是连续型的数值，如0.0～100.00、999～999或者+∞～-∞等，则需要选择回归算法\n\n>  离散型：分类器\n>\n> 连续性：逻辑回归\n\n\n\n## 参考\n\n[机器学习简介](https://blog.csdn.net/hohaizx/article/details/80584307)\n\n[知乎-人工智能-机器学习-深度学习的区别](https://www.zhihu.com/question/57770020)","source":"_posts/machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础.md","raw":"---\ntitle: 第一章 ：机器学习基础\ndate: 2019-10-22 21:04:52\n---\n\n## 前言\n\n本系列文章源自于读《机器学习实战》这本书的学习笔记，用于记录学习内容，不断更新，，\n\n21世纪互联网的发展，使得我们对于数据的收集更加容易，在这样大量数据的前提下，我们必须要挖掘出海量数据的价值，而机器学习的算法受到许多爱好技术人员的青睐，是因为这些算法在一定程度上可以帮助我们进行一些诸如回归预测，分类，识别等诸多场景的应用。\n\n#### 何谓数据，信息，知识呢？\n\n> 一切的实物都是数据，而信息是有用的数据\n>\n> 例如： 通过测量行星的位置和对应的时间，我们得到的就是数据。而通过这些数据获得行星的轨迹就是信息，通过这些信息总结出来开普勒三定律就是知识了。\n\n## 本书结构\n\n《机器学习实战》全书共15章，主要是介绍了数据挖掘的十大算法其八：\n\nC4.5决策树、K-均值（K-mean）、支持向量机（SVM）、Apriori、 最大期望算法（EM）、PageRank算法、AdaBoost算法、k-近邻算法（kNN）、朴素贝叶斯算法（NB） 和分类回归树（CART）算法。没有包括最大期望算法和PageRank 算法。本书没有包括PageRank算法，是因为搜索引擎巨头Google引入的PageRank算法已经在很多 著作里得到了充分的论述，没有必要进一步累述；而最大期望算法没有纳入，是因为涉及太多的\n\n####  选择本书的原因\n\n本书的实战性比较强，每个章节都是用例子来说明的，符合我这种喜欢写代码的同学，如果是西瓜书我可能看着就睡着了，理论知识太多了。\n\n我的计划是可以通过本书对这几个算法有一定的了解之后再选择西瓜书或李宏毅的课程进行研读。\n\n由于书上实现都是用的python2.x，我会用python3.7将其复现，并用jupyter展示出来。\n\n## 何谓机器学习呢？\n\n机器学习是一类算法的总称，这些算法企图从大量历史数据中挖掘出其中隐含的规律，并用于预测或者分类，更具体的说，机器学习可以看作是寻找一个函数，输入是样本数据，输出是期望的结果，只是这个函数过于复杂，以至于不太方便形式化表达。需要注意的是，机器学习的目标是使学到的函数很好地适用于“新样本”，而不仅仅是在训练样本上表现很好。学到的函数适用于新样本的能力，称为泛化（Generalization）能力。\n\n简言之，机器学习可以揭示数据背后的真实 含义\n\n## 人工智能 机器学习 深度学习 \n\n<b>人工智能是追求目标，机器学习是实现手段，深度学习是其中一种方法。</b>\n\n### 人工智能**（Artificial Intelligence）**：机器赋予人的智慧\n\n1956年，几个计算机科学家相聚在达特茅斯会议，提出了“人工智能”的概念，梦想着用当时刚刚出现的计算机来构造复杂的、拥有与人类智慧同样本质特性的机器\n2012年以后，得益于数据量的上涨、运算力的提升和机器学习新算法（深度学习）的出现，人工智能开始大爆发。\n\n现在人工智能的研究领域只要有 专家系统、机器学习、进化计算、模糊逻辑、计算机视觉、自然语言处理、推荐系统等\n\n##### 弱人工智能-强人工智能\n\n我们现在所说的人工智能都是弱人工智能，能够实现具体的某一种任务，如人脸识别，机器翻译。\n墙人工智能大概就像是人一样吧，能够自己学习everything\n\n### 机器学习（Machine Learning）：一种实现人工智能的手段\n\n机器学习的最基本做法，便是使用算法来对数据进行解析、学习，然后对真实世界中的数据/事件作出决策/预测。\n\n根据**使用算法**的不同，机器学习的算法可包括：决策树、聚类、支持向量机、朴素贝叶斯等。\n\n根据**学习方法**的不同，机器学习可以分为：监督学习、半监督学习、无监督学习、集成学习等。\n\n### 深度学习(Deep Learning)：一种实现机器学习的方法\n\n对机器学习来说，特征提取并不简单。特征工程往往需要大量的时间去优化，而此时，深度学习便可以自动学习特征和任务之间的关联，还能从简单特征中提取复杂的特征。深\n\n度学习的概念源于人工神经网络的研究，含多隐层的多层感知器就是一种深度学习结构，深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示\n\n### 三者联系\n\n![](http://web.wvdon.com/ai.PNG)\n\n人工智能 >> 机器学习 >> 深度学习\n\n## 补充\n\n机器学习的任务个人理解是主要做分类与回归。分类和回归属于监督学习，之所以称 之为监督学习，是因为这类算法必须知道预测什么，即目标变量的分类信息。\n\n与监督学习相对应的是无监督学习，此时数据没有类别信息，也不会给定目标值。对于离散型的遍历\n\n#### 选择合适的算法：\n如果想要预测目标变量的值，则可以选择监督学习算法， 否则可以选择无监督学习算法。确定选择监督学习算法之后，需要进一步确定目标变量类型，如 果目标变量是离散型，如是/否、1/2/3、A/B/C或者红/黄/黑等，则可以选择分类器算法；如果目 标变量是连续型的数值，如0.0～100.00、999～999或者+∞～-∞等，则需要选择回归算法\n\n>  离散型：分类器\n>\n> 连续性：逻辑回归\n\n\n\n## 参考\n\n[机器学习简介](https://blog.csdn.net/hohaizx/article/details/80584307)\n\n[知乎-人工智能-机器学习-深度学习的区别](https://www.zhihu.com/question/57770020)","slug":"machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础","published":1,"updated":"2020-03-22T11:18:27.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5xe002rrwv06tx7ikh2","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本系列文章源自于读《机器学习实战》这本书的学习笔记，用于记录学习内容，不断更新，，</p><p>21世纪互联网的发展，使得我们对于数据的收集更加容易，在这样大量数据的前提下，我们必须要挖掘出海量数据的价值，而机器学习的算法受到许多爱好技术人员的青睐，是因为这些算法在一定程度上可以帮助我们进行一些诸如回归预测，分类，识别等诸多场景的应用。</p><a id=\"more\"></a>\n\n<h4 id=\"何谓数据，信息，知识呢？\"><a href=\"#何谓数据，信息，知识呢？\" class=\"headerlink\" title=\"何谓数据，信息，知识呢？\"></a>何谓数据，信息，知识呢？</h4><blockquote>\n<p>一切的实物都是数据，而信息是有用的数据</p>\n<p>例如： 通过测量行星的位置和对应的时间，我们得到的就是数据。而通过这些数据获得行星的轨迹就是信息，通过这些信息总结出来开普勒三定律就是知识了。</p>\n</blockquote>\n<h2 id=\"本书结构\"><a href=\"#本书结构\" class=\"headerlink\" title=\"本书结构\"></a>本书结构</h2><p>《机器学习实战》全书共15章，主要是介绍了数据挖掘的十大算法其八：</p>\n<p>C4.5决策树、K-均值（K-mean）、支持向量机（SVM）、Apriori、 最大期望算法（EM）、PageRank算法、AdaBoost算法、k-近邻算法（kNN）、朴素贝叶斯算法（NB） 和分类回归树（CART）算法。没有包括最大期望算法和PageRank 算法。本书没有包括PageRank算法，是因为搜索引擎巨头Google引入的PageRank算法已经在很多 著作里得到了充分的论述，没有必要进一步累述；而最大期望算法没有纳入，是因为涉及太多的</p>\n<h4 id=\"选择本书的原因\"><a href=\"#选择本书的原因\" class=\"headerlink\" title=\"选择本书的原因\"></a>选择本书的原因</h4><p>本书的实战性比较强，每个章节都是用例子来说明的，符合我这种喜欢写代码的同学，如果是西瓜书我可能看着就睡着了，理论知识太多了。</p>\n<p>我的计划是可以通过本书对这几个算法有一定的了解之后再选择西瓜书或李宏毅的课程进行研读。</p>\n<p>由于书上实现都是用的python2.x，我会用python3.7将其复现，并用jupyter展示出来。</p>\n<h2 id=\"何谓机器学习呢？\"><a href=\"#何谓机器学习呢？\" class=\"headerlink\" title=\"何谓机器学习呢？\"></a>何谓机器学习呢？</h2><p>机器学习是一类算法的总称，这些算法企图从大量历史数据中挖掘出其中隐含的规律，并用于预测或者分类，更具体的说，机器学习可以看作是寻找一个函数，输入是样本数据，输出是期望的结果，只是这个函数过于复杂，以至于不太方便形式化表达。需要注意的是，机器学习的目标是使学到的函数很好地适用于“新样本”，而不仅仅是在训练样本上表现很好。学到的函数适用于新样本的能力，称为泛化（Generalization）能力。</p>\n<p>简言之，机器学习可以揭示数据背后的真实 含义</p>\n<h2 id=\"人工智能-机器学习-深度学习\"><a href=\"#人工智能-机器学习-深度学习\" class=\"headerlink\" title=\"人工智能 机器学习 深度学习\"></a>人工智能 机器学习 深度学习</h2><p><b>人工智能是追求目标，机器学习是实现手段，深度学习是其中一种方法。</b></p>\n<h3 id=\"人工智能（Artificial-Intelligence）：机器赋予人的智慧\"><a href=\"#人工智能（Artificial-Intelligence）：机器赋予人的智慧\" class=\"headerlink\" title=\"人工智能（Artificial Intelligence）：机器赋予人的智慧\"></a>人工智能<strong>（Artificial Intelligence）</strong>：机器赋予人的智慧</h3><p>1956年，几个计算机科学家相聚在达特茅斯会议，提出了“人工智能”的概念，梦想着用当时刚刚出现的计算机来构造复杂的、拥有与人类智慧同样本质特性的机器<br>2012年以后，得益于数据量的上涨、运算力的提升和机器学习新算法（深度学习）的出现，人工智能开始大爆发。</p>\n<p>现在人工智能的研究领域只要有 专家系统、机器学习、进化计算、模糊逻辑、计算机视觉、自然语言处理、推荐系统等</p>\n<h5 id=\"弱人工智能-强人工智能\"><a href=\"#弱人工智能-强人工智能\" class=\"headerlink\" title=\"弱人工智能-强人工智能\"></a>弱人工智能-强人工智能</h5><p>我们现在所说的人工智能都是弱人工智能，能够实现具体的某一种任务，如人脸识别，机器翻译。<br>墙人工智能大概就像是人一样吧，能够自己学习everything</p>\n<h3 id=\"机器学习（Machine-Learning）：一种实现人工智能的手段\"><a href=\"#机器学习（Machine-Learning）：一种实现人工智能的手段\" class=\"headerlink\" title=\"机器学习（Machine Learning）：一种实现人工智能的手段\"></a>机器学习（Machine Learning）：一种实现人工智能的手段</h3><p>机器学习的最基本做法，便是使用算法来对数据进行解析、学习，然后对真实世界中的数据/事件作出决策/预测。</p>\n<p>根据<strong>使用算法</strong>的不同，机器学习的算法可包括：决策树、聚类、支持向量机、朴素贝叶斯等。</p>\n<p>根据<strong>学习方法</strong>的不同，机器学习可以分为：监督学习、半监督学习、无监督学习、集成学习等。</p>\n<h3 id=\"深度学习-Deep-Learning-：一种实现机器学习的方法\"><a href=\"#深度学习-Deep-Learning-：一种实现机器学习的方法\" class=\"headerlink\" title=\"深度学习(Deep Learning)：一种实现机器学习的方法\"></a>深度学习(Deep Learning)：一种实现机器学习的方法</h3><p>对机器学习来说，特征提取并不简单。特征工程往往需要大量的时间去优化，而此时，深度学习便可以自动学习特征和任务之间的关联，还能从简单特征中提取复杂的特征。深</p>\n<p>度学习的概念源于人工神经网络的研究，含多隐层的多层感知器就是一种深度学习结构，深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示</p>\n<h3 id=\"三者联系\"><a href=\"#三者联系\" class=\"headerlink\" title=\"三者联系\"></a>三者联系</h3><p><img src=\"http://web.wvdon.com/ai.PNG\" alt></p>\n<p>人工智能 &gt;&gt; 机器学习 &gt;&gt; 深度学习</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>机器学习的任务个人理解是主要做分类与回归。分类和回归属于监督学习，之所以称 之为监督学习，是因为这类算法必须知道预测什么，即目标变量的分类信息。</p>\n<p>与监督学习相对应的是无监督学习，此时数据没有类别信息，也不会给定目标值。对于离散型的遍历</p>\n<h4 id=\"选择合适的算法：\"><a href=\"#选择合适的算法：\" class=\"headerlink\" title=\"选择合适的算法：\"></a>选择合适的算法：</h4><p>如果想要预测目标变量的值，则可以选择监督学习算法， 否则可以选择无监督学习算法。确定选择监督学习算法之后，需要进一步确定目标变量类型，如 果目标变量是离散型，如是/否、1/2/3、A/B/C或者红/黄/黑等，则可以选择分类器算法；如果目 标变量是连续型的数值，如0.0～100.00、999～999或者+∞～-∞等，则需要选择回归算法</p>\n<blockquote>\n<p> 离散型：分类器</p>\n<p>连续性：逻辑回归</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/hohaizx/article/details/80584307\" target=\"_blank\" rel=\"noopener\">机器学习简介</a></p>\n<p><a href=\"https://www.zhihu.com/question/57770020\" target=\"_blank\" rel=\"noopener\">知乎-人工智能-机器学习-深度学习的区别</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本系列文章源自于读《机器学习实战》这本书的学习笔记，用于记录学习内容，不断更新，，</p><p>21世纪互联网的发展，使得我们对于数据的收集更加容易，在这样大量数据的前提下，我们必须要挖掘出海量数据的价值，而机器学习的算法受到许多爱好技术人员的青睐，是因为这些算法在一定程度上可以帮助我们进行一些诸如回归预测，分类，识别等诸多场景的应用。</p>","more":"\n\n<h4 id=\"何谓数据，信息，知识呢？\"><a href=\"#何谓数据，信息，知识呢？\" class=\"headerlink\" title=\"何谓数据，信息，知识呢？\"></a>何谓数据，信息，知识呢？</h4><blockquote>\n<p>一切的实物都是数据，而信息是有用的数据</p>\n<p>例如： 通过测量行星的位置和对应的时间，我们得到的就是数据。而通过这些数据获得行星的轨迹就是信息，通过这些信息总结出来开普勒三定律就是知识了。</p>\n</blockquote>\n<h2 id=\"本书结构\"><a href=\"#本书结构\" class=\"headerlink\" title=\"本书结构\"></a>本书结构</h2><p>《机器学习实战》全书共15章，主要是介绍了数据挖掘的十大算法其八：</p>\n<p>C4.5决策树、K-均值（K-mean）、支持向量机（SVM）、Apriori、 最大期望算法（EM）、PageRank算法、AdaBoost算法、k-近邻算法（kNN）、朴素贝叶斯算法（NB） 和分类回归树（CART）算法。没有包括最大期望算法和PageRank 算法。本书没有包括PageRank算法，是因为搜索引擎巨头Google引入的PageRank算法已经在很多 著作里得到了充分的论述，没有必要进一步累述；而最大期望算法没有纳入，是因为涉及太多的</p>\n<h4 id=\"选择本书的原因\"><a href=\"#选择本书的原因\" class=\"headerlink\" title=\"选择本书的原因\"></a>选择本书的原因</h4><p>本书的实战性比较强，每个章节都是用例子来说明的，符合我这种喜欢写代码的同学，如果是西瓜书我可能看着就睡着了，理论知识太多了。</p>\n<p>我的计划是可以通过本书对这几个算法有一定的了解之后再选择西瓜书或李宏毅的课程进行研读。</p>\n<p>由于书上实现都是用的python2.x，我会用python3.7将其复现，并用jupyter展示出来。</p>\n<h2 id=\"何谓机器学习呢？\"><a href=\"#何谓机器学习呢？\" class=\"headerlink\" title=\"何谓机器学习呢？\"></a>何谓机器学习呢？</h2><p>机器学习是一类算法的总称，这些算法企图从大量历史数据中挖掘出其中隐含的规律，并用于预测或者分类，更具体的说，机器学习可以看作是寻找一个函数，输入是样本数据，输出是期望的结果，只是这个函数过于复杂，以至于不太方便形式化表达。需要注意的是，机器学习的目标是使学到的函数很好地适用于“新样本”，而不仅仅是在训练样本上表现很好。学到的函数适用于新样本的能力，称为泛化（Generalization）能力。</p>\n<p>简言之，机器学习可以揭示数据背后的真实 含义</p>\n<h2 id=\"人工智能-机器学习-深度学习\"><a href=\"#人工智能-机器学习-深度学习\" class=\"headerlink\" title=\"人工智能 机器学习 深度学习\"></a>人工智能 机器学习 深度学习</h2><p><b>人工智能是追求目标，机器学习是实现手段，深度学习是其中一种方法。</b></p>\n<h3 id=\"人工智能（Artificial-Intelligence）：机器赋予人的智慧\"><a href=\"#人工智能（Artificial-Intelligence）：机器赋予人的智慧\" class=\"headerlink\" title=\"人工智能（Artificial Intelligence）：机器赋予人的智慧\"></a>人工智能<strong>（Artificial Intelligence）</strong>：机器赋予人的智慧</h3><p>1956年，几个计算机科学家相聚在达特茅斯会议，提出了“人工智能”的概念，梦想着用当时刚刚出现的计算机来构造复杂的、拥有与人类智慧同样本质特性的机器<br>2012年以后，得益于数据量的上涨、运算力的提升和机器学习新算法（深度学习）的出现，人工智能开始大爆发。</p>\n<p>现在人工智能的研究领域只要有 专家系统、机器学习、进化计算、模糊逻辑、计算机视觉、自然语言处理、推荐系统等</p>\n<h5 id=\"弱人工智能-强人工智能\"><a href=\"#弱人工智能-强人工智能\" class=\"headerlink\" title=\"弱人工智能-强人工智能\"></a>弱人工智能-强人工智能</h5><p>我们现在所说的人工智能都是弱人工智能，能够实现具体的某一种任务，如人脸识别，机器翻译。<br>墙人工智能大概就像是人一样吧，能够自己学习everything</p>\n<h3 id=\"机器学习（Machine-Learning）：一种实现人工智能的手段\"><a href=\"#机器学习（Machine-Learning）：一种实现人工智能的手段\" class=\"headerlink\" title=\"机器学习（Machine Learning）：一种实现人工智能的手段\"></a>机器学习（Machine Learning）：一种实现人工智能的手段</h3><p>机器学习的最基本做法，便是使用算法来对数据进行解析、学习，然后对真实世界中的数据/事件作出决策/预测。</p>\n<p>根据<strong>使用算法</strong>的不同，机器学习的算法可包括：决策树、聚类、支持向量机、朴素贝叶斯等。</p>\n<p>根据<strong>学习方法</strong>的不同，机器学习可以分为：监督学习、半监督学习、无监督学习、集成学习等。</p>\n<h3 id=\"深度学习-Deep-Learning-：一种实现机器学习的方法\"><a href=\"#深度学习-Deep-Learning-：一种实现机器学习的方法\" class=\"headerlink\" title=\"深度学习(Deep Learning)：一种实现机器学习的方法\"></a>深度学习(Deep Learning)：一种实现机器学习的方法</h3><p>对机器学习来说，特征提取并不简单。特征工程往往需要大量的时间去优化，而此时，深度学习便可以自动学习特征和任务之间的关联，还能从简单特征中提取复杂的特征。深</p>\n<p>度学习的概念源于人工神经网络的研究，含多隐层的多层感知器就是一种深度学习结构，深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示</p>\n<h3 id=\"三者联系\"><a href=\"#三者联系\" class=\"headerlink\" title=\"三者联系\"></a>三者联系</h3><p><img src=\"http://web.wvdon.com/ai.PNG\" alt></p>\n<p>人工智能 &gt;&gt; 机器学习 &gt;&gt; 深度学习</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>机器学习的任务个人理解是主要做分类与回归。分类和回归属于监督学习，之所以称 之为监督学习，是因为这类算法必须知道预测什么，即目标变量的分类信息。</p>\n<p>与监督学习相对应的是无监督学习，此时数据没有类别信息，也不会给定目标值。对于离散型的遍历</p>\n<h4 id=\"选择合适的算法：\"><a href=\"#选择合适的算法：\" class=\"headerlink\" title=\"选择合适的算法：\"></a>选择合适的算法：</h4><p>如果想要预测目标变量的值，则可以选择监督学习算法， 否则可以选择无监督学习算法。确定选择监督学习算法之后，需要进一步确定目标变量类型，如 果目标变量是离散型，如是/否、1/2/3、A/B/C或者红/黄/黑等，则可以选择分类器算法；如果目 标变量是连续型的数值，如0.0～100.00、999～999或者+∞～-∞等，则需要选择回归算法</p>\n<blockquote>\n<p> 离散型：分类器</p>\n<p>连续性：逻辑回归</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/hohaizx/article/details/80584307\" target=\"_blank\" rel=\"noopener\">机器学习简介</a></p>\n<p><a href=\"https://www.zhihu.com/question/57770020\" target=\"_blank\" rel=\"noopener\">知乎-人工智能-机器学习-深度学习的区别</a></p>\n"},{"title":"第二章 ：k-近邻算法","date":"2019-10-24T13:04:52.000Z","_content":"\n## 摘要\n\nK最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。\n\n## KNN\n\n俗话说近朱者赤近墨者黑，如果你想判断这个人是怎么样的人，你不妨先去看看他的朋友圈是怎么样的，所谓观其友，而识其人。\n\n![](http://web.wvdon.com/machine-learning-1.png)\n\n从图中我们能够看到，如果要判断 绿色的是什么形状我们可以通过先判断他距离他最近的K个图形\n\n当K=3,基于统计，两个三角形（2/3），一个正方形（1/3），我们可以判断绿色为三角形\n\n当K=5，两个三角形(2/5),三个正方形(3/5),我们判断绿色为正方形\n\n························\n\n#### k-近邻算法的一般流程\n\n> (1) 收集数据：可以使用任何方法。 \n> (2) 准备数据：距离计算所需要的数值，最好是结构化的数据格式。 \n> (3) 分析数据：可以使用任何方法。 \n> (4) 训练算法：此步骤不适用于k-近邻算法。 \n> (5) 测试算法：计算错误率。 \n> (6) 使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输 入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。\n\n## KNN简单实现(1)\n\n>  python=3.7\n\n```python\n# Created on 2019/10/24 by wvdon\n# website wvdon.com\n# 导入使用的包\nfrom numpy import *\nimport operator\n```\n\n创建训练的数据\n\n```python\ndef createDataSet():\n    group = array([[1.0,2.0],[1.2,0.1],[0.1,1.4],[0.3,3.5]])\n    labels = [\"A\",\"A\",\"B\",\"B\"]\n    return group,labels\n```\n\n利用matplotlib观察数据分布\n\n```python\nfrom matplotlib import pyplot as plt\ngroup,labels = createDataSet()\nx = group[:,0]\n```\n\n```python\ny = group[:,1]\n```\n\n```python\nplt.scatter(x,y)\nplt.show()\n```\n\n![png](http://web.wvdon.com/output_6_0.png)\n\n#### 定义一个KNN函数\n\n```python\ndef classify0(inX,dataSet,labels,k):\n    dataSetSize = dataSet.shape[0] #获得训练集的长度\n    diffMat = tile(inX,(dataSetSize,1))-dataSet # 复制数组 并将差值计算出来\n    #下面三个是计算欧氏距离 \n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n    distances = sqDistances**0.5 \n    \n    #获得distances从小到大的索引值\n    sortedDistIndicies = distances.argsort()\n    classCount = {}\n    #找到前K个标签，输出最大的\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount [voteIlabel] = classCount.get(voteIlabel,0)+1\n    sortedClassCount = sorted(classCount.items(),key = operator.itemgetter(1),reverse = True)\n    return sortedClassCount[0][0]\n```\n\n```python\na = classify0([1.2,0.1],group,labels,1)\na\n```\n\n```\n'A'\n```\n\n#### 补充\n\n**欧氏距离**，最常见的两点之间或多点之间的距离表示法，又称之为欧几里得度量，它定义于欧几里得空间中，如点 x = (x1,...,xn),到 y(y1,....yn)\n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" title=\"dist(X,Y) = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+····+(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" /></a>\n\n二位平面上 \n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" title=\"d = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2}\" /></a>\n\n#### numpy 函数\n\ntile  \nsum(axis=1) \nargsort()\n[numpy总结]()\n\n## 使用 k-近邻算法改进约会网站的配对效果(2)\n\n\n\n## 参考\n\n[百度百科]([https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781](https://baike.baidu.com/item/k近邻算法/9512781))","source":"_posts/machineLearning/machineLearning/2019-10-24-第二章-：k-近邻算法.md","raw":"---\ntitle: 第二章 ：k-近邻算法\ndate: 2019-10-24 21:04:52\n---\n\n## 摘要\n\nK最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。\n\n## KNN\n\n俗话说近朱者赤近墨者黑，如果你想判断这个人是怎么样的人，你不妨先去看看他的朋友圈是怎么样的，所谓观其友，而识其人。\n\n![](http://web.wvdon.com/machine-learning-1.png)\n\n从图中我们能够看到，如果要判断 绿色的是什么形状我们可以通过先判断他距离他最近的K个图形\n\n当K=3,基于统计，两个三角形（2/3），一个正方形（1/3），我们可以判断绿色为三角形\n\n当K=5，两个三角形(2/5),三个正方形(3/5),我们判断绿色为正方形\n\n························\n\n#### k-近邻算法的一般流程\n\n> (1) 收集数据：可以使用任何方法。 \n> (2) 准备数据：距离计算所需要的数值，最好是结构化的数据格式。 \n> (3) 分析数据：可以使用任何方法。 \n> (4) 训练算法：此步骤不适用于k-近邻算法。 \n> (5) 测试算法：计算错误率。 \n> (6) 使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输 入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。\n\n## KNN简单实现(1)\n\n>  python=3.7\n\n```python\n# Created on 2019/10/24 by wvdon\n# website wvdon.com\n# 导入使用的包\nfrom numpy import *\nimport operator\n```\n\n创建训练的数据\n\n```python\ndef createDataSet():\n    group = array([[1.0,2.0],[1.2,0.1],[0.1,1.4],[0.3,3.5]])\n    labels = [\"A\",\"A\",\"B\",\"B\"]\n    return group,labels\n```\n\n利用matplotlib观察数据分布\n\n```python\nfrom matplotlib import pyplot as plt\ngroup,labels = createDataSet()\nx = group[:,0]\n```\n\n```python\ny = group[:,1]\n```\n\n```python\nplt.scatter(x,y)\nplt.show()\n```\n\n![png](http://web.wvdon.com/output_6_0.png)\n\n#### 定义一个KNN函数\n\n```python\ndef classify0(inX,dataSet,labels,k):\n    dataSetSize = dataSet.shape[0] #获得训练集的长度\n    diffMat = tile(inX,(dataSetSize,1))-dataSet # 复制数组 并将差值计算出来\n    #下面三个是计算欧氏距离 \n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n    distances = sqDistances**0.5 \n    \n    #获得distances从小到大的索引值\n    sortedDistIndicies = distances.argsort()\n    classCount = {}\n    #找到前K个标签，输出最大的\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount [voteIlabel] = classCount.get(voteIlabel,0)+1\n    sortedClassCount = sorted(classCount.items(),key = operator.itemgetter(1),reverse = True)\n    return sortedClassCount[0][0]\n```\n\n```python\na = classify0([1.2,0.1],group,labels,1)\na\n```\n\n```\n'A'\n```\n\n#### 补充\n\n**欧氏距离**，最常见的两点之间或多点之间的距离表示法，又称之为欧几里得度量，它定义于欧几里得空间中，如点 x = (x1,...,xn),到 y(y1,....yn)\n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" title=\"dist(X,Y) = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+····+(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" /></a>\n\n二位平面上 \n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" title=\"d = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2}\" /></a>\n\n#### numpy 函数\n\ntile  \nsum(axis=1) \nargsort()\n[numpy总结]()\n\n## 使用 k-近邻算法改进约会网站的配对效果(2)\n\n\n\n## 参考\n\n[百度百科]([https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781](https://baike.baidu.com/item/k近邻算法/9512781))","slug":"machineLearning/machineLearning/2019-10-24-第二章-：k-近邻算法","published":1,"updated":"2020-03-22T11:18:27.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy5xi002trwv01xo7zsyi","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p><a id=\"more\"></a>\n<h2 id=\"KNN\"><a href=\"#KNN\" class=\"headerlink\" title=\"KNN\"></a>KNN</h2><p>俗话说近朱者赤近墨者黑，如果你想判断这个人是怎么样的人，你不妨先去看看他的朋友圈是怎么样的，所谓观其友，而识其人。</p>\n<p><img src=\"http://web.wvdon.com/machine-learning-1.png\" alt></p>\n<p>从图中我们能够看到，如果要判断 绿色的是什么形状我们可以通过先判断他距离他最近的K个图形</p>\n<p>当K=3,基于统计，两个三角形（2/3），一个正方形（1/3），我们可以判断绿色为三角形</p>\n<p>当K=5，两个三角形(2/5),三个正方形(3/5),我们判断绿色为正方形</p>\n<p>························</p>\n<h4 id=\"k-近邻算法的一般流程\"><a href=\"#k-近邻算法的一般流程\" class=\"headerlink\" title=\"k-近邻算法的一般流程\"></a>k-近邻算法的一般流程</h4><blockquote>\n<p>(1) 收集数据：可以使用任何方法。<br>(2) 准备数据：距离计算所需要的数值，最好是结构化的数据格式。<br>(3) 分析数据：可以使用任何方法。<br>(4) 训练算法：此步骤不适用于k-近邻算法。<br>(5) 测试算法：计算错误率。<br>(6) 使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输 入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。</p>\n</blockquote>\n<h2 id=\"KNN简单实现-1\"><a href=\"#KNN简单实现-1\" class=\"headerlink\" title=\"KNN简单实现(1)\"></a>KNN简单实现(1)</h2><blockquote>\n<p> python=3.7</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Created on 2019/10/24 by wvdon</span></span><br><span class=\"line\"><span class=\"comment\"># website wvdon.com</span></span><br><span class=\"line\"><span class=\"comment\"># 导入使用的包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> operator</span><br></pre></td></tr></table></figure>\n\n<p>创建训练的数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createDataSet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    group = array([[<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>],[<span class=\"number\">1.2</span>,<span class=\"number\">0.1</span>],[<span class=\"number\">0.1</span>,<span class=\"number\">1.4</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">3.5</span>]])</span><br><span class=\"line\">    labels = [<span class=\"string\">\"A\"</span>,<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"B\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> group,labels</span><br></pre></td></tr></table></figure>\n\n<p>利用matplotlib观察数据分布</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">group,labels = createDataSet()</span><br><span class=\"line\">x = group[:,<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = group[:,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter(x,y)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://web.wvdon.com/output_6_0.png\" alt=\"png\"></p>\n<h4 id=\"定义一个KNN函数\"><a href=\"#定义一个KNN函数\" class=\"headerlink\" title=\"定义一个KNN函数\"></a>定义一个KNN函数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify0</span><span class=\"params\">(inX,dataSet,labels,k)</span>:</span></span><br><span class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>] <span class=\"comment\">#获得训练集的长度</span></span><br><span class=\"line\">    diffMat = tile(inX,(dataSetSize,<span class=\"number\">1</span>))-dataSet <span class=\"comment\"># 复制数组 并将差值计算出来</span></span><br><span class=\"line\">    <span class=\"comment\">#下面三个是计算欧氏距离 </span></span><br><span class=\"line\">    sqDiffMat = diffMat**<span class=\"number\">2</span></span><br><span class=\"line\">    sqDistances = sqDiffMat.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    distances = sqDistances**<span class=\"number\">0.5</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#获得distances从小到大的索引值</span></span><br><span class=\"line\">    sortedDistIndicies = distances.argsort()</span><br><span class=\"line\">    classCount = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">#找到前K个标签，输出最大的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class=\"line\">        classCount [voteIlabel] = classCount.get(voteIlabel,<span class=\"number\">0</span>)+<span class=\"number\">1</span></span><br><span class=\"line\">    sortedClassCount = sorted(classCount.items(),key = operator.itemgetter(<span class=\"number\">1</span>),reverse = <span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedClassCount[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = classify0([<span class=\"number\">1.2</span>,<span class=\"number\">0.1</span>],group,labels,<span class=\"number\">1</span>)</span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;A&apos;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><p><strong>欧氏距离</strong>，最常见的两点之间或多点之间的距离表示法，又称之为欧几里得度量，它定义于欧几里得空间中，如点 x = (x1,…,xn),到 y(y1,….yn)</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" title=\"dist(X,Y) = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+····+(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\"></a></p>\n<p>二位平面上 </p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" title=\"d = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2}\"></a></p>\n<h4 id=\"numpy-函数\"><a href=\"#numpy-函数\" class=\"headerlink\" title=\"numpy 函数\"></a>numpy 函数</h4><p>tile<br>sum(axis=1)<br>argsort()<br><a href>numpy总结</a></p>\n<h2 id=\"使用-k-近邻算法改进约会网站的配对效果-2\"><a href=\"#使用-k-近邻算法改进约会网站的配对效果-2\" class=\"headerlink\" title=\"使用 k-近邻算法改进约会网站的配对效果(2)\"></a>使用 k-近邻算法改进约会网站的配对效果(2)</h2><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"[https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781](https://baike.baidu.com/item/k近邻算法/9512781)\">百度百科</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p>","more":"\n<h2 id=\"KNN\"><a href=\"#KNN\" class=\"headerlink\" title=\"KNN\"></a>KNN</h2><p>俗话说近朱者赤近墨者黑，如果你想判断这个人是怎么样的人，你不妨先去看看他的朋友圈是怎么样的，所谓观其友，而识其人。</p>\n<p><img src=\"http://web.wvdon.com/machine-learning-1.png\" alt></p>\n<p>从图中我们能够看到，如果要判断 绿色的是什么形状我们可以通过先判断他距离他最近的K个图形</p>\n<p>当K=3,基于统计，两个三角形（2/3），一个正方形（1/3），我们可以判断绿色为三角形</p>\n<p>当K=5，两个三角形(2/5),三个正方形(3/5),我们判断绿色为正方形</p>\n<p>························</p>\n<h4 id=\"k-近邻算法的一般流程\"><a href=\"#k-近邻算法的一般流程\" class=\"headerlink\" title=\"k-近邻算法的一般流程\"></a>k-近邻算法的一般流程</h4><blockquote>\n<p>(1) 收集数据：可以使用任何方法。<br>(2) 准备数据：距离计算所需要的数值，最好是结构化的数据格式。<br>(3) 分析数据：可以使用任何方法。<br>(4) 训练算法：此步骤不适用于k-近邻算法。<br>(5) 测试算法：计算错误率。<br>(6) 使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输 入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。</p>\n</blockquote>\n<h2 id=\"KNN简单实现-1\"><a href=\"#KNN简单实现-1\" class=\"headerlink\" title=\"KNN简单实现(1)\"></a>KNN简单实现(1)</h2><blockquote>\n<p> python=3.7</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Created on 2019/10/24 by wvdon</span></span><br><span class=\"line\"><span class=\"comment\"># website wvdon.com</span></span><br><span class=\"line\"><span class=\"comment\"># 导入使用的包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> operator</span><br></pre></td></tr></table></figure>\n\n<p>创建训练的数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createDataSet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    group = array([[<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>],[<span class=\"number\">1.2</span>,<span class=\"number\">0.1</span>],[<span class=\"number\">0.1</span>,<span class=\"number\">1.4</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">3.5</span>]])</span><br><span class=\"line\">    labels = [<span class=\"string\">\"A\"</span>,<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"B\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> group,labels</span><br></pre></td></tr></table></figure>\n\n<p>利用matplotlib观察数据分布</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">group,labels = createDataSet()</span><br><span class=\"line\">x = group[:,<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = group[:,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter(x,y)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://web.wvdon.com/output_6_0.png\" alt=\"png\"></p>\n<h4 id=\"定义一个KNN函数\"><a href=\"#定义一个KNN函数\" class=\"headerlink\" title=\"定义一个KNN函数\"></a>定义一个KNN函数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify0</span><span class=\"params\">(inX,dataSet,labels,k)</span>:</span></span><br><span class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>] <span class=\"comment\">#获得训练集的长度</span></span><br><span class=\"line\">    diffMat = tile(inX,(dataSetSize,<span class=\"number\">1</span>))-dataSet <span class=\"comment\"># 复制数组 并将差值计算出来</span></span><br><span class=\"line\">    <span class=\"comment\">#下面三个是计算欧氏距离 </span></span><br><span class=\"line\">    sqDiffMat = diffMat**<span class=\"number\">2</span></span><br><span class=\"line\">    sqDistances = sqDiffMat.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    distances = sqDistances**<span class=\"number\">0.5</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#获得distances从小到大的索引值</span></span><br><span class=\"line\">    sortedDistIndicies = distances.argsort()</span><br><span class=\"line\">    classCount = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">#找到前K个标签，输出最大的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class=\"line\">        classCount [voteIlabel] = classCount.get(voteIlabel,<span class=\"number\">0</span>)+<span class=\"number\">1</span></span><br><span class=\"line\">    sortedClassCount = sorted(classCount.items(),key = operator.itemgetter(<span class=\"number\">1</span>),reverse = <span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedClassCount[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = classify0([<span class=\"number\">1.2</span>,<span class=\"number\">0.1</span>],group,labels,<span class=\"number\">1</span>)</span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;A&apos;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><p><strong>欧氏距离</strong>，最常见的两点之间或多点之间的距离表示法，又称之为欧几里得度量，它定义于欧几里得空间中，如点 x = (x1,…,xn),到 y(y1,….yn)</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?dist(X,Y)&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\" title=\"dist(X,Y) = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+····+(x_n-y_n)^2}=\\sqrt{\\sum_{i=1}^{n}(X_i-Y_i)^2}\"></a></p>\n<p>二位平面上 </p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?d&space;=&space;\\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}\" title=\"d = \\sqrt{(x_1-y_1)^2+(x_2-y_2)^2}\"></a></p>\n<h4 id=\"numpy-函数\"><a href=\"#numpy-函数\" class=\"headerlink\" title=\"numpy 函数\"></a>numpy 函数</h4><p>tile<br>sum(axis=1)<br>argsort()<br><a href>numpy总结</a></p>\n<h2 id=\"使用-k-近邻算法改进约会网站的配对效果-2\"><a href=\"#使用-k-近邻算法改进约会网站的配对效果-2\" class=\"headerlink\" title=\"使用 k-近邻算法改进约会网站的配对效果(2)\"></a>使用 k-近邻算法改进约会网站的配对效果(2)</h2><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"[https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781](https://baike.baidu.com/item/k近邻算法/9512781)\">百度百科</a></p>\n"},{"title":"数据挖掘：Python使用随机森林预测泰坦尼克号生存","date":"2019-09-09T04:20:00.000Z","mathjax":true,"_content":"\n[TOC]\n\n\n\n## 前言：\n\n- Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况\n\n数据来源kaggle\n\n## 1 数据预处理\n### 1.1 读入数据\n\n\n```python\nimport pandas as pd\ndata_train = pd.read_csv(r'train.csv')\ndata_test = pd.read_csv(r'test.csv')\ndata_train.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 1.2 训练集与数据集\n\n\n```python\ndata_test.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 1.2.1 查看数据完整性\n\n\n```python\ndata_train.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 891 entries, 0 to 890\n    Data columns (total 12 columns):\n    PassengerId    891 non-null int64\n    Survived       891 non-null int64\n    Pclass         891 non-null int64\n    Name           891 non-null object\n    Sex            891 non-null object\n    Age            714 non-null float64\n    SibSp          891 non-null int64\n    Parch          891 non-null int64\n    Ticket         891 non-null object\n    Fare           891 non-null float64\n    Cabin          204 non-null object\n    Embarked       889 non-null object\n    dtypes: float64(2), int64(5), object(5)\n    memory usage: 83.7+ KB\n\n\n总共有891组数据，其中age是714条，Cabin是204条，共计12个变量\n> 乘客ID，存活情况，船票级别，乘客姓名，性别，年龄，船上的兄弟姐妹以及配偶的人数，船上的父母以及子女的人数，船票编号，船票费用，所在船舱，登船的港口\n\n### 1.2.2 查看训练数据描述信息\n\n\n```python\ndata_train.describe()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>count</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <td>mean</td>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <td>std</td>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <td>min</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <td>25%</td>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <td>50%</td>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <td>75%</td>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <td>max</td>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nmean代表各项的均值，获救率为0.383838\n\n### 1.3.1  年龄数据简化分组\n\n\n```python\ndef simplify_ages(df):\n    #把缺失值补上，方便分组\n    df.Age = df.Age.fillna(-0.5)\n   \n    #把Age分为不同区间,-1到0,1-5,6-12...,60以上,放到bins里，八个区间，对应的八个区间名称在group_names那\n    bins = (-1, 0, 5, 12, 18, 25, 35, 60, 120)\n    group_names = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n    \n    #开始对数据进行离散化，pandas.cut就是这个功能\n    catagories = pd.cut(df.Age,bins,labels=group_names)\n    df.Age = catagories\n    return df\n\n```\n\n简化Cabin，就是取字母\n\n\n```python\ndef simplify_cabin(df):\n    df.Cabin = df.Cabin.fillna('N')\n    df.Cabin = df.Cabin.apply(lambda x:x[0])\n    return df\n```\n\n简化工资，也就是分组\n\n\n```python\ndef simplify_fare(df):\n    df.Fare = df.Fare.fillna(-0.5)\n    bins = (-1, 0, 8, 15, 31, 1000)\n    group_names = ['Unknown', '1_quartile', '2_quartile', '3_quartile', '4_quartile']\n    catagories = pd.cut(df.Fare,bins,labels=group_names)\n    df.Fare = catagories\n    return df\n```\n\n删除无用信息\n\n\n```python\ndef simplify_drop(df):\n    return df.drop(['Name','Ticket','Embarked'],axis=1)\n```\n\n整合一遍，凑成新表\n\n\n```python\ndef transform_features(df):\n    df = simplify_ages(df)\n    df = simplify_cabin(df)\n    df = simplify_fare(df)\n    df = simplify_drop(df)\n    return df\n```\n\n执行读取新表\n\n\n```python\n#必须要再读取一遍原来的表，不然会报错,不仅训练集要简化，测试集也要，两者的特征名称要一致\ndata_train = pd.read_csv(r'train.csv')\ndata_train = transform_features(data_train)\ndata_test = transform_features(data_test)\ndata_train.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Student</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2_quartile</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n#data_train=data_train.drop([\"PassengerId\",\"Cabin\",\"Name\"],axis=1)\ndata_train.head(200)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>195</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>58.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17569</td>\n      <td>146.5208</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>196</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>368703</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>197</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>42.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4579</td>\n      <td>8.4042</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>198</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370370</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>199</td>\n      <td>0</td>\n      <td>2</td>\n      <td>female</td>\n      <td>24.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>248747</td>\n      <td>13.0000</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n<p>200 rows × 9 columns</p>\n</div>\n\n\n\n选取我们需要的那几个列作为输入， 对于票价和姓名我就舍弃了，姓名没什么用\n\n\n```python\ncols = ['PassengerId','Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ndata_tr=data_train[cols].copy()\ndata_tr.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ncols = ['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ndata_te=data_test[cols].copy()\ndata_te.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndata_tr.isnull().sum()\ndata_te.isnull().sum()\n```\n\n\n\n\n    PassengerId     0\n    Pclass          0\n    Sex             0\n    Age            86\n    SibSp           0\n    Parch           0\n    Fare            1\n    Embarked        0\n    dtype: int64\n\n\n\n填充数据，，，，，，\n\n\n```python\nage_mean = data_tr['Age'].mean()\ndata_tr['Age'] = data_tr['Age'].fillna(age_mean)\ndata_tr['Embarked'] = data_tr['Embarked'].fillna('S')\ndata_tr.isnull().sum()\n\n```\n\n\n\n\n    PassengerId    0\n    Survived       0\n    Pclass         0\n    Sex            0\n    Age            0\n    SibSp          0\n    Parch          0\n    Fare           0\n    Embarked       0\n    dtype: int64\n\n\n\n\n```python\ndata_tr.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n用数组特征化编码年龄和S C Q等等，，因为随机森林的输入需要数值，字符不行\n\n\n```python\n#import numpy as np\nage_mean = data_te['Age'].mean()\ndata_te['Age'] = data_te['Age'].fillna(age_mean)\nage_mean = data_te['Fare'].mean()\ndata_te['Fare'] = data_te['Fare'].fillna(age_mean)\n#data_te.replace(np.na, 0, inplace=True)\n#data_te.replace(np.inf, 0, inplace=True)\ndata_te['Sex']= data_te['Sex'].map({'female':0, 'male': 1}).astype(int)\ndata_te['Embarked']= data_te['Embarked'].map({'S':0, 'C': 1,'Q':2}).astype(int)\ndata_te.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>1</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>0</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>1</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndata_tr['Sex']= data_tr['Sex'].map({'female':0, 'male': 1}).astype(int)\ndata_tr['Embarked']= data_tr['Embarked'].map({'S':0, 'C': 1,'Q':2}).astype(int)\ndata_tr.head()\n#data_tr = pd.get_dummies(data_tr=data_tr,columns=['Embarked'])\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 2 数据可视化\n### 2.1  年龄和生存率之间的关系\n\n\n```python\nsns.barplot(x='Embarked',y='Survived',hue='Sex',data=data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee5875e3c8>\n\n\n\n\n![png](http://web.wvdon.com/md/output_35_1.png)\n\n\n- female的获救率大于 male,(应该是男士都比较绅士吧，即使面对死亡，也希望将最后的机会留给女生，，电影感悟）\n- 获救率 C 男性女性都是最高，Q时男性最低，S 时 女性最低\n- 男性的获救率低于女性的三分之一\n\n### 2.2 所做的位置和生存率之间的关系\n\n\n```python\nsns.pointplot(x='Pclass',y='Survived',hue='Sex',data=data_train,palette={'male':'blue','female':'pink'},\n             marker=['*',\"o\"],linestyle=['-','--'])\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee586f70b8>\n\n\n\n\n![png](http://web.wvdon.com/md/output_38_1.png)\n\n\n- 等级越高获救率越高\n- 女性大于男性\n\n### 2.3 生存率与年龄的关系\n\n\n```python\nsns.barplot(x = 'Age',y = 'Survived',hue='Sex',data = data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee587238d0>\n\n\n\n\n![png](http://web.wvdon.com/md/output_41_1.png)\n\n\n- 男性大于女性\n- student的生存率最低,bady的生存率最高\n\n\n```python\nsns.barplot(x = 'Cabin',y = 'Survived',hue='Sex',data = data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee585b0748>\n\n\n\n\n![png](http://web.wvdon.com/md/output_43_1.png)\n\n\n\n```python\nsns.barplot(x = 'Fare',y = 'Survived',hue='Sex',data = data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee5852b390>\n\n\n\n\n![png](http://web.wvdon.com/md/output_44_1.png)\n\n\n## 3 建立模型\n### 3.1 随机森林\n\n\n```python\nfrom sklearn.model_selection import train_test_split\nX_all = data_tr.drop(['PassengerId','Survived'],axis=1)#主要是乘客ID也没啥用，删就删了吧\ny_all = data_tr['Survived']\np = 0.2 #用 百分之20作为测试集\n\nX_train,X_test, y_train, y_test = train_test_split(X_all,y_all,test_size=p, random_state=23)\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n\n#选择分类器的类型，我没试过其他的哦，因为在这个案例中，有人做过试验发现随机森林模型是最好的，所以选了它。呜呜，我下次试试其他的\nclf = RandomForestClassifier()\n\n#可以通过定义树的各种参数，限制树的大小，防止出现过拟合现象哦，也可以通过剪枝来限制，但sklearn中的决策树分类器目前不支持剪枝\nparameters = {'n_estimators': [4, 6, 9], \n              'max_features': ['log2', 'sqrt','auto'], \n              'criterion': ['entropy', 'gini'],        #分类标准用熵，基尼系数\n              'max_depth': [2, 3, 5, 10], \n              'min_samples_split': [2, 3, 5],\n              'min_samples_leaf': [1,5,8]\n             }\n\n#以下是用于比较参数好坏的评分，使用'make_scorer'将'accuracy_score'转换为评分函数\nacc_scorer = make_scorer(accuracy_score)\n\n#自动调参，GridSearchCV，它存在的意义就是自动调参，只要把参数输进去，就能给出最优化的结果和参数\n#GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。\ngrid_obj = GridSearchCV(clf,parameters,scoring=acc_scorer)\ngrid_obj = grid_obj.fit(X_train,y_train)\n\n#将clf设置为参数的最佳组合\nclf = grid_obj.best_estimator_\n\n#将最佳算法运用于数据中\nclf.fit(X_train,y_train)\n```\n\n    /home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n      warnings.warn(CV_WARNING, FutureWarning)\n    /home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_search.py:814: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n      DeprecationWarning)\n\n\n\n\n\n    RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n                           max_depth=5, max_features='sqrt', max_leaf_nodes=None,\n                           min_impurity_decrease=0.0, min_impurity_split=None,\n                           min_samples_leaf=1, min_samples_split=3,\n                           min_weight_fraction_leaf=0.0, n_estimators=4,\n                           n_jobs=None, oob_score=False, random_state=None,\n                           verbose=0, warm_start=False)\n\n\n\n### 3.2 预测\n\n\n```python\npredictions = clf.predict(X_test)\nprint(accuracy_score(y_test,predictions))\ndata_tr\n```\n\n    0.8268156424581006\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>886</td>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>27.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>887</td>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>19.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>888</td>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>29.699118</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>889</td>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>890</td>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>32.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 9 columns</p>\n</div>\n\n\n\n### 3.3 预测test文件\n\n\n```python\npredictions = clf.predict(data_te.drop('PassengerId',axis=1))\noutput = pd.DataFrame({'Passengers':data_te['PassengerId'],'Survived':predictions})\noutput.to_csv(r'test1.csv')\noutput.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Passengers</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 3.4 提交到kaggle官网\n结果是 0.77990\nhhhhhhhh还是比较满意的 \n下次用深度学习试试\n\n\n```python\n\n```\n","source":"_posts/machineLearning/titanc.md","raw":"---\ntitle: '数据挖掘：Python使用随机森林预测泰坦尼克号生存'\ndate: 2019-09-9 12:20\ntags:\n  - 随机森林\n  - kaggle\n  - 数据挖掘\ncategories: 数据挖掘\nmathjax: true\n\n---\n\n[TOC]\n\n\n\n## 前言：\n\n- Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况\n\n数据来源kaggle\n\n## 1 数据预处理\n### 1.1 读入数据\n\n\n```python\nimport pandas as pd\ndata_train = pd.read_csv(r'train.csv')\ndata_test = pd.read_csv(r'test.csv')\ndata_train.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 1.2 训练集与数据集\n\n\n```python\ndata_test.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 1.2.1 查看数据完整性\n\n\n```python\ndata_train.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 891 entries, 0 to 890\n    Data columns (total 12 columns):\n    PassengerId    891 non-null int64\n    Survived       891 non-null int64\n    Pclass         891 non-null int64\n    Name           891 non-null object\n    Sex            891 non-null object\n    Age            714 non-null float64\n    SibSp          891 non-null int64\n    Parch          891 non-null int64\n    Ticket         891 non-null object\n    Fare           891 non-null float64\n    Cabin          204 non-null object\n    Embarked       889 non-null object\n    dtypes: float64(2), int64(5), object(5)\n    memory usage: 83.7+ KB\n\n\n总共有891组数据，其中age是714条，Cabin是204条，共计12个变量\n> 乘客ID，存活情况，船票级别，乘客姓名，性别，年龄，船上的兄弟姐妹以及配偶的人数，船上的父母以及子女的人数，船票编号，船票费用，所在船舱，登船的港口\n\n### 1.2.2 查看训练数据描述信息\n\n\n```python\ndata_train.describe()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>count</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <td>mean</td>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <td>std</td>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <td>min</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <td>25%</td>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <td>50%</td>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <td>75%</td>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <td>max</td>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nmean代表各项的均值，获救率为0.383838\n\n### 1.3.1  年龄数据简化分组\n\n\n```python\ndef simplify_ages(df):\n    #把缺失值补上，方便分组\n    df.Age = df.Age.fillna(-0.5)\n   \n    #把Age分为不同区间,-1到0,1-5,6-12...,60以上,放到bins里，八个区间，对应的八个区间名称在group_names那\n    bins = (-1, 0, 5, 12, 18, 25, 35, 60, 120)\n    group_names = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n    \n    #开始对数据进行离散化，pandas.cut就是这个功能\n    catagories = pd.cut(df.Age,bins,labels=group_names)\n    df.Age = catagories\n    return df\n\n```\n\n简化Cabin，就是取字母\n\n\n```python\ndef simplify_cabin(df):\n    df.Cabin = df.Cabin.fillna('N')\n    df.Cabin = df.Cabin.apply(lambda x:x[0])\n    return df\n```\n\n简化工资，也就是分组\n\n\n```python\ndef simplify_fare(df):\n    df.Fare = df.Fare.fillna(-0.5)\n    bins = (-1, 0, 8, 15, 31, 1000)\n    group_names = ['Unknown', '1_quartile', '2_quartile', '3_quartile', '4_quartile']\n    catagories = pd.cut(df.Fare,bins,labels=group_names)\n    df.Fare = catagories\n    return df\n```\n\n删除无用信息\n\n\n```python\ndef simplify_drop(df):\n    return df.drop(['Name','Ticket','Embarked'],axis=1)\n```\n\n整合一遍，凑成新表\n\n\n```python\ndef transform_features(df):\n    df = simplify_ages(df)\n    df = simplify_cabin(df)\n    df = simplify_fare(df)\n    df = simplify_drop(df)\n    return df\n```\n\n执行读取新表\n\n\n```python\n#必须要再读取一遍原来的表，不然会报错,不仅训练集要简化，测试集也要，两者的特征名称要一致\ndata_train = pd.read_csv(r'train.csv')\ndata_train = transform_features(data_train)\ndata_test = transform_features(data_test)\ndata_train.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Student</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2_quartile</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n#data_train=data_train.drop([\"PassengerId\",\"Cabin\",\"Name\"],axis=1)\ndata_train.head(200)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>195</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>58.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17569</td>\n      <td>146.5208</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>196</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>368703</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>197</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>42.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4579</td>\n      <td>8.4042</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>198</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370370</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>199</td>\n      <td>0</td>\n      <td>2</td>\n      <td>female</td>\n      <td>24.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>248747</td>\n      <td>13.0000</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n<p>200 rows × 9 columns</p>\n</div>\n\n\n\n选取我们需要的那几个列作为输入， 对于票价和姓名我就舍弃了，姓名没什么用\n\n\n```python\ncols = ['PassengerId','Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ndata_tr=data_train[cols].copy()\ndata_tr.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ncols = ['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ndata_te=data_test[cols].copy()\ndata_te.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndata_tr.isnull().sum()\ndata_te.isnull().sum()\n```\n\n\n\n\n    PassengerId     0\n    Pclass          0\n    Sex             0\n    Age            86\n    SibSp           0\n    Parch           0\n    Fare            1\n    Embarked        0\n    dtype: int64\n\n\n\n填充数据，，，，，，\n\n\n```python\nage_mean = data_tr['Age'].mean()\ndata_tr['Age'] = data_tr['Age'].fillna(age_mean)\ndata_tr['Embarked'] = data_tr['Embarked'].fillna('S')\ndata_tr.isnull().sum()\n\n```\n\n\n\n\n    PassengerId    0\n    Survived       0\n    Pclass         0\n    Sex            0\n    Age            0\n    SibSp          0\n    Parch          0\n    Fare           0\n    Embarked       0\n    dtype: int64\n\n\n\n\n```python\ndata_tr.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n用数组特征化编码年龄和S C Q等等，，因为随机森林的输入需要数值，字符不行\n\n\n```python\n#import numpy as np\nage_mean = data_te['Age'].mean()\ndata_te['Age'] = data_te['Age'].fillna(age_mean)\nage_mean = data_te['Fare'].mean()\ndata_te['Fare'] = data_te['Fare'].fillna(age_mean)\n#data_te.replace(np.na, 0, inplace=True)\n#data_te.replace(np.inf, 0, inplace=True)\ndata_te['Sex']= data_te['Sex'].map({'female':0, 'male': 1}).astype(int)\ndata_te['Embarked']= data_te['Embarked'].map({'S':0, 'C': 1,'Q':2}).astype(int)\ndata_te.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>1</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>0</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>1</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndata_tr['Sex']= data_tr['Sex'].map({'female':0, 'male': 1}).astype(int)\ndata_tr['Embarked']= data_tr['Embarked'].map({'S':0, 'C': 1,'Q':2}).astype(int)\ndata_tr.head()\n#data_tr = pd.get_dummies(data_tr=data_tr,columns=['Embarked'])\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 2 数据可视化\n### 2.1  年龄和生存率之间的关系\n\n\n```python\nsns.barplot(x='Embarked',y='Survived',hue='Sex',data=data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee5875e3c8>\n\n\n\n\n![png](http://web.wvdon.com/md/output_35_1.png)\n\n\n- female的获救率大于 male,(应该是男士都比较绅士吧，即使面对死亡，也希望将最后的机会留给女生，，电影感悟）\n- 获救率 C 男性女性都是最高，Q时男性最低，S 时 女性最低\n- 男性的获救率低于女性的三分之一\n\n### 2.2 所做的位置和生存率之间的关系\n\n\n```python\nsns.pointplot(x='Pclass',y='Survived',hue='Sex',data=data_train,palette={'male':'blue','female':'pink'},\n             marker=['*',\"o\"],linestyle=['-','--'])\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee586f70b8>\n\n\n\n\n![png](http://web.wvdon.com/md/output_38_1.png)\n\n\n- 等级越高获救率越高\n- 女性大于男性\n\n### 2.3 生存率与年龄的关系\n\n\n```python\nsns.barplot(x = 'Age',y = 'Survived',hue='Sex',data = data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee587238d0>\n\n\n\n\n![png](http://web.wvdon.com/md/output_41_1.png)\n\n\n- 男性大于女性\n- student的生存率最低,bady的生存率最高\n\n\n```python\nsns.barplot(x = 'Cabin',y = 'Survived',hue='Sex',data = data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee585b0748>\n\n\n\n\n![png](http://web.wvdon.com/md/output_43_1.png)\n\n\n\n```python\nsns.barplot(x = 'Fare',y = 'Survived',hue='Sex',data = data_train)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fee5852b390>\n\n\n\n\n![png](http://web.wvdon.com/md/output_44_1.png)\n\n\n## 3 建立模型\n### 3.1 随机森林\n\n\n```python\nfrom sklearn.model_selection import train_test_split\nX_all = data_tr.drop(['PassengerId','Survived'],axis=1)#主要是乘客ID也没啥用，删就删了吧\ny_all = data_tr['Survived']\np = 0.2 #用 百分之20作为测试集\n\nX_train,X_test, y_train, y_test = train_test_split(X_all,y_all,test_size=p, random_state=23)\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n\n#选择分类器的类型，我没试过其他的哦，因为在这个案例中，有人做过试验发现随机森林模型是最好的，所以选了它。呜呜，我下次试试其他的\nclf = RandomForestClassifier()\n\n#可以通过定义树的各种参数，限制树的大小，防止出现过拟合现象哦，也可以通过剪枝来限制，但sklearn中的决策树分类器目前不支持剪枝\nparameters = {'n_estimators': [4, 6, 9], \n              'max_features': ['log2', 'sqrt','auto'], \n              'criterion': ['entropy', 'gini'],        #分类标准用熵，基尼系数\n              'max_depth': [2, 3, 5, 10], \n              'min_samples_split': [2, 3, 5],\n              'min_samples_leaf': [1,5,8]\n             }\n\n#以下是用于比较参数好坏的评分，使用'make_scorer'将'accuracy_score'转换为评分函数\nacc_scorer = make_scorer(accuracy_score)\n\n#自动调参，GridSearchCV，它存在的意义就是自动调参，只要把参数输进去，就能给出最优化的结果和参数\n#GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。\ngrid_obj = GridSearchCV(clf,parameters,scoring=acc_scorer)\ngrid_obj = grid_obj.fit(X_train,y_train)\n\n#将clf设置为参数的最佳组合\nclf = grid_obj.best_estimator_\n\n#将最佳算法运用于数据中\nclf.fit(X_train,y_train)\n```\n\n    /home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n      warnings.warn(CV_WARNING, FutureWarning)\n    /home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_search.py:814: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n      DeprecationWarning)\n\n\n\n\n\n    RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n                           max_depth=5, max_features='sqrt', max_leaf_nodes=None,\n                           min_impurity_decrease=0.0, min_impurity_split=None,\n                           min_samples_leaf=1, min_samples_split=3,\n                           min_weight_fraction_leaf=0.0, n_estimators=4,\n                           n_jobs=None, oob_score=False, random_state=None,\n                           verbose=0, warm_start=False)\n\n\n\n### 3.2 预测\n\n\n```python\npredictions = clf.predict(X_test)\nprint(accuracy_score(y_test,predictions))\ndata_tr\n```\n\n    0.8268156424581006\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>886</td>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>27.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>887</td>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>19.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>888</td>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>29.699118</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>889</td>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>890</td>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>32.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 9 columns</p>\n</div>\n\n\n\n### 3.3 预测test文件\n\n\n```python\npredictions = clf.predict(data_te.drop('PassengerId',axis=1))\noutput = pd.DataFrame({'Passengers':data_te['PassengerId'],'Survived':predictions})\noutput.to_csv(r'test1.csv')\noutput.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    \n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Passengers</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 3.4 提交到kaggle官网\n结果是 0.77990\nhhhhhhhh还是比较满意的 \n下次用深度学习试试\n\n\n```python\n\n```\n","slug":"machineLearning/titanc","published":1,"updated":"2020-03-22T11:13:25.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82yy608002yrwv0sqbm2o3u","content":"<p>[TOC]</p><h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><ul>\n<li>Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况</li>\n</ul><p>数据来源kaggle</p><h2 id=\"1-数据预处理\"><a href=\"#1-数据预处理\" class=\"headerlink\" title=\"1 数据预处理\"></a>1 数据预处理</h2><h3 id=\"1-1-读入数据\"><a href=\"#1-1-读入数据\" class=\"headerlink\" title=\"1.1 读入数据\"></a>1.1 读入数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">data_train = pd.read_csv(<span class=\"string\">r'train.csv'</span>)</span><br><span class=\"line\">data_test = pd.read_csv(<span class=\"string\">r'test.csv'</span>)</span><br><span class=\"line\">data_train.head()</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"1-2-训练集与数据集\"><a href=\"#1-2-训练集与数据集\" class=\"headerlink\" title=\"1.2 训练集与数据集\"></a>1.2 训练集与数据集</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_test.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"1-2-1-查看数据完整性\"><a href=\"#1-2-1-查看数据完整性\" class=\"headerlink\" title=\"1.2.1 查看数据完整性\"></a>1.2.1 查看数据完整性</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_train.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB</code></pre><p>总共有891组数据，其中age是714条，Cabin是204条，共计12个变量</p>\n<blockquote>\n<p>乘客ID，存活情况，船票级别，乘客姓名，性别，年龄，船上的兄弟姐妹以及配偶的人数，船上的父母以及子女的人数，船票编号，船票费用，所在船舱，登船的港口</p>\n</blockquote>\n<h3 id=\"1-2-2-查看训练数据描述信息\"><a href=\"#1-2-2-查看训练数据描述信息\" class=\"headerlink\" title=\"1.2.2 查看训练数据描述信息\"></a>1.2.2 查看训练数据描述信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_train.describe()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>count</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <td>mean</td>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <td>std</td>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <td>min</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <td>25%</td>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <td>50%</td>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <td>75%</td>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <td>max</td>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<p>mean代表各项的均值，获救率为0.383838</p>\n<h3 id=\"1-3-1-年龄数据简化分组\"><a href=\"#1-3-1-年龄数据简化分组\" class=\"headerlink\" title=\"1.3.1  年龄数据简化分组\"></a>1.3.1  年龄数据简化分组</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_ages</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#把缺失值补上，方便分组</span></span><br><span class=\"line\">    df.Age = df.Age.fillna(<span class=\"number\">-0.5</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">#把Age分为不同区间,-1到0,1-5,6-12...,60以上,放到bins里，八个区间，对应的八个区间名称在group_names那</span></span><br><span class=\"line\">    bins = (<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">25</span>, <span class=\"number\">35</span>, <span class=\"number\">60</span>, <span class=\"number\">120</span>)</span><br><span class=\"line\">    group_names = [<span class=\"string\">'Unknown'</span>, <span class=\"string\">'Baby'</span>, <span class=\"string\">'Child'</span>, <span class=\"string\">'Teenager'</span>, <span class=\"string\">'Student'</span>, <span class=\"string\">'Young Adult'</span>, <span class=\"string\">'Adult'</span>, <span class=\"string\">'Senior'</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#开始对数据进行离散化，pandas.cut就是这个功能</span></span><br><span class=\"line\">    catagories = pd.cut(df.Age,bins,labels=group_names)</span><br><span class=\"line\">    df.Age = catagories</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>简化Cabin，就是取字母</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_cabin</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df.Cabin = df.Cabin.fillna(<span class=\"string\">'N'</span>)</span><br><span class=\"line\">    df.Cabin = df.Cabin.apply(<span class=\"keyword\">lambda</span> x:x[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>简化工资，也就是分组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_fare</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df.Fare = df.Fare.fillna(<span class=\"number\">-0.5</span>)</span><br><span class=\"line\">    bins = (<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">31</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    group_names = [<span class=\"string\">'Unknown'</span>, <span class=\"string\">'1_quartile'</span>, <span class=\"string\">'2_quartile'</span>, <span class=\"string\">'3_quartile'</span>, <span class=\"string\">'4_quartile'</span>]</span><br><span class=\"line\">    catagories = pd.cut(df.Fare,bins,labels=group_names)</span><br><span class=\"line\">    df.Fare = catagories</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>删除无用信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_drop</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> df.drop([<span class=\"string\">'Name'</span>,<span class=\"string\">'Ticket'</span>,<span class=\"string\">'Embarked'</span>],axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>整合一遍，凑成新表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transform_features</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df = simplify_ages(df)</span><br><span class=\"line\">    df = simplify_cabin(df)</span><br><span class=\"line\">    df = simplify_fare(df)</span><br><span class=\"line\">    df = simplify_drop(df)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>执行读取新表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#必须要再读取一遍原来的表，不然会报错,不仅训练集要简化，测试集也要，两者的特征名称要一致</span></span><br><span class=\"line\">data_train = pd.read_csv(<span class=\"string\">r'train.csv'</span>)</span><br><span class=\"line\">data_train = transform_features(data_train)</span><br><span class=\"line\">data_test = transform_features(data_test)</span><br><span class=\"line\">data_train.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Student</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2_quartile</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data_train=data_train.drop([\"PassengerId\",\"Cabin\",\"Name\"],axis=1)</span></span><br><span class=\"line\">data_train.head(<span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>195</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>58.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17569</td>\n      <td>146.5208</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>196</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>368703</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>197</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>42.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4579</td>\n      <td>8.4042</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>198</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370370</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>199</td>\n      <td>0</td>\n      <td>2</td>\n      <td>female</td>\n      <td>24.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>248747</td>\n      <td>13.0000</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n<p>200 rows × 9 columns</p>\n</div>\n\n\n\n<p>选取我们需要的那几个列作为输入， 对于票价和姓名我就舍弃了，姓名没什么用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cols = [<span class=\"string\">'PassengerId'</span>,<span class=\"string\">'Survived'</span>,<span class=\"string\">'Pclass'</span>,<span class=\"string\">'Sex'</span>,<span class=\"string\">'Age'</span>,<span class=\"string\">'SibSp'</span>,<span class=\"string\">'Parch'</span>,<span class=\"string\">'Fare'</span>,<span class=\"string\">'Embarked'</span>]</span><br><span class=\"line\">data_tr=data_train[cols].copy()</span><br><span class=\"line\">data_tr.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cols = [<span class=\"string\">'PassengerId'</span>,<span class=\"string\">'Pclass'</span>,<span class=\"string\">'Sex'</span>,<span class=\"string\">'Age'</span>,<span class=\"string\">'SibSp'</span>,<span class=\"string\">'Parch'</span>,<span class=\"string\">'Fare'</span>,<span class=\"string\">'Embarked'</span>]</span><br><span class=\"line\">data_te=data_test[cols].copy()</span><br><span class=\"line\">data_te.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_tr.isnull().sum()</span><br><span class=\"line\">data_te.isnull().sum()</span><br></pre></td></tr></table></figure>\n\n<pre><code>PassengerId     0\nPclass          0\nSex             0\nAge            86\nSibSp           0\nParch           0\nFare            1\nEmbarked        0\ndtype: int64</code></pre><p>填充数据，，，，，，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age_mean = data_tr[<span class=\"string\">'Age'</span>].mean()</span><br><span class=\"line\">data_tr[<span class=\"string\">'Age'</span>] = data_tr[<span class=\"string\">'Age'</span>].fillna(age_mean)</span><br><span class=\"line\">data_tr[<span class=\"string\">'Embarked'</span>] = data_tr[<span class=\"string\">'Embarked'</span>].fillna(<span class=\"string\">'S'</span>)</span><br><span class=\"line\">data_tr.isnull().sum()</span><br></pre></td></tr></table></figure>\n\n<pre><code>PassengerId    0\nSurvived       0\nPclass         0\nSex            0\nAge            0\nSibSp          0\nParch          0\nFare           0\nEmbarked       0\ndtype: int64</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_tr.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<p>用数组特征化编码年龄和S C Q等等，，因为随机森林的输入需要数值，字符不行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#import numpy as np</span></span><br><span class=\"line\">age_mean = data_te[<span class=\"string\">'Age'</span>].mean()</span><br><span class=\"line\">data_te[<span class=\"string\">'Age'</span>] = data_te[<span class=\"string\">'Age'</span>].fillna(age_mean)</span><br><span class=\"line\">age_mean = data_te[<span class=\"string\">'Fare'</span>].mean()</span><br><span class=\"line\">data_te[<span class=\"string\">'Fare'</span>] = data_te[<span class=\"string\">'Fare'</span>].fillna(age_mean)</span><br><span class=\"line\"><span class=\"comment\">#data_te.replace(np.na, 0, inplace=True)</span></span><br><span class=\"line\"><span class=\"comment\">#data_te.replace(np.inf, 0, inplace=True)</span></span><br><span class=\"line\">data_te[<span class=\"string\">'Sex'</span>]= data_te[<span class=\"string\">'Sex'</span>].map(&#123;<span class=\"string\">'female'</span>:<span class=\"number\">0</span>, <span class=\"string\">'male'</span>: <span class=\"number\">1</span>&#125;).astype(int)</span><br><span class=\"line\">data_te[<span class=\"string\">'Embarked'</span>]= data_te[<span class=\"string\">'Embarked'</span>].map(&#123;<span class=\"string\">'S'</span>:<span class=\"number\">0</span>, <span class=\"string\">'C'</span>: <span class=\"number\">1</span>,<span class=\"string\">'Q'</span>:<span class=\"number\">2</span>&#125;).astype(int)</span><br><span class=\"line\">data_te.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>1</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>0</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>1</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_tr[<span class=\"string\">'Sex'</span>]= data_tr[<span class=\"string\">'Sex'</span>].map(&#123;<span class=\"string\">'female'</span>:<span class=\"number\">0</span>, <span class=\"string\">'male'</span>: <span class=\"number\">1</span>&#125;).astype(int)</span><br><span class=\"line\">data_tr[<span class=\"string\">'Embarked'</span>]= data_tr[<span class=\"string\">'Embarked'</span>].map(&#123;<span class=\"string\">'S'</span>:<span class=\"number\">0</span>, <span class=\"string\">'C'</span>: <span class=\"number\">1</span>,<span class=\"string\">'Q'</span>:<span class=\"number\">2</span>&#125;).astype(int)</span><br><span class=\"line\">data_tr.head()</span><br><span class=\"line\"><span class=\"comment\">#data_tr = pd.get_dummies(data_tr=data_tr,columns=['Embarked'])</span></span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h2 id=\"2-数据可视化\"><a href=\"#2-数据可视化\" class=\"headerlink\" title=\"2 数据可视化\"></a>2 数据可视化</h2><h3 id=\"2-1-年龄和生存率之间的关系\"><a href=\"#2-1-年龄和生存率之间的关系\" class=\"headerlink\" title=\"2.1  年龄和生存率之间的关系\"></a>2.1  年龄和生存率之间的关系</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x=<span class=\"string\">'Embarked'</span>,y=<span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data=data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5875e3c8&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_35_1.png\" alt=\"png\"></p>\n<ul>\n<li>female的获救率大于 male,(应该是男士都比较绅士吧，即使面对死亡，也希望将最后的机会留给女生，，电影感悟）</li>\n<li>获救率 C 男性女性都是最高，Q时男性最低，S 时 女性最低</li>\n<li>男性的获救率低于女性的三分之一</li>\n</ul>\n<h3 id=\"2-2-所做的位置和生存率之间的关系\"><a href=\"#2-2-所做的位置和生存率之间的关系\" class=\"headerlink\" title=\"2.2 所做的位置和生存率之间的关系\"></a>2.2 所做的位置和生存率之间的关系</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.pointplot(x=<span class=\"string\">'Pclass'</span>,y=<span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data=data_train,palette=&#123;<span class=\"string\">'male'</span>:<span class=\"string\">'blue'</span>,<span class=\"string\">'female'</span>:<span class=\"string\">'pink'</span>&#125;,</span><br><span class=\"line\">             marker=[<span class=\"string\">'*'</span>,<span class=\"string\">\"o\"</span>],linestyle=[<span class=\"string\">'-'</span>,<span class=\"string\">'--'</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee586f70b8&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_38_1.png\" alt=\"png\"></p>\n<ul>\n<li>等级越高获救率越高</li>\n<li>女性大于男性</li>\n</ul>\n<h3 id=\"2-3-生存率与年龄的关系\"><a href=\"#2-3-生存率与年龄的关系\" class=\"headerlink\" title=\"2.3 生存率与年龄的关系\"></a>2.3 生存率与年龄的关系</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x = <span class=\"string\">'Age'</span>,y = <span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee587238d0&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_41_1.png\" alt=\"png\"></p>\n<ul>\n<li>男性大于女性</li>\n<li>student的生存率最低,bady的生存率最高</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x = <span class=\"string\">'Cabin'</span>,y = <span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee585b0748&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_43_1.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x = <span class=\"string\">'Fare'</span>,y = <span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5852b390&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_44_1.png\" alt=\"png\"></p>\n<h2 id=\"3-建立模型\"><a href=\"#3-建立模型\" class=\"headerlink\" title=\"3 建立模型\"></a>3 建立模型</h2><h3 id=\"3-1-随机森林\"><a href=\"#3-1-随机森林\" class=\"headerlink\" title=\"3.1 随机森林\"></a>3.1 随机森林</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\">X_all = data_tr.drop([<span class=\"string\">'PassengerId'</span>,<span class=\"string\">'Survived'</span>],axis=<span class=\"number\">1</span>)<span class=\"comment\">#主要是乘客ID也没啥用，删就删了吧</span></span><br><span class=\"line\">y_all = data_tr[<span class=\"string\">'Survived'</span>]</span><br><span class=\"line\">p = <span class=\"number\">0.2</span> <span class=\"comment\">#用 百分之20作为测试集</span></span><br><span class=\"line\"></span><br><span class=\"line\">X_train,X_test, y_train, y_test = train_test_split(X_all,y_all,test_size=p, random_state=<span class=\"number\">23</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> make_scorer, accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> GridSearchCV</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#选择分类器的类型，我没试过其他的哦，因为在这个案例中，有人做过试验发现随机森林模型是最好的，所以选了它。呜呜，我下次试试其他的</span></span><br><span class=\"line\">clf = RandomForestClassifier()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以通过定义树的各种参数，限制树的大小，防止出现过拟合现象哦，也可以通过剪枝来限制，但sklearn中的决策树分类器目前不支持剪枝</span></span><br><span class=\"line\">parameters = &#123;<span class=\"string\">'n_estimators'</span>: [<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>], </span><br><span class=\"line\">              <span class=\"string\">'max_features'</span>: [<span class=\"string\">'log2'</span>, <span class=\"string\">'sqrt'</span>,<span class=\"string\">'auto'</span>], </span><br><span class=\"line\">              <span class=\"string\">'criterion'</span>: [<span class=\"string\">'entropy'</span>, <span class=\"string\">'gini'</span>],        <span class=\"comment\">#分类标准用熵，基尼系数</span></span><br><span class=\"line\">              <span class=\"string\">'max_depth'</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>], </span><br><span class=\"line\">              <span class=\"string\">'min_samples_split'</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">              <span class=\"string\">'min_samples_leaf'</span>: [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#以下是用于比较参数好坏的评分，使用'make_scorer'将'accuracy_score'转换为评分函数</span></span><br><span class=\"line\">acc_scorer = make_scorer(accuracy_score)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#自动调参，GridSearchCV，它存在的意义就是自动调参，只要把参数输进去，就能给出最优化的结果和参数</span></span><br><span class=\"line\"><span class=\"comment\">#GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。</span></span><br><span class=\"line\">grid_obj = GridSearchCV(clf,parameters,scoring=acc_scorer)</span><br><span class=\"line\">grid_obj = grid_obj.fit(X_train,y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将clf设置为参数的最佳组合</span></span><br><span class=\"line\">clf = grid_obj.best_estimator_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将最佳算法运用于数据中</span></span><br><span class=\"line\">clf.fit(X_train,y_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n  warnings.warn(CV_WARNING, FutureWarning)\n/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_search.py:814: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n  DeprecationWarning)\n\n\n\n\n\nRandomForestClassifier(bootstrap=True, class_weight=None, criterion=&apos;entropy&apos;,\n                       max_depth=5, max_features=&apos;sqrt&apos;, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=3,\n                       min_weight_fraction_leaf=0.0, n_estimators=4,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)</code></pre><h3 id=\"3-2-预测\"><a href=\"#3-2-预测\" class=\"headerlink\" title=\"3.2 预测\"></a>3.2 预测</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predictions = clf.predict(X_test)</span><br><span class=\"line\">print(accuracy_score(y_test,predictions))</span><br><span class=\"line\">data_tr</span><br></pre></td></tr></table></figure>\n\n<pre><code>0.8268156424581006</code></pre><div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>886</td>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>27.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>887</td>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>19.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>888</td>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>29.699118</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>889</td>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>890</td>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>32.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 9 columns</p>\n</div>\n\n\n\n<h3 id=\"3-3-预测test文件\"><a href=\"#3-3-预测test文件\" class=\"headerlink\" title=\"3.3 预测test文件\"></a>3.3 预测test文件</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predictions = clf.predict(data_te.drop(<span class=\"string\">'PassengerId'</span>,axis=<span class=\"number\">1</span>))</span><br><span class=\"line\">output = pd.DataFrame(&#123;<span class=\"string\">'Passengers'</span>:data_te[<span class=\"string\">'PassengerId'</span>],<span class=\"string\">'Survived'</span>:predictions&#125;)</span><br><span class=\"line\">output.to_csv(<span class=\"string\">r'test1.csv'</span>)</span><br><span class=\"line\">output.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Passengers</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"3-4-提交到kaggle官网\"><a href=\"#3-4-提交到kaggle官网\" class=\"headerlink\" title=\"3.4 提交到kaggle官网\"></a>3.4 提交到kaggle官网</h3><p>结果是 0.77990<br>hhhhhhhh还是比较满意的<br>下次用深度学习试试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>[TOC]</p><h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><ul>\n<li>Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况</li>\n</ul><p>数据来源kaggle</p><h2 id=\"1-数据预处理\"><a href=\"#1-数据预处理\" class=\"headerlink\" title=\"1 数据预处理\"></a>1 数据预处理</h2><h3 id=\"1-1-读入数据\"><a href=\"#1-1-读入数据\" class=\"headerlink\" title=\"1.1 读入数据\"></a>1.1 读入数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">data_train = pd.read_csv(<span class=\"string\">r'train.csv'</span>)</span><br><span class=\"line\">data_test = pd.read_csv(<span class=\"string\">r'test.csv'</span>)</span><br><span class=\"line\">data_train.head()</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"1-2-训练集与数据集\"><a href=\"#1-2-训练集与数据集\" class=\"headerlink\" title=\"1.2 训练集与数据集\"></a>1.2 训练集与数据集</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_test.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"1-2-1-查看数据完整性\"><a href=\"#1-2-1-查看数据完整性\" class=\"headerlink\" title=\"1.2.1 查看数据完整性\"></a>1.2.1 查看数据完整性</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_train.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB</code></pre><p>总共有891组数据，其中age是714条，Cabin是204条，共计12个变量</p>\n<blockquote>\n<p>乘客ID，存活情况，船票级别，乘客姓名，性别，年龄，船上的兄弟姐妹以及配偶的人数，船上的父母以及子女的人数，船票编号，船票费用，所在船舱，登船的港口</p>\n</blockquote>\n<h3 id=\"1-2-2-查看训练数据描述信息\"><a href=\"#1-2-2-查看训练数据描述信息\" class=\"headerlink\" title=\"1.2.2 查看训练数据描述信息\"></a>1.2.2 查看训练数据描述信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_train.describe()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>count</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <td>mean</td>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <td>std</td>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <td>min</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <td>25%</td>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <td>50%</td>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <td>75%</td>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <td>max</td>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<p>mean代表各项的均值，获救率为0.383838</p>\n<h3 id=\"1-3-1-年龄数据简化分组\"><a href=\"#1-3-1-年龄数据简化分组\" class=\"headerlink\" title=\"1.3.1  年龄数据简化分组\"></a>1.3.1  年龄数据简化分组</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_ages</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#把缺失值补上，方便分组</span></span><br><span class=\"line\">    df.Age = df.Age.fillna(<span class=\"number\">-0.5</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">#把Age分为不同区间,-1到0,1-5,6-12...,60以上,放到bins里，八个区间，对应的八个区间名称在group_names那</span></span><br><span class=\"line\">    bins = (<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">25</span>, <span class=\"number\">35</span>, <span class=\"number\">60</span>, <span class=\"number\">120</span>)</span><br><span class=\"line\">    group_names = [<span class=\"string\">'Unknown'</span>, <span class=\"string\">'Baby'</span>, <span class=\"string\">'Child'</span>, <span class=\"string\">'Teenager'</span>, <span class=\"string\">'Student'</span>, <span class=\"string\">'Young Adult'</span>, <span class=\"string\">'Adult'</span>, <span class=\"string\">'Senior'</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#开始对数据进行离散化，pandas.cut就是这个功能</span></span><br><span class=\"line\">    catagories = pd.cut(df.Age,bins,labels=group_names)</span><br><span class=\"line\">    df.Age = catagories</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>简化Cabin，就是取字母</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_cabin</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df.Cabin = df.Cabin.fillna(<span class=\"string\">'N'</span>)</span><br><span class=\"line\">    df.Cabin = df.Cabin.apply(<span class=\"keyword\">lambda</span> x:x[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>简化工资，也就是分组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_fare</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df.Fare = df.Fare.fillna(<span class=\"number\">-0.5</span>)</span><br><span class=\"line\">    bins = (<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">31</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    group_names = [<span class=\"string\">'Unknown'</span>, <span class=\"string\">'1_quartile'</span>, <span class=\"string\">'2_quartile'</span>, <span class=\"string\">'3_quartile'</span>, <span class=\"string\">'4_quartile'</span>]</span><br><span class=\"line\">    catagories = pd.cut(df.Fare,bins,labels=group_names)</span><br><span class=\"line\">    df.Fare = catagories</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>删除无用信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify_drop</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> df.drop([<span class=\"string\">'Name'</span>,<span class=\"string\">'Ticket'</span>,<span class=\"string\">'Embarked'</span>],axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>整合一遍，凑成新表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transform_features</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df = simplify_ages(df)</span><br><span class=\"line\">    df = simplify_cabin(df)</span><br><span class=\"line\">    df = simplify_fare(df)</span><br><span class=\"line\">    df = simplify_drop(df)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br></pre></td></tr></table></figure>\n\n<p>执行读取新表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#必须要再读取一遍原来的表，不然会报错,不仅训练集要简化，测试集也要，两者的特征名称要一致</span></span><br><span class=\"line\">data_train = pd.read_csv(<span class=\"string\">r'train.csv'</span>)</span><br><span class=\"line\">data_train = transform_features(data_train)</span><br><span class=\"line\">data_test = transform_features(data_test)</span><br><span class=\"line\">data_train.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Student</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1_quartile</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>Young Adult</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4_quartile</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>Young Adult</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2_quartile</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data_train=data_train.drop([\"PassengerId\",\"Cabin\",\"Name\"],axis=1)</span></span><br><span class=\"line\">data_train.head(<span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>195</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>58.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17569</td>\n      <td>146.5208</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>196</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>368703</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>197</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>42.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4579</td>\n      <td>8.4042</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>198</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370370</td>\n      <td>7.7500</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>199</td>\n      <td>0</td>\n      <td>2</td>\n      <td>female</td>\n      <td>24.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>248747</td>\n      <td>13.0000</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n<p>200 rows × 9 columns</p>\n</div>\n\n\n\n<p>选取我们需要的那几个列作为输入， 对于票价和姓名我就舍弃了，姓名没什么用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cols = [<span class=\"string\">'PassengerId'</span>,<span class=\"string\">'Survived'</span>,<span class=\"string\">'Pclass'</span>,<span class=\"string\">'Sex'</span>,<span class=\"string\">'Age'</span>,<span class=\"string\">'SibSp'</span>,<span class=\"string\">'Parch'</span>,<span class=\"string\">'Fare'</span>,<span class=\"string\">'Embarked'</span>]</span><br><span class=\"line\">data_tr=data_train[cols].copy()</span><br><span class=\"line\">data_tr.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cols = [<span class=\"string\">'PassengerId'</span>,<span class=\"string\">'Pclass'</span>,<span class=\"string\">'Sex'</span>,<span class=\"string\">'Age'</span>,<span class=\"string\">'SibSp'</span>,<span class=\"string\">'Parch'</span>,<span class=\"string\">'Fare'</span>,<span class=\"string\">'Embarked'</span>]</span><br><span class=\"line\">data_te=data_test[cols].copy()</span><br><span class=\"line\">data_te.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_tr.isnull().sum()</span><br><span class=\"line\">data_te.isnull().sum()</span><br></pre></td></tr></table></figure>\n\n<pre><code>PassengerId     0\nPclass          0\nSex             0\nAge            86\nSibSp           0\nParch           0\nFare            1\nEmbarked        0\ndtype: int64</code></pre><p>填充数据，，，，，，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age_mean = data_tr[<span class=\"string\">'Age'</span>].mean()</span><br><span class=\"line\">data_tr[<span class=\"string\">'Age'</span>] = data_tr[<span class=\"string\">'Age'</span>].fillna(age_mean)</span><br><span class=\"line\">data_tr[<span class=\"string\">'Embarked'</span>] = data_tr[<span class=\"string\">'Embarked'</span>].fillna(<span class=\"string\">'S'</span>)</span><br><span class=\"line\">data_tr.isnull().sum()</span><br></pre></td></tr></table></figure>\n\n<pre><code>PassengerId    0\nSurvived       0\nPclass         0\nSex            0\nAge            0\nSibSp          0\nParch          0\nFare           0\nEmbarked       0\ndtype: int64</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_tr.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<p>用数组特征化编码年龄和S C Q等等，，因为随机森林的输入需要数值，字符不行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#import numpy as np</span></span><br><span class=\"line\">age_mean = data_te[<span class=\"string\">'Age'</span>].mean()</span><br><span class=\"line\">data_te[<span class=\"string\">'Age'</span>] = data_te[<span class=\"string\">'Age'</span>].fillna(age_mean)</span><br><span class=\"line\">age_mean = data_te[<span class=\"string\">'Fare'</span>].mean()</span><br><span class=\"line\">data_te[<span class=\"string\">'Fare'</span>] = data_te[<span class=\"string\">'Fare'</span>].fillna(age_mean)</span><br><span class=\"line\"><span class=\"comment\">#data_te.replace(np.na, 0, inplace=True)</span></span><br><span class=\"line\"><span class=\"comment\">#data_te.replace(np.inf, 0, inplace=True)</span></span><br><span class=\"line\">data_te[<span class=\"string\">'Sex'</span>]= data_te[<span class=\"string\">'Sex'</span>].map(&#123;<span class=\"string\">'female'</span>:<span class=\"number\">0</span>, <span class=\"string\">'male'</span>: <span class=\"number\">1</span>&#125;).astype(int)</span><br><span class=\"line\">data_te[<span class=\"string\">'Embarked'</span>]= data_te[<span class=\"string\">'Embarked'</span>].map(&#123;<span class=\"string\">'S'</span>:<span class=\"number\">0</span>, <span class=\"string\">'C'</span>: <span class=\"number\">1</span>,<span class=\"string\">'Q'</span>:<span class=\"number\">2</span>&#125;).astype(int)</span><br><span class=\"line\">data_te.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>3</td>\n      <td>1</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>3</td>\n      <td>0</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>2</td>\n      <td>1</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>3</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_tr[<span class=\"string\">'Sex'</span>]= data_tr[<span class=\"string\">'Sex'</span>].map(&#123;<span class=\"string\">'female'</span>:<span class=\"number\">0</span>, <span class=\"string\">'male'</span>: <span class=\"number\">1</span>&#125;).astype(int)</span><br><span class=\"line\">data_tr[<span class=\"string\">'Embarked'</span>]= data_tr[<span class=\"string\">'Embarked'</span>].map(&#123;<span class=\"string\">'S'</span>:<span class=\"number\">0</span>, <span class=\"string\">'C'</span>: <span class=\"number\">1</span>,<span class=\"string\">'Q'</span>:<span class=\"number\">2</span>&#125;).astype(int)</span><br><span class=\"line\">data_tr.head()</span><br><span class=\"line\"><span class=\"comment\">#data_tr = pd.get_dummies(data_tr=data_tr,columns=['Embarked'])</span></span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h2 id=\"2-数据可视化\"><a href=\"#2-数据可视化\" class=\"headerlink\" title=\"2 数据可视化\"></a>2 数据可视化</h2><h3 id=\"2-1-年龄和生存率之间的关系\"><a href=\"#2-1-年龄和生存率之间的关系\" class=\"headerlink\" title=\"2.1  年龄和生存率之间的关系\"></a>2.1  年龄和生存率之间的关系</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x=<span class=\"string\">'Embarked'</span>,y=<span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data=data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5875e3c8&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_35_1.png\" alt=\"png\"></p>\n<ul>\n<li>female的获救率大于 male,(应该是男士都比较绅士吧，即使面对死亡，也希望将最后的机会留给女生，，电影感悟）</li>\n<li>获救率 C 男性女性都是最高，Q时男性最低，S 时 女性最低</li>\n<li>男性的获救率低于女性的三分之一</li>\n</ul>\n<h3 id=\"2-2-所做的位置和生存率之间的关系\"><a href=\"#2-2-所做的位置和生存率之间的关系\" class=\"headerlink\" title=\"2.2 所做的位置和生存率之间的关系\"></a>2.2 所做的位置和生存率之间的关系</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.pointplot(x=<span class=\"string\">'Pclass'</span>,y=<span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data=data_train,palette=&#123;<span class=\"string\">'male'</span>:<span class=\"string\">'blue'</span>,<span class=\"string\">'female'</span>:<span class=\"string\">'pink'</span>&#125;,</span><br><span class=\"line\">             marker=[<span class=\"string\">'*'</span>,<span class=\"string\">\"o\"</span>],linestyle=[<span class=\"string\">'-'</span>,<span class=\"string\">'--'</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee586f70b8&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_38_1.png\" alt=\"png\"></p>\n<ul>\n<li>等级越高获救率越高</li>\n<li>女性大于男性</li>\n</ul>\n<h3 id=\"2-3-生存率与年龄的关系\"><a href=\"#2-3-生存率与年龄的关系\" class=\"headerlink\" title=\"2.3 生存率与年龄的关系\"></a>2.3 生存率与年龄的关系</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x = <span class=\"string\">'Age'</span>,y = <span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee587238d0&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_41_1.png\" alt=\"png\"></p>\n<ul>\n<li>男性大于女性</li>\n<li>student的生存率最低,bady的生存率最高</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x = <span class=\"string\">'Cabin'</span>,y = <span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee585b0748&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_43_1.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.barplot(x = <span class=\"string\">'Fare'</span>,y = <span class=\"string\">'Survived'</span>,hue=<span class=\"string\">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5852b390&gt;</code></pre><p><img src=\"http://web.wvdon.com/md/output_44_1.png\" alt=\"png\"></p>\n<h2 id=\"3-建立模型\"><a href=\"#3-建立模型\" class=\"headerlink\" title=\"3 建立模型\"></a>3 建立模型</h2><h3 id=\"3-1-随机森林\"><a href=\"#3-1-随机森林\" class=\"headerlink\" title=\"3.1 随机森林\"></a>3.1 随机森林</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\">X_all = data_tr.drop([<span class=\"string\">'PassengerId'</span>,<span class=\"string\">'Survived'</span>],axis=<span class=\"number\">1</span>)<span class=\"comment\">#主要是乘客ID也没啥用，删就删了吧</span></span><br><span class=\"line\">y_all = data_tr[<span class=\"string\">'Survived'</span>]</span><br><span class=\"line\">p = <span class=\"number\">0.2</span> <span class=\"comment\">#用 百分之20作为测试集</span></span><br><span class=\"line\"></span><br><span class=\"line\">X_train,X_test, y_train, y_test = train_test_split(X_all,y_all,test_size=p, random_state=<span class=\"number\">23</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> make_scorer, accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> GridSearchCV</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#选择分类器的类型，我没试过其他的哦，因为在这个案例中，有人做过试验发现随机森林模型是最好的，所以选了它。呜呜，我下次试试其他的</span></span><br><span class=\"line\">clf = RandomForestClassifier()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以通过定义树的各种参数，限制树的大小，防止出现过拟合现象哦，也可以通过剪枝来限制，但sklearn中的决策树分类器目前不支持剪枝</span></span><br><span class=\"line\">parameters = &#123;<span class=\"string\">'n_estimators'</span>: [<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>], </span><br><span class=\"line\">              <span class=\"string\">'max_features'</span>: [<span class=\"string\">'log2'</span>, <span class=\"string\">'sqrt'</span>,<span class=\"string\">'auto'</span>], </span><br><span class=\"line\">              <span class=\"string\">'criterion'</span>: [<span class=\"string\">'entropy'</span>, <span class=\"string\">'gini'</span>],        <span class=\"comment\">#分类标准用熵，基尼系数</span></span><br><span class=\"line\">              <span class=\"string\">'max_depth'</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>], </span><br><span class=\"line\">              <span class=\"string\">'min_samples_split'</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">              <span class=\"string\">'min_samples_leaf'</span>: [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#以下是用于比较参数好坏的评分，使用'make_scorer'将'accuracy_score'转换为评分函数</span></span><br><span class=\"line\">acc_scorer = make_scorer(accuracy_score)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#自动调参，GridSearchCV，它存在的意义就是自动调参，只要把参数输进去，就能给出最优化的结果和参数</span></span><br><span class=\"line\"><span class=\"comment\">#GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。</span></span><br><span class=\"line\">grid_obj = GridSearchCV(clf,parameters,scoring=acc_scorer)</span><br><span class=\"line\">grid_obj = grid_obj.fit(X_train,y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将clf设置为参数的最佳组合</span></span><br><span class=\"line\">clf = grid_obj.best_estimator_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将最佳算法运用于数据中</span></span><br><span class=\"line\">clf.fit(X_train,y_train)</span><br></pre></td></tr></table></figure>\n\n<pre><code>/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n  warnings.warn(CV_WARNING, FutureWarning)\n/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_search.py:814: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n  DeprecationWarning)\n\n\n\n\n\nRandomForestClassifier(bootstrap=True, class_weight=None, criterion=&apos;entropy&apos;,\n                       max_depth=5, max_features=&apos;sqrt&apos;, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=3,\n                       min_weight_fraction_leaf=0.0, n_estimators=4,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)</code></pre><h3 id=\"3-2-预测\"><a href=\"#3-2-预测\" class=\"headerlink\" title=\"3.2 预测\"></a>3.2 预测</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predictions = clf.predict(X_test)</span><br><span class=\"line\">print(accuracy_score(y_test,predictions))</span><br><span class=\"line\">data_tr</span><br></pre></td></tr></table></figure>\n\n<pre><code>0.8268156424581006</code></pre><div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>886</td>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>27.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>887</td>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>19.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>888</td>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>29.699118</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>889</td>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>890</td>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>32.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 9 columns</p>\n</div>\n\n\n\n<h3 id=\"3-3-预测test文件\"><a href=\"#3-3-预测test文件\" class=\"headerlink\" title=\"3.3 预测test文件\"></a>3.3 预测test文件</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predictions = clf.predict(data_te.drop(<span class=\"string\">'PassengerId'</span>,axis=<span class=\"number\">1</span>))</span><br><span class=\"line\">output = pd.DataFrame(&#123;<span class=\"string\">'Passengers'</span>:data_te[<span class=\"string\">'PassengerId'</span>],<span class=\"string\">'Survived'</span>:predictions&#125;)</span><br><span class=\"line\">output.to_csv(<span class=\"string\">r'test1.csv'</span>)</span><br><span class=\"line\">output.head()</span><br></pre></td></tr></table></figure>\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre><p></style><p></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Passengers</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>896</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"3-4-提交到kaggle官网\"><a href=\"#3-4-提交到kaggle官网\" class=\"headerlink\" title=\"3.4 提交到kaggle官网\"></a>3.4 提交到kaggle官网</h3><p>结果是 0.77990<br>hhhhhhhh还是比较满意的<br>下次用深度学习试试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck82yy5mc0009rwv0pglweknv","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5nf000hrwv0n9hz9cpu"},{"post_id":"ck82yy5ly0001rwv0nzq29i8o","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5nk000mrwv0uxt8zcsb"},{"post_id":"ck82yy5mx000brwv0qw8mmec4","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5nn000prwv0ecqzbnq1"},{"post_id":"ck82yy5n7000frwv082st05pn","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5np000trwv0if1xg2x2"},{"post_id":"ck82yy5m30003rwv0750si4jx","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5nr000vrwv07ndwkab7"},{"post_id":"ck82yy5ma0007rwv0o5va8x5n","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5ns000yrwv0v1n926gx"},{"post_id":"ck82yy5n9000grwv0nl8up7zx","category_id":"ck82yy5nn000qrwv0js4w4y54","_id":"ck82yy5nt0010rwv04ja55970"},{"post_id":"ck82yy5nj000lrwv008aobt1c","category_id":"ck82yy5nr000wrwv0f4iwpcms","_id":"ck82yy5nv0015rwv0269tnebi"},{"post_id":"ck82yy5nl000orwv00nd7g0gs","category_id":"ck82yy5nr000wrwv0f4iwpcms","_id":"ck82yy5nw0017rwv0fxmtpshb"},{"post_id":"ck82yy5no000srwv0aqp6ujb3","category_id":"ck82yy5nv0014rwv0cdv8ksyq","_id":"ck82yy5nx0019rwv0pieh95du"},{"post_id":"ck82yy5u1001yrwv0j0qjbei0","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5u50022rwv01hpqaump"},{"post_id":"ck82yy5tw001trwv0og4n1ail","category_id":"ck82yy5tz001vrwv02r49qb0g","_id":"ck82yy5u60025rwv0up2h59bh"},{"post_id":"ck82yy5u2001zrwv0svs4iek3","category_id":"ck82yy5m50004rwv0zsod7qv8","_id":"ck82yy5u60026rwv0hwvqx64m"},{"post_id":"ck82yy5tx001urwv0qurf1hp0","category_id":"ck82yy5tz001vrwv02r49qb0g","_id":"ck82yy5u70028rwv0q89tfo3k"},{"post_id":"ck82yy5u0001xrwv02xhpgk63","category_id":"ck82yy5tz001vrwv02r49qb0g","_id":"ck82yy5u80029rwv0xsfx74er"},{"post_id":"ck82yy5xd002qrwv03k79on0a","category_id":"ck82yy5tz001vrwv02r49qb0g","_id":"ck82yy5xk002urwv0pc6i1db0"},{"post_id":"ck82yy608002yrwv0sqbm2o3u","category_id":"ck82yy609002zrwv0ltw212ko","_id":"ck82yy60a0032rwv0a4m8co8v"}],"PostTag":[{"post_id":"ck82yy5ly0001rwv0nzq29i8o","tag_id":"ck82yy5m80005rwv0lfgk6drd","_id":"ck82yy5n7000erwv0z0p820q7"},{"post_id":"ck82yy5n7000frwv082st05pn","tag_id":"ck82yy5m80005rwv0lfgk6drd","_id":"ck82yy5nj000krwv0qigg6dqf"},{"post_id":"ck82yy5m30003rwv0750si4jx","tag_id":"ck82yy5n1000drwv08eoiohho","_id":"ck82yy5nl000nrwv0ozex4te3"},{"post_id":"ck82yy5ma0007rwv0o5va8x5n","tag_id":"ck82yy5ni000jrwv0frh4pkqi","_id":"ck82yy5nq000urwv0jy6cid85"},{"post_id":"ck82yy5mc0009rwv0pglweknv","tag_id":"ck82yy5no000rrwv0n0qxfd4x","_id":"ck82yy5nt000zrwv0pxn89q5o"},{"post_id":"ck82yy5mx000brwv0qw8mmec4","tag_id":"ck82yy5ns000xrwv0fpuo3r77","_id":"ck82yy5nv0013rwv0birtahmw"},{"post_id":"ck82yy5n9000grwv0nl8up7zx","tag_id":"ck82yy5nu0012rwv0p7baddyd","_id":"ck82yy5ny001brwv0q2fkzz3r"},{"post_id":"ck82yy5n9000grwv0nl8up7zx","tag_id":"ck82yy5nw0016rwv0i7fuyswx","_id":"ck82yy5ny001crwv0kyt1q6ra"},{"post_id":"ck82yy5n9000grwv0nl8up7zx","tag_id":"ck82yy5nw0018rwv0ckxray2y","_id":"ck82yy5nz001erwv0i9m9gn1i"},{"post_id":"ck82yy5nj000lrwv008aobt1c","tag_id":"ck82yy5nx001arwv0663qclii","_id":"ck82yy5o0001grwv0nfxc9r6o"},{"post_id":"ck82yy5nj000lrwv008aobt1c","tag_id":"ck82yy5nz001drwv0coqcs76r","_id":"ck82yy5o0001hrwv0bu0405si"},{"post_id":"ck82yy5nl000orwv00nd7g0gs","tag_id":"ck82yy5nz001frwv0ckxdyszh","_id":"ck82yy5o2001krwv07c4w8v0x"},{"post_id":"ck82yy5nl000orwv00nd7g0gs","tag_id":"ck82yy5o1001irwv0qbjsehkv","_id":"ck82yy5o2001lrwv052dqgbuv"},{"post_id":"ck82yy5no000srwv0aqp6ujb3","tag_id":"ck82yy5o1001jrwv0mnlyaqv7","_id":"ck82yy5o3001nrwv0r2avxsei"},{"post_id":"ck82yy5no000srwv0aqp6ujb3","tag_id":"ck82yy5o3001mrwv0h4xtojim","_id":"ck82yy5o4001orwv0oeuylkfj"},{"post_id":"ck82yy5tw001trwv0og4n1ail","tag_id":"ck82yy5u0001wrwv0rd4p787d","_id":"ck82yy5u9002brwv0yo8wtsvw"},{"post_id":"ck82yy5tw001trwv0og4n1ail","tag_id":"ck82yy5u40021rwv08a0dtxa2","_id":"ck82yy5u9002crwv0uffisz9b"},{"post_id":"ck82yy5tw001trwv0og4n1ail","tag_id":"ck82yy5u60024rwv0k6xdow9k","_id":"ck82yy5ua002erwv00i981cne"},{"post_id":"ck82yy5tw001trwv0og4n1ail","tag_id":"ck82yy5u70027rwv0nomz9b6k","_id":"ck82yy5ua002frwv0x08lobht"},{"post_id":"ck82yy5tx001urwv0qurf1hp0","tag_id":"ck82yy5u0001wrwv0rd4p787d","_id":"ck82yy5ub002hrwv00xf3f5yk"},{"post_id":"ck82yy5tx001urwv0qurf1hp0","tag_id":"ck82yy5u40021rwv08a0dtxa2","_id":"ck82yy5uc002irwv0thq1ztwk"},{"post_id":"ck82yy5u0001xrwv02xhpgk63","tag_id":"ck82yy5u0001wrwv0rd4p787d","_id":"ck82yy5ue002lrwv0dosayi4g"},{"post_id":"ck82yy5u0001xrwv02xhpgk63","tag_id":"ck82yy5uc002jrwv0jk08zpci","_id":"ck82yy5ue002mrwv0s3jsk1gs"},{"post_id":"ck82yy5u1001yrwv0j0qjbei0","tag_id":"ck82yy5uc002krwv0zteaq5el","_id":"ck82yy5uf002orwv03ue7okcl"},{"post_id":"ck82yy5u2001zrwv0svs4iek3","tag_id":"ck82yy5uc002krwv0zteaq5el","_id":"ck82yy5uf002prwv0oj4oyedm"},{"post_id":"ck82yy5xd002qrwv03k79on0a","tag_id":"ck82yy5u0001wrwv0rd4p787d","_id":"ck82yy5xl002vrwv0divfhirs"},{"post_id":"ck82yy5xd002qrwv03k79on0a","tag_id":"ck82yy5u40021rwv08a0dtxa2","_id":"ck82yy5xl002wrwv07qlmmb1x"},{"post_id":"ck82yy5xd002qrwv03k79on0a","tag_id":"ck82yy5xg002srwv0tshasbuu","_id":"ck82yy5xm002xrwv0npgrwh1v"},{"post_id":"ck82yy608002yrwv0sqbm2o3u","tag_id":"ck82yy6090030rwv0vxufw7wa","_id":"ck82yy60b0034rwv0g16rgejm"},{"post_id":"ck82yy608002yrwv0sqbm2o3u","tag_id":"ck82yy60a0031rwv0grfr7zaw","_id":"ck82yy60c0035rwv0urld18oq"},{"post_id":"ck82yy608002yrwv0sqbm2o3u","tag_id":"ck82yy60b0033rwv00xdcbma3","_id":"ck82yy60c0036rwv0qydo193k"}],"Tag":[{"name":"ps","_id":"ck82yy5m80005rwv0lfgk6drd"},{"name":"git","_id":"ck82yy5n1000drwv08eoiohho"},{"name":"hexo","_id":"ck82yy5ni000jrwv0frh4pkqi"},{"name":"LaTex","_id":"ck82yy5no000rrwv0n0qxfd4x"},{"name":"markdown","_id":"ck82yy5ns000xrwv0fpuo3r77"},{"name":"摩尔定律","_id":"ck82yy5nu0012rwv0p7baddyd"},{"name":"安迪比尔定律","_id":"ck82yy5nw0016rwv0i7fuyswx"},{"name":"反摩尔定律","_id":"ck82yy5nw0018rwv0ckxray2y"},{"name":"nlp","_id":"ck82yy5nx001arwv0663qclii"},{"name":"特征处理","_id":"ck82yy5nz001drwv0coqcs76r"},{"name":"数据处理","_id":"ck82yy5nz001frwv0ckxdyszh"},{"name":"比赛","_id":"ck82yy5o1001irwv0qbjsehkv"},{"name":"网易云","_id":"ck82yy5o1001jrwv0mnlyaqv7"},{"name":"框女","_id":"ck82yy5o3001mrwv0h4xtojim"},{"name":"java","_id":"ck82yy5u0001wrwv0rd4p787d"},{"name":"数据结构","_id":"ck82yy5u40021rwv08a0dtxa2"},{"name":"KMP","_id":"ck82yy5u60024rwv0k6xdow9k"},{"name":"字符串匹配","_id":"ck82yy5u70027rwv0nomz9b6k"},{"name":"pat题解","_id":"ck82yy5uc002jrwv0jk08zpci"},{"name":"linux","_id":"ck82yy5uc002krwv0zteaq5el"},{"name":"数学问题","_id":"ck82yy5xg002srwv0tshasbuu"},{"name":"随机森林","_id":"ck82yy6090030rwv0vxufw7wa"},{"name":"kaggle","_id":"ck82yy60a0031rwv0grfr7zaw"},{"name":"数据挖掘","_id":"ck82yy60b0033rwv00xdcbma3"}]}}