<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴卫东のBlog</title>
  
  <subtitle>我究竟拿时间换了什么</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wvdon.com/"/>
  <updated>2020-03-22T11:18:27.833Z</updated>
  <id>http://wvdon.com/</id>
  
  <author>
    <name>Wedong Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据挖掘上分思路</title>
    <link href="http://wvdon.com/2020/03/20/%E6%AF%94%E8%B5%9B%E6%80%9D%E8%B7%AF-%E9%98%85%E8%AF%BB/"/>
    <id>http://wvdon.com/2020/03/20/比赛思路-阅读/</id>
    <published>2020-03-20T07:50:39.000Z</published>
    <updated>2020-03-22T11:18:27.833Z</updated>
    
    <content type="html"><![CDATA[<p>比赛思路-阅读</p><p><a href="https://www.secrss.com/articles/15352" target="_blank" rel="noopener">https://www.secrss.com/articles/15352</a></p><p>BERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!</p><p><img src="https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg" alt></p><ul><li><p>每一个模型的基础上，进行10折交叉验证</p></li><li><p>利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。</p></li><li><p>模型融合+gru</p><p><img src="https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png" alt></p></li></ul><a id="more"></a><p>假图片</p><p><strong>基本统计特征：</strong></p><ul><li><p>图片尺寸</p></li><li><p>图片后缀类型</p></li><li><p>图片模式（RGB、灰度等）</p></li><li><p>清晰度、亮度</p></li><li><p>直方图分布特征</p></li><li><p>各通道的均值方差等统计特征</p></li></ul><p><strong>特征意义：</strong></p><ul><li>关键特征包括图片尺寸和清晰度特征</li><li>图片尺寸可以识别图片的来源，比如手机截图的尺寸和相机照片尺寸截然不同</li></ul><p>一般认为图像越清晰越是真的，因为图像经过ps篡改之后清晰度会下降，还有一种可能性是谣言往往传播得更快，传播过程中的每一次保存和发送都可能会降低清晰度</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛思路-阅读&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.secrss.com/articles/15352&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.secrss.com/articles/15352&lt;/a&gt;&lt;/p&gt;&lt;p&gt;BERT-Finetune、BERT-CNN-Pooling、BERT-RCNPooling多种结构进行融合!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuGAHWvrAAGOBh7iz9U059.jpg&quot; alt&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每一个模型的基础上，进行10折交叉验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用 textrank4zh 对每条新闻文本取10个关键词，汇集所有的关键词，得到前100个出现最多的关键词。通过观察这些关键词，发现假新闻喜欢对部分人名、地名、名词、动词进行造谣。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模型融合+gru&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s.secrss.com/group1/M00/00/BC/Cvmo0l3YGuKAGCPJAAEdvEC-5_A736.png&quot; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="machineLearning" scheme="http://wvdon.com/categories/machineLearning/"/>
    
    
      <category term="数据处理" scheme="http://wvdon.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="比赛" scheme="http://wvdon.com/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>1833：网易云里永远定格的数字</title>
    <link href="http://wvdon.com/2020/03/01/%E7%BA%AA%E5%BF%B5%E7%BD%91%E6%98%93%E4%BA%91%E9%87%8C%E9%82%A3%E4%BA%9B%E7%83%AD%E7%88%B1%E7%94%9F%E6%B4%BB%E7%9A%84%E4%BA%BA/"/>
    <id>http://wvdon.com/2020/03/01/纪念网易云里那些热爱生活的人/</id>
    <published>2020-03-01T07:50:39.000Z</published>
    <updated>2020-03-22T11:18:27.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1833：网易云里永远定格的数字"><a href="#1833：网易云里永远定格的数字" class="headerlink" title="1833：网易云里永远定格的数字"></a>1833：网易云里永远定格的数字</h2><p>​        2017年2月15日23时30分在上海市普陀区中山北路2605弄43号一处出租屋的发生一起火灾事故，此次事故导致4人死亡。<br>​        事后采访小区居民说，事发时一同在屋内的还有男主人的妻子和一对儿女。 “这个师傅人很好的，看到我们去他店里修东西，打招呼都很和善。女儿正在读大学，15日刚过完春节回来，儿子还在读小学，本来今天就应该开学了“。</p><a id="more"></a><p>😀<strong>我们虽不曾相识</strong>，也不知你走的那一刻有多孤单，害怕。可你什么都没有做错啊，为什么意外这样对待你啊。1833是这个小姐姐的听歌排行，她听的最多的一首歌是”<a href="https://music.163.com/#/song?id=32408774" target="_blank" rel="noopener"><strong>终有一天，我会抛弃你们</strong></a>“，而现在这个数字永远停留在了1833。我也多么希望这个数字哪怕会变一下，告诉我你还好。</p><blockquote><p>错的不是你，是这个世界。愿天堂有音乐，愿天堂没有火灾。</p></blockquote><hr><p><img src="http://web.wvdon.com/%E6%89%B9%E6%B3%A8%202020-03-01%20153003.png" alt></p><p>👩<a href="https://music.163.com/#/user/home?id=254967036" target="_blank" rel="noopener">@框女</a>  如今她也有了30885关注。</p><blockquote><p>或许我喜欢网易云的原因大概是每首歌的每一条评论里都包含了故事与爱。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      纪念网易云里那些热爱生活的人，愿生活温柔以待你
    
    </summary>
    
      <category term="remember" scheme="http://wvdon.com/categories/remember/"/>
    
    
      <category term="网易云" scheme="http://wvdon.com/tags/%E7%BD%91%E6%98%93%E4%BA%91/"/>
    
      <category term="框女" scheme="http://wvdon.com/tags/%E6%A1%86%E5%A5%B3/"/>
    
  </entry>
  
  <entry>
    <title>文本特征处理</title>
    <link href="http://wvdon.com/2020/02/27/%E6%96%87%E6%9C%AC%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    <id>http://wvdon.com/2020/02/27/文本特征提取/</id>
    <published>2020-02-27T07:50:39.000Z</published>
    <updated>2020-03-22T11:18:27.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本特征提取"><a href="#文本特征提取" class="headerlink" title="文本特征提取"></a>文本特征提取</h1><p><a href="https://www.cnblogs.com/ljhdo/p/10578047.html" target="_blank" rel="noopener">参考</a></p><p>机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据</p><h3 id="One-Hot"><a href="#One-Hot" class="headerlink" title="One-Hot"></a>One-Hot</h3><p>One-Hot方法很简单，但是它的问题也很明显：</p><ul><li>没有考虑单词之间的相对位置，任意两个词之间都是孤立的；</li><li>如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；</li></ul><a id="more"></a><p><strong>One-Hot表示的应用</strong></p><p>sklearn使用词袋（Bag of Words）和TF-IDF模型来表示文本数据，这两个模型都是One-Hot表示的应用，其中，词袋模型对应的就是文档向量。</p><h3 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h3><p>词袋模型（BoW）是用于文本表示的最简单的方法， BoW把文本转换为文档中单词出现次数的矩阵，该模型只关注文档中是否出现给定的单词和单词出现频率，而舍弃文本的结构、单词出现的顺序和位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CountVectorizer(input=’content’, encoding=’utf<span class="number">-8</span>’, decode_error=’strict’, strip_accents=<span class="literal">None</span>, </span><br><span class="line">                lowercase=<span class="literal">True</span>,    preprocessor=<span class="literal">None</span>, tokenizer=<span class="literal">None</span>, stop_words=<span class="literal">None</span>, </span><br><span class="line">                token_pattern=’(?u)\b\w\w+\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class="line">                max_df=<span class="number">1.0</span>, min_df=<span class="number">1</span>, max_features=<span class="literal">None</span>, vocabulary=<span class="literal">None</span>, binary=<span class="literal">False</span>, </span><br><span class="line">                dtype=&lt;<span class="class"><span class="keyword">class</span> ‘<span class="title">numpy</span>.<span class="title">int64</span>’&gt;)</span></span><br></pre></td></tr></table></figure><p>常用参数注释:</p><ul><li>input：默认值是content，表示输入的是顺序的字符文本</li><li>decode_error：默认为strict，遇到不能解码的字符将报UnicodeDecodeError错误，设为ignore将会忽略解码错误</li><li>lowercase：默认值是True，在分词（Tokenize）之前把文本中的所有字符转换为小写。</li><li>preprocessor：预处理器，在分词之前对文本进行预处理，默认值是None</li><li>tokenizer：分词器，把文本字符串拆分成各个单词（token），默认值是None</li><li>analyzer：用于预处理和分词，可设置为string类型，如’word’, ‘char’, ‘char_wb’，默认值是word</li><li>stop_words：停用词表，如果值是english，使用内置的英语停用词列表；如果是一个列表，那么使用该列表作为停用词，设为None且max_df∈[0.7, 1.0)将自动根据当前的语料库建立停用词表</li><li>ngram_range：tuple（min_n，max_n），表示ngram模型的范围</li><li>max_df：可以设置为范围在[0.0 1.0]的浮点数，也可以设置为没有范围限制的整数，默认为1.0。这个参数的作用是作为一个阈值，当构造语料库的词汇表时，如果某个词的document frequence大于max_df，这个词不会被当作关键词。如果这个参数是float，则表示词出现的次数与语料库文档数的百分比，如果是int，则表示词出现的次数。如果参数中已经给定了vocabulary，则这个参数无效</li><li>min_df：类似于max_df，不同之处在于如果某个词的document frequence小于min_df，则这个词不会被当作关键词</li><li>max_features：对所有关键词的term frequency进行降序排序，只取前max_features个作为关键词集</li><li>vocabulary：默认为None，自动从输入文档中构建关键词集，也可以是一个字典或可迭代对象。</li><li>binary：默认为False，一个关键词在一篇文档中可能出现n次；如果binary=True，非零的n将全部置为1，这对需要布尔值输入的离散概率模型的有用的</li><li><strong>dtype</strong> ：用于设置fit_transform() 或 transform()函数返回的矩阵元素的数据类型</li></ul><p>模型的属性和方法：</p><ul><li>vocabulary_：词汇表，字典类型</li><li>get_feature_names()：所有文本的词汇，列表型</li><li>stop_words_：停用词列表</li></ul><p>模型的主要方法：</p><ul><li>fit(raw_document)：拟合模型，对文本分词，并构建词汇表等</li><li>transform(raw_documents)：把文档转换为文档-词矩阵</li><li>fit_transform(raw_documents)：拟合文档，并返回该文档的文档-词矩阵</li></ul><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>TF-IDF模型用于对特征信息量进行缩放，当一个词在特定的文档中经常出现，而在其他文档中出现的频次很低，那么给予该词较高的权重；当一次词在多个文档中出现的频次都很高，那么给予该词较低的权重。如果一次单词在特定的文档中出现的频次很高，而在其他文档中出现的频次很低，那么这个单词很可能是该文档独有的词，能够很好地描述该文档。</p><p><strong>1，TF-IDF模型计算原理</strong></p><p>TF（ Term Frequency）是词频，表示每个单词在文档中的数量（频数），TF依赖于BoW模型的输出。</p><p>IDF（Inverse Document Frequency）是逆文档频率，代表一个单词的普遍成都，当一个词越普遍（即有大量文档包含这个词）时，其IDF值越低；反之，则IDF值越高。IDF是包含该单词的文档数量和文档总数的对数缩放比例</p><p><img src="https://img2018.cnblogs.com/blog/628084/201903/628084-20190322180339455-653606013.png" alt="img"></p><p>TF-IDF（术语频率 - 逆文档频率）模型是TF和IDF相乘的结果：TF-IDF=TF*IDF。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TfidfVectorizer(input=’content’, encoding=’utf<span class="number">-8</span>’, decode_error=’strict’, strip_accents=<span class="literal">None</span>, </span><br><span class="line">                lowercase=<span class="literal">True</span>,    preprocessor=<span class="literal">None</span>, tokenizer=<span class="literal">None</span>, stop_words=<span class="literal">None</span>, </span><br><span class="line">                token_pattern=’(?u)\b\w\w+\b’, ngram_range=(1, 1), analyzer=’word’, </span><br><span class="line">                max_df=<span class="number">1.0</span>, min_df=<span class="number">1</span>, max_features=<span class="literal">None</span>, vocabulary=<span class="literal">None</span>, binary=<span class="literal">False</span>, </span><br><span class="line">                dtype=dtype=&lt;class ‘numpy.float64’&gt;, </span><br><span class="line">                norm=’l2’, use_idf=<span class="literal">True</span>, smooth_idf=<span class="literal">True</span>, sublinear_tf=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>大部分参数和CountVectorizer相同，TfidfVectorizer独有的参数注释：</p><ul><li>norm=’l2’：每个输出行具备单位规范，当引用’l2’范式时，所有向量元素的平方和为1；当应用l2范数时，两个向量之间的余弦相似度是它们的点积。 *’l1’：向量元素的绝对值之和为1。</li><li>use_idf=True：启用IDF来重新加权</li><li>smooth_idf=True：平滑idf权重，向文档-词频矩阵的所有位置加1，就像存在一个额外的文档，只包含词汇表中的每个术语一次，目的是为了防止零分裂。</li><li>sublinear_tf=False：应用次线性tf缩放，默认值是False</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文本特征提取&quot;&gt;&lt;a href=&quot;#文本特征提取&quot; class=&quot;headerlink&quot; title=&quot;文本特征提取&quot;&gt;&lt;/a&gt;文本特征提取&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/ljhdo/p/10578047.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;p&gt;机器学习算法往往无法直接处理文本数据，需要把文本数据转换为数值型数据&lt;/p&gt;&lt;h3 id=&quot;One-Hot&quot;&gt;&lt;a href=&quot;#One-Hot&quot; class=&quot;headerlink&quot; title=&quot;One-Hot&quot;&gt;&lt;/a&gt;One-Hot&lt;/h3&gt;&lt;p&gt;One-Hot方法很简单，但是它的问题也很明显：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;没有考虑单词之间的相对位置，任意两个词之间都是孤立的；&lt;/li&gt;
&lt;li&gt;如果文档中有很多词，词向量会有很多列，但是只有一个列的值是1；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="machineLearning" scheme="http://wvdon.com/categories/machineLearning/"/>
    
    
      <category term="nlp" scheme="http://wvdon.com/tags/nlp/"/>
    
      <category term="特征处理" scheme="http://wvdon.com/tags/%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法</title>
    <link href="http://wvdon.com/2019/10/27/MarkDown%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://wvdon.com/2019/10/27/MarkDown快速入门/</id>
    <published>2019-10-27T15:42:57.000Z</published>
    <updated>2020-03-22T11:18:27.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MarkDown快速入门"><a href="#MarkDown快速入门" class="headerlink" title="MarkDown快速入门"></a>MarkDown快速入门</h1><p><strong>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</strong></p><blockquote><p>推荐使用<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>进行编辑</p></blockquote><p>插入目录：[Toc] 自动生成目录</p><a id="more"></a><p>[TOC]</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题:"></a>标题:</h2><p>H1-H6</p><p># 标题1<br>## 标题2<br>### 标题3</p><h1 id="斜体与加粗"><a href="#斜体与加粗" class="headerlink" title="斜体与加粗"></a>斜体与加粗</h1><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>*文本* 或者 _文本_</p><p><em>文本</em></p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>*<em>文本*</em></p><p><strong>文本</strong></p><h2 id="插入图片与链接"><a href="#插入图片与链接" class="headerlink" title="插入图片与链接"></a>插入图片与链接</h2><h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p>[链接文本标题](链接地址)</p><p><a href>链接文本标题</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>!<a href="图片链接"></a></p><h2 id="代码语法高亮"><a href="#代码语法高亮" class="headerlink" title="代码语法高亮"></a>代码语法高亮</h2><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><p>&lt;!–￼0–&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(“hello MachineLearning-Question”)</span><br></pre></td></tr></table></figure><h3 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h3><p>`bash run.py`</p><p><code>bash run.py</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>可以使用 * 或者 + -，注意之间的空格</p><p>- list1</p><p>​    - list1.1</p><p>- list2</p><p>​    - list1.2</p><ul><li>list1<ul><li>list1.1</li></ul></li><li>list2<ul><li>list1.2</li></ul></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>1.list1(我这里在 . 之前使用了\防止转变)</p><p>2.list2</p><ol><li><p>list1</p></li><li><p>list2</p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>-–  或者 *****</p><hr><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>==高亮文本==</p><p>==高亮文本==</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><del>删除</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除~~</span><br></pre></td></tr></table></figure><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>&gt; 一级引言</p><blockquote><p>一级引言</p></blockquote><p>&gt;&gt; 二级引言</p><blockquote><blockquote><p>二级引言</p></blockquote></blockquote><h3 id="更多排版规范可以参考Markdown中文文档"><a href="#更多排版规范可以参考Markdown中文文档" class="headerlink" title="更多排版规范可以参考Markdown中文文档"></a>更多排版规范可以参考<a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">Markdown中文文档</a></h3>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="markdown" scheme="http://wvdon.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>第二章 ：k-近邻算法</title>
    <link href="http://wvdon.com/2019/10/24/machineLearning/machineLearning/2019-10-24-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%EF%BC%9Ak-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    <id>http://wvdon.com/2019/10/24/machineLearning/machineLearning/2019-10-24-第二章-：k-近邻算法/</id>
    <published>2019-10-24T13:04:52.000Z</published>
    <updated>2020-03-22T11:18:27.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p><a id="more"></a><h2 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h2><p>俗话说近朱者赤近墨者黑，如果你想判断这个人是怎么样的人，你不妨先去看看他的朋友圈是怎么样的，所谓观其友，而识其人。</p><p><img src="http://web.wvdon.com/machine-learning-1.png" alt></p><p>从图中我们能够看到，如果要判断 绿色的是什么形状我们可以通过先判断他距离他最近的K个图形</p><p>当K=3,基于统计，两个三角形（2/3），一个正方形（1/3），我们可以判断绿色为三角形</p><p>当K=5，两个三角形(2/5),三个正方形(3/5),我们判断绿色为正方形</p><p>························</p><h4 id="k-近邻算法的一般流程"><a href="#k-近邻算法的一般流程" class="headerlink" title="k-近邻算法的一般流程"></a>k-近邻算法的一般流程</h4><blockquote><p>(1) 收集数据：可以使用任何方法。<br>(2) 准备数据：距离计算所需要的数值，最好是结构化的数据格式。<br>(3) 分析数据：可以使用任何方法。<br>(4) 训练算法：此步骤不适用于k-近邻算法。<br>(5) 测试算法：计算错误率。<br>(6) 使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输 入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。</p></blockquote><h2 id="KNN简单实现-1"><a href="#KNN简单实现-1" class="headerlink" title="KNN简单实现(1)"></a>KNN简单实现(1)</h2><blockquote><p> python=3.7</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Created on 2019/10/24 by wvdon</span></span><br><span class="line"><span class="comment"># website wvdon.com</span></span><br><span class="line"><span class="comment"># 导入使用的包</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> operator</span><br></pre></td></tr></table></figure><p>创建训练的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    group = array([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">1.2</span>,<span class="number">0.1</span>],[<span class="number">0.1</span>,<span class="number">1.4</span>],[<span class="number">0.3</span>,<span class="number">3.5</span>]])</span><br><span class="line">    labels = [<span class="string">"A"</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"B"</span>]</span><br><span class="line">    <span class="keyword">return</span> group,labels</span><br></pre></td></tr></table></figure><p>利用matplotlib观察数据分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">group,labels = createDataSet()</span><br><span class="line">x = group[:,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = group[:,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://web.wvdon.com/output_6_0.png" alt="png"></p><h4 id="定义一个KNN函数"><a href="#定义一个KNN函数" class="headerlink" title="定义一个KNN函数"></a>定义一个KNN函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX,dataSet,labels,k)</span>:</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>] <span class="comment">#获得训练集的长度</span></span><br><span class="line">    diffMat = tile(inX,(dataSetSize,<span class="number">1</span>))-dataSet <span class="comment"># 复制数组 并将差值计算出来</span></span><br><span class="line">    <span class="comment">#下面三个是计算欧氏距离 </span></span><br><span class="line">    sqDiffMat = diffMat**<span class="number">2</span></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获得distances从小到大的索引值</span></span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    <span class="comment">#找到前K个标签，输出最大的</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount [voteIlabel] = classCount.get(voteIlabel,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    sortedClassCount = sorted(classCount.items(),key = operator.itemgetter(<span class="number">1</span>),reverse = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = classify0([<span class="number">1.2</span>,<span class="number">0.1</span>],group,labels,<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos;</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><strong>欧氏距离</strong>，最常见的两点之间或多点之间的距离表示法，又称之为欧几里得度量，它定义于欧几里得空间中，如点 x = (x1,…,xn),到 y(y1,….yn)</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=dist(X,Y)&space;=&space;\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\sqrt{\sum_{i=1}^{n}(X_i-Y_i)^2}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?dist(X,Y)&space;=&space;\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2&plus;····&plus;(x_n-y_n)^2}=\sqrt{\sum_{i=1}^{n}(X_i-Y_i)^2}" title="dist(X,Y) = \sqrt{(x_1-y_1)^2+(x_2-y_2)^2+····+(x_n-y_n)^2}=\sqrt{\sum_{i=1}^{n}(X_i-Y_i)^2}"></a></p><p>二位平面上 </p><p><a href="https://www.codecogs.com/eqnedit.php?latex=d&space;=&space;\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?d&space;=&space;\sqrt{(x_1-y_1)^2&plus;(x_2-y_2)^2}" title="d = \sqrt{(x_1-y_1)^2+(x_2-y_2)^2}"></a></p><h4 id="numpy-函数"><a href="#numpy-函数" class="headerlink" title="numpy 函数"></a>numpy 函数</h4><p>tile<br>sum(axis=1)<br>argsort()<br><a href>numpy总结</a></p><h2 id="使用-k-近邻算法改进约会网站的配对效果-2"><a href="#使用-k-近邻算法改进约会网站的配对效果-2" class="headerlink" title="使用 k-近邻算法改进约会网站的配对效果(2)"></a>使用 k-近邻算法改进约会网站的配对效果(2)</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="[https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781](https://baike.baidu.com/item/k近邻算法/9512781)">百度百科</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一章 ：机器学习基础</title>
    <link href="http://wvdon.com/2019/10/22/machineLearning/machineLearning/2019-10-22-%E7%AC%AC%E4%B8%80%E7%AB%A0-%EF%BC%9A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <id>http://wvdon.com/2019/10/22/machineLearning/machineLearning/2019-10-22-第一章-：机器学习基础/</id>
    <published>2019-10-22T13:04:52.000Z</published>
    <updated>2020-03-22T11:18:27.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章源自于读《机器学习实战》这本书的学习笔记，用于记录学习内容，不断更新，，</p><p>21世纪互联网的发展，使得我们对于数据的收集更加容易，在这样大量数据的前提下，我们必须要挖掘出海量数据的价值，而机器学习的算法受到许多爱好技术人员的青睐，是因为这些算法在一定程度上可以帮助我们进行一些诸如回归预测，分类，识别等诸多场景的应用。</p><a id="more"></a><h4 id="何谓数据，信息，知识呢？"><a href="#何谓数据，信息，知识呢？" class="headerlink" title="何谓数据，信息，知识呢？"></a>何谓数据，信息，知识呢？</h4><blockquote><p>一切的实物都是数据，而信息是有用的数据</p><p>例如： 通过测量行星的位置和对应的时间，我们得到的就是数据。而通过这些数据获得行星的轨迹就是信息，通过这些信息总结出来开普勒三定律就是知识了。</p></blockquote><h2 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h2><p>《机器学习实战》全书共15章，主要是介绍了数据挖掘的十大算法其八：</p><p>C4.5决策树、K-均值（K-mean）、支持向量机（SVM）、Apriori、 最大期望算法（EM）、PageRank算法、AdaBoost算法、k-近邻算法（kNN）、朴素贝叶斯算法（NB） 和分类回归树（CART）算法。没有包括最大期望算法和PageRank 算法。本书没有包括PageRank算法，是因为搜索引擎巨头Google引入的PageRank算法已经在很多 著作里得到了充分的论述，没有必要进一步累述；而最大期望算法没有纳入，是因为涉及太多的</p><h4 id="选择本书的原因"><a href="#选择本书的原因" class="headerlink" title="选择本书的原因"></a>选择本书的原因</h4><p>本书的实战性比较强，每个章节都是用例子来说明的，符合我这种喜欢写代码的同学，如果是西瓜书我可能看着就睡着了，理论知识太多了。</p><p>我的计划是可以通过本书对这几个算法有一定的了解之后再选择西瓜书或李宏毅的课程进行研读。</p><p>由于书上实现都是用的python2.x，我会用python3.7将其复现，并用jupyter展示出来。</p><h2 id="何谓机器学习呢？"><a href="#何谓机器学习呢？" class="headerlink" title="何谓机器学习呢？"></a>何谓机器学习呢？</h2><p>机器学习是一类算法的总称，这些算法企图从大量历史数据中挖掘出其中隐含的规律，并用于预测或者分类，更具体的说，机器学习可以看作是寻找一个函数，输入是样本数据，输出是期望的结果，只是这个函数过于复杂，以至于不太方便形式化表达。需要注意的是，机器学习的目标是使学到的函数很好地适用于“新样本”，而不仅仅是在训练样本上表现很好。学到的函数适用于新样本的能力，称为泛化（Generalization）能力。</p><p>简言之，机器学习可以揭示数据背后的真实 含义</p><h2 id="人工智能-机器学习-深度学习"><a href="#人工智能-机器学习-深度学习" class="headerlink" title="人工智能 机器学习 深度学习"></a>人工智能 机器学习 深度学习</h2><p><b>人工智能是追求目标，机器学习是实现手段，深度学习是其中一种方法。</b></p><h3 id="人工智能（Artificial-Intelligence）：机器赋予人的智慧"><a href="#人工智能（Artificial-Intelligence）：机器赋予人的智慧" class="headerlink" title="人工智能（Artificial Intelligence）：机器赋予人的智慧"></a>人工智能<strong>（Artificial Intelligence）</strong>：机器赋予人的智慧</h3><p>1956年，几个计算机科学家相聚在达特茅斯会议，提出了“人工智能”的概念，梦想着用当时刚刚出现的计算机来构造复杂的、拥有与人类智慧同样本质特性的机器<br>2012年以后，得益于数据量的上涨、运算力的提升和机器学习新算法（深度学习）的出现，人工智能开始大爆发。</p><p>现在人工智能的研究领域只要有 专家系统、机器学习、进化计算、模糊逻辑、计算机视觉、自然语言处理、推荐系统等</p><h5 id="弱人工智能-强人工智能"><a href="#弱人工智能-强人工智能" class="headerlink" title="弱人工智能-强人工智能"></a>弱人工智能-强人工智能</h5><p>我们现在所说的人工智能都是弱人工智能，能够实现具体的某一种任务，如人脸识别，机器翻译。<br>墙人工智能大概就像是人一样吧，能够自己学习everything</p><h3 id="机器学习（Machine-Learning）：一种实现人工智能的手段"><a href="#机器学习（Machine-Learning）：一种实现人工智能的手段" class="headerlink" title="机器学习（Machine Learning）：一种实现人工智能的手段"></a>机器学习（Machine Learning）：一种实现人工智能的手段</h3><p>机器学习的最基本做法，便是使用算法来对数据进行解析、学习，然后对真实世界中的数据/事件作出决策/预测。</p><p>根据<strong>使用算法</strong>的不同，机器学习的算法可包括：决策树、聚类、支持向量机、朴素贝叶斯等。</p><p>根据<strong>学习方法</strong>的不同，机器学习可以分为：监督学习、半监督学习、无监督学习、集成学习等。</p><h3 id="深度学习-Deep-Learning-：一种实现机器学习的方法"><a href="#深度学习-Deep-Learning-：一种实现机器学习的方法" class="headerlink" title="深度学习(Deep Learning)：一种实现机器学习的方法"></a>深度学习(Deep Learning)：一种实现机器学习的方法</h3><p>对机器学习来说，特征提取并不简单。特征工程往往需要大量的时间去优化，而此时，深度学习便可以自动学习特征和任务之间的关联，还能从简单特征中提取复杂的特征。深</p><p>度学习的概念源于人工神经网络的研究，含多隐层的多层感知器就是一种深度学习结构，深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示</p><h3 id="三者联系"><a href="#三者联系" class="headerlink" title="三者联系"></a>三者联系</h3><p><img src="http://web.wvdon.com/ai.PNG" alt></p><p>人工智能 &gt;&gt; 机器学习 &gt;&gt; 深度学习</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>机器学习的任务个人理解是主要做分类与回归。分类和回归属于监督学习，之所以称 之为监督学习，是因为这类算法必须知道预测什么，即目标变量的分类信息。</p><p>与监督学习相对应的是无监督学习，此时数据没有类别信息，也不会给定目标值。对于离散型的遍历</p><h4 id="选择合适的算法："><a href="#选择合适的算法：" class="headerlink" title="选择合适的算法："></a>选择合适的算法：</h4><p>如果想要预测目标变量的值，则可以选择监督学习算法， 否则可以选择无监督学习算法。确定选择监督学习算法之后，需要进一步确定目标变量类型，如 果目标变量是离散型，如是/否、1/2/3、A/B/C或者红/黄/黑等，则可以选择分类器算法；如果目 标变量是连续型的数值，如0.0～100.00、999～999或者+∞～-∞等，则需要选择回归算法</p><blockquote><p> 离散型：分类器</p><p>连续性：逻辑回归</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/hohaizx/article/details/80584307" target="_blank" rel="noopener">机器学习简介</a></p><p><a href="https://www.zhihu.com/question/57770020" target="_blank" rel="noopener">知乎-人工智能-机器学习-深度学习的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本系列文章源自于读《机器学习实战》这本书的学习笔记，用于记录学习内容，不断更新，，&lt;/p&gt;&lt;p&gt;21世纪互联网的发展，使得我们对于数据的收集更加容易，在这样大量数据的前提下，我们必须要挖掘出海量数据的价值，而机器学习的算法受到许多爱好技术人员的青睐，是因为这些算法在一定程度上可以帮助我们进行一些诸如回归预测，分类，识别等诸多场景的应用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux命令缩写一揽表</title>
    <link href="http://wvdon.com/2019/10/18/linux/2019-10-17-Linux%E5%91%BD%E4%BB%A4%E7%BC%A9%E5%86%99%E4%B8%80%E8%A7%88%E8%A1%A8/"/>
    <id>http://wvdon.com/2019/10/18/linux/2019-10-17-Linux命令缩写一览表/</id>
    <published>2019-10-18T07:50:39.000Z</published>
    <updated>2020-03-22T11:13:25.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>每每都会忘记linux命令，不过我记得全拼的时候可能就能想起来了。                                                                                                     </p><a id="more"></a><p>​                                                                                                                                                                              </p><blockquote><p>ls：list(列出目录内容)</p><p>cd：Change Directory（改变目录）</p><p>su:switch user 切换用户</p><p>rpm:redhat package manager 红帽子打包管理器</p><p>pwd:print work directory 打印当前目录显示出当前工作目录的绝对路径</p><p>ps: process status(进程状态，类似于 windows 的任务管理器)</p><p>常用参数：－auxf</p><p>ps -auxf 显示进程状态</p><p>df: disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</p><p>rpm：即 RedHat Package Management，是 RedHat 的发明之一</p><p>rmdir：Remove Directory（删除目录）</p><p>rm：Remove（删除目录或文件）</p><p>cat: concatenate 连锁 cat file1 file2&gt;&gt;file3把文件1和文件2的内容联合起来放到 file3中</p><p>insmod: install module,载入模块</p><p>ln -s : link -soft 创建一个软链接，相当于创建一个快捷方式</p><p>mkdir：Make Directory(创建目录</p><p>touch</p><p>man: Manual</p><p>pwd：Print working directory</p><p>su：Swith user</p><p>cd：Change directory</p><p>ls：List files</p><p>ps：Process Status</p><p>mkdir：Make directory</p><p>rmdir：Remove directory</p><p>mkfs: Make file system</p><p>fsck：File system check</p><p>cat: Concatenate</p><p>uname: Unix name</p><p>df: Disk free</p><p>du: Disk usage</p><p>lsmod: List modules</p><p>mv: Move file</p><p>rm: Remove file</p><p>cp: Copy file</p><p>ln: Link files</p><p>fg: Foreground</p><p>bg: Background</p><p>chown: Change owner</p><p>chgrp: Change group</p><p>chmod: Change mode</p><p>umount: Unmount</p><p>dd: 本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”</p><p>tar：Tape archive</p><p>ldd：List dynamic dependencies</p><p>insmod：Install module</p><p>rmmod：Remove module</p><p>lsmod：List module</p><p>文件结尾的”rc”（如.bashrc、.xinitrc 等）：Resource configuration</p><p>Knnxxx / Snnxxx（位于 rcx.d 目录下）：K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）</p><p>.a（扩展名 a）：Archive，static library</p><p>.so（扩展名 so）：Shared object，dynamically linked library</p><p>.o（扩展名 o）：Object file，complied result of C/C++ source file</p><p>RPM：Red hat package manager</p><p>dpkg：Debian package manager</p><p>apt：Advanced package tool（Debian 或基于 Debian 的发行版中提供）</p><p>bin = BINaries</p><p>/dev = DEVices</p><p>/etc = ETCetera</p><p>/lib = LIBrary</p><p>/proc = PROCesses</p><p>/sbin = Superuser BINaries</p><p>/tmp = TeMPorary</p><p>/usr = Unix Shared Resources</p><p>/var = VARiable ?</p><p>FIFO = First In, First Out</p><p>GRUB = GRand Unified Bootloader</p><p>IFS = Internal Field Seperators</p><p>LILO = LInux LOader</p><p>MySQL = My 是最初作者女儿的名字，SQL = Structured Query Language</p><p>PHP = Personal Home Page Tools = PHP Hypertext Preprocessor</p><p>PS = Prompt String</p><p>Perl = “Pratical Extraction and Report Language” = “Pathologically Eclectic Rubbish Lister”</p><p>Python 得名于电视剧 Monty Python’s Flying Circus</p><p>Tcl = Tool Command Language</p><p>Tk = ToolKit</p><p>VT = Video Terminal</p><p>YaST = Yet Another Setup Tool</p><p>apache = “a patchy” server</p><p>apt = Advanced Packaging Tool</p><p>ar = archiver</p><p>as = assembler</p><p>awk = “Aho Weiberger and Kernighan” 三个作者的姓的第一个字母</p><p>bash = Bourne Again SHell</p><p>bc = Basic (Better) Calculator</p><p>bg = BackGround</p><p>biff = 作者 Heidi Stettner 在 U.C.Berkely 养的一条狗,喜欢对邮递员汪汪叫。</p><p>cal = CALendar</p><p>cat = CATenate</p><p>cd = Change Directory</p><p>chgrp = CHange GRouP</p><p>chmod = CHange MODe</p><p>chown = CHange OWNer</p><p>chsh = CHange SHell</p><p>cmp = compare</p><p>cobra = Common Object Request Broker Architecture</p><p>comm = common</p><p>cp = CoPy</p><p>cpio = CoPy In and Out</p><p>cpp = C Pre Processor</p><p>cron = Chronos 希腊文时间</p><p>cups = Common Unix Printing System</p><p>cvs = Current Version System</p><p>daemon = Disk And Execution MONitor</p><p>dc = Desk Calculator</p><p>dd = Disk Dump</p><p>df = Disk Free</p><p>diff = DIFFerence</p><p>dmesg = diagnostic message</p><p>du = Disk Usage</p><p>ed = editor</p><p>egrep = Extended GREP</p><p>elf = Extensible Linking Format</p><p>elm = ELectronic Mail</p><p>emacs = Editor MACroS</p><p>eval = EVALuate</p><p>ex = EXtended</p><p>exec = EXECute</p><p>fd = file descriptors</p><p>fg = ForeGround</p><p>fgrep = Fixed GREP</p><p>fmt = format</p><p>fsck = File System ChecK</p><p>fstab = FileSystem TABle</p><p>fvwm = F*** Virtual Window Manager</p><p>gawk = GNU AWK</p><p>gpg = GNU Privacy Guard</p><p>groff = GNU troff</p><p>hal = Hardware Abstraction Layer</p><p>joe = Joe’s Own Editor</p><p>ksh = Korn SHell</p><p>lame = Lame Ain’t an MP3 Encoder</p><p>lex = LEXical analyser</p><p>lisp = LISt Processing = Lots of Irritating Superfluous Parentheses</p><p>ln = LiNk</p><p>lpr = Line PRint</p><p>ls = list</p><p>lsof = LiSt Open Files</p><p>m4 = Macro processor Version 4</p><p>man = MANual pages</p><p>mawk = Mike Brennan’s AWK</p><p>mc = Midnight Commander</p><p>mkfs = MaKe FileSystem</p><p>mknod = MaKe NODe</p><p>motd = Message of The Day</p><p>mozilla = MOsaic GodZILLa</p><p>mtab = Mount TABle</p><p>mv = MoVe</p><p>nano = Nano’s ANOther editor</p><p>nawk = New AWK</p><p>nl = Number of Lines</p><p>nm = names</p><p>nohup = No HangUP</p><p>nroff = New ROFF</p><p>od = Octal Dump</p><p>passwd = PASSWorD</p><p>pg = pager</p><p>pico = PIne’s message COmposition editor</p><p>pine = “Program for Internet News &amp; Email” = “Pine is not Elm”</p><p>ping = 拟声又 = Packet InterNet Grouper</p><p>pirntcap = PRINTer CAPability</p><p>popd = POP Directory</p><p>pr = pre</p><p>printf = PRINT Formatted</p><p>ps = Processes Status</p><p>pty = pseudo tty</p><p>pushd = PUSH Directory</p><p>pwd = Print Working Directory</p><p>rc = runcom = run command, rc 还是 plan9的 shell</p><p>rev = REVerse</p><p>rm = ReMove</p><p>rn = Read News</p><p>roff = RunOFF</p><p>rpm = RPM Package Manager = RedHat Package Manager</p><p>rsh, rlogin, rvim 中的 r = Remote</p><p>rxvt = ouR XVT</p><p>seamoneky = 我</p><p>sed = Stream EDitor</p><p>seq = SEQuence</p><p>shar = SHell ARchive</p><p>slrn = S-Lang rn</p><p>ssh = Secure SHell</p><p>ssl = Secure Sockets Layer</p><p>stty = Set TTY</p><p>su = Substitute User</p><p>svn = SubVersioN</p><p>tar = Tape ARchive</p><p>tcsh = TENEX C shell</p><p>tee = T (T 形水管接口)</p><p>telnet = TEminaL over Network</p><p>termcap = terminal capability</p><p>terminfo = terminal information</p><p>tex = τ</p></blockquote>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="linux" scheme="http://wvdon.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/"/>
    <id>http://wvdon.com/2019/10/18/linux/2019-10-18-Linux/</id>
    <published>2019-10-18T07:50:39.000Z</published>
    <updated>2020-03-22T11:13:25.478Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://web.wvdon.com/md/1571398826282.jpeg" alt></p><blockquote><p>unnatural 石原里美 入坑了她的美</p></blockquote><h2 id="Linux基本知识"><a href="#Linux基本知识" class="headerlink" title="Linux基本知识"></a>Linux基本知识</h2><h5 id="查询命令-man"><a href="#查询命令-man" class="headerlink" title="查询命令 man"></a>查询命令 man</h5><p>linux的命令和参数太多，而且容易记错，我们可以通过man [命令] 来查看如何命令的使用文档</p><h2 id="Linux的文件权限和目录配置"><a href="#Linux的文件权限和目录配置" class="headerlink" title="Linux的文件权限和目录配置"></a>Linux的文件权限和目录配置</h2><a id="more"></a><h5 id="用户组与用户"><a href="#用户组与用户" class="headerlink" title="用户组与用户"></a>用户组与用户</h5><p><img src="http://web.wvdon.com/md/1571385663320.png" alt="1571385663320"></p><p>其中 老王家就代表一个用户组 ，单个人代表为用户。</p><blockquote><ul><li>linux的用户是记录在<br>/etc/passwd</li><li>密码记录在<br>/etc/shadow</li><li>所有的组记录在<br>/etc/group</li></ul></blockquote><h6 id="添加新用户-："><a href="#添加新用户-：" class="headerlink" title="添加新用户 ："></a>添加新用户 ：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser wvdon </span><br><span class="line"><span class="meta">#</span>修改所添加用户的密码</span><br><span class="line">passwd wvdon</span><br></pre></td></tr></table></figure><h5 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h5><p>文件的权限被分为 可读(read) 可写(write) 可执行（execute） 简称为 r w x</p><p>用数字表示 r:4 w:2 x:1</p><p>文件显示的权限</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>  -rw-rw-r-- 1 wuweidong061 wvdon    0 Oct 18 23:08 testfile.txt</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>①第一个符合 为 d 或者 - 分别代表 文件夹或者文件<br>②2-4符号代表所属用户的权限 rw- 即可读可写（4+2+0）<br>③5-7符号代表所属用户组的权限 rw- 即可读可写（4+2+0）<br>④8-10符号代表其他用户的权限为r–仅读(4)<br>⑤代表连接数<br>⑥代表 文件所有者 wuweidong061<br>⑦代表 文件所属用户组 wvdon<br>⑧时间代表文件最后修改的时间<br>⑨文件名</p></blockquote></blockquote><h5 id="修改文件用户与权限的三个命令"><a href="#修改文件用户与权限的三个命令" class="headerlink" title="修改文件用户与权限的三个命令"></a>修改文件用户与权限的三个命令</h5><h6 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>chgrp=change group</span><br><span class="line"><span class="meta">#</span>修改用户组</span><br><span class="line">-R 递归更改(连着文件夹下的目录和文件都进行更改)</span><br><span class="line">chgrp user filename</span><br></pre></td></tr></table></figure><h6 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>chown=change owner</span><br><span class="line"><span class="meta">#</span>修改文件所属者</span><br><span class="line">chown [-R] 账户名称 文件或目录</span><br></pre></td></tr></table></figure><h6 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>chmod = chmod mode</span><br><span class="line"><span class="meta">#</span>更改文件的权限</span><br><span class="line"><span class="meta">#</span>一个文件共有三种权限分别是w r x，同时一个文件也对三种用户组状态设置权限 所有者用户② 用户组③ 其他用户④</span><br><span class="line"><span class="meta">#</span>更改权限的方法有三种，</span><br><span class="line"><span class="meta">#</span>1 利用对应的数值</span><br><span class="line">chmod 777 filename</span><br><span class="line"><span class="meta">#</span>2 利用对应的身份状态设置</span><br><span class="line"><span class="meta">#</span> a u g o代表 all[所有用户] user[文件所有者] group[用户所有组] other[其他用户] </span><br><span class="line"><span class="meta">#</span>设置类型可以为 + - =</span><br><span class="line">chmod u=rwx,g=rx,o=x filename</span><br><span class="line"><span class="meta">#</span>增加或者减少文件的权限 可以通过 </span><br><span class="line"><span class="meta">#</span>chmod [用户类型][设置类型 + -][权限w r x] filename</span><br><span class="line"><span class="meta">#</span>例如添加w或者减去x</span><br><span class="line">chmod a+w filename</span><br><span class="line">chmod a-x filename</span><br></pre></td></tr></table></figure><h5 id="对文件与目录的常见操作"><a href="#对文件与目录的常见操作" class="headerlink" title="对文件与目录的常见操作"></a>对文件与目录的常见操作</h5><h3 id="1-ls"><a href="#1-ls" class="headerlink" title="1. ls"></a>1. ls</h3><p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ls [-aAdfFhilnrRSt] file|dir</span><br><span class="line">-a ：列出全部的文件</span><br><span class="line">-d ：仅列出目录本身</span><br><span class="line">-l ：以长数据串行列出，包含文件的属性与权限等等数据</span><br></pre></td></tr></table></figure><h3 id="2-cd"><a href="#2-cd" class="headerlink" title="2. cd"></a>2. cd</h3><p>更换当前目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><h3 id="3-mkdir"><a href="#3-mkdir" class="headerlink" title="3. mkdir"></a>3. mkdir</h3><p>创建目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir [-mp] 目录名称</span><br><span class="line">-m ：配置目录权限</span><br><span class="line">-p ：递归创建目录</span><br></pre></td></tr></table></figure><h3 id="4-rmdir"><a href="#4-rmdir" class="headerlink" title="4. rmdir"></a>4. rmdir</h3><p>删除目录，目录必须为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br><span class="line">-p ：递归删除目录</span><br></pre></td></tr></table></figure><h3 id="5-touch"><a href="#5-touch" class="headerlink" title="5. touch"></a>5. touch</h3><p>更新文件时间或者建立新文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># touch [-acdmt] filename</span><br><span class="line">-a ： 更新 atime</span><br><span class="line">-c ： 更新 ctime，若该文件不存在则不建立新文件</span><br><span class="line">-m ： 更新 mtime</span><br><span class="line">-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=&quot;日期或时间&quot;</span><br><span class="line">-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure><h3 id="6-cp"><a href="#6-cp" class="headerlink" title="6. cp"></a>6. cp</h3><p>复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp [-adfilprsu] source destination</span><br><span class="line">-a ：相当于 -dr --preserve=all</span><br><span class="line">-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身</span><br><span class="line">-i ：若目标文件已经存在时，在覆盖前会先询问</span><br><span class="line">-p ：连同文件的属性一起复制过去</span><br><span class="line">-r ：递归复制</span><br><span class="line">-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制</span><br><span class="line">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了</span><br></pre></td></tr></table></figure><h3 id="7-rm"><a href="#7-rm" class="headerlink" title="7. rm"></a>7. rm</h3><p>删除文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># rm [-fir] 文件或目录</span><br><span class="line">-r ：递归删除</span><br></pre></td></tr></table></figure><h3 id="8-mv"><a href="#8-mv" class="headerlink" title="8. mv"></a>8. mv</h3><p>移动文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mv [-fiu] source destination</span><br><span class="line"># mv [options] source1 source2 source3 .... directory</span><br><span class="line">-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br></pre></td></tr></table></figure><h2 id="附表"><a href="#附表" class="headerlink" title="附表"></a>附表</h2><h3 id="命令缩写一览表"><a href="#命令缩写一览表" class="headerlink" title="命令缩写一览表"></a>命令缩写一览表</h3><p><a href="../linux/2019-10-17-Linux命令缩写一览表/">链接</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>鸟哥的linux私房菜 第三版 </p><p><a href="https://cyc2018.github.io/CS-Notes/#/notes/Linux" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes/#/notes/Linux</a></p><p><a href="https://blog.csdn.net/sinat_29742125/article/details/52818115" target="_blank" rel="noopener">命令缩写</a></p>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="linux" scheme="http://wvdon.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>字符串匹配:KMP</title>
    <link href="http://wvdon.com/2019/10/16/arithmetic/2019-10-16-JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95KMP/"/>
    <id>http://wvdon.com/2019/10/16/arithmetic/2019-10-16-JAVA数据结构与算法KMP/</id>
    <published>2019-10-16T09:50:39.000Z</published>
    <updated>2020-03-22T11:13:25.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>​    KMP算法是一种改进的<a href="https://baike.baidu.com/item/字符串匹配" target="_blank" rel="noopener">字符串匹配</a>算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为<a href="https://baike.baidu.com/item/克努特" target="_blank" rel="noopener">克努特</a>—<a href="https://baike.baidu.com/item/莫里斯" target="_blank" rel="noopener">莫里斯</a>—<a href="https://baike.baidu.com/item/普拉特" target="_blank" rel="noopener">普拉特</a>操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的<a href="https://baike.baidu.com/item/时间复杂度" target="_blank" rel="noopener">时间复杂度</a>O(m+n)。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    字符串的匹配是对字符串的基本操作，最直接的方式是进行全遍历搜索的回溯法，但是其复杂度较高，而随着人们对于匹配效率的追求与匹配优化，其匹配的复杂度逐渐降低。<br>​    在这个过程中最重要的当属于KMP了，他将原有的算法复杂度降低到了O(n+m) 其中n,m是指两个字符串的长度。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="最直接的回溯法"><a href="#最直接的回溯法" class="headerlink" title="最直接的回溯法"></a>最直接的回溯法</h3><p>​    从字符串左边开始匹配，如果遇到相同的sc与j同事进行+1，直到全部遍历完p的时候进行返回下标，如果匹配过程有不一样的sc进行回溯到i。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Match_kmp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(indexOf(<span class="string">"aaavbvdd"</span>,<span class="string">"vbv"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String s,String p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sc = i;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (sc&lt;s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(sc)==p.charAt(j))&#123;</span><br><span class="line">                j++;</span><br><span class="line">                sc++;</span><br><span class="line">                <span class="keyword">if</span>(j==p.length())&#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                sc=i;</span><br><span class="line">                j=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其结果是返回第一个匹配的下标i</p><ul><li>这种求解的方法复杂度达到O(n*m)，下面介绍KMP算法.</li></ul><h3 id="KMP匹配"><a href="#KMP匹配" class="headerlink" title="KMP匹配"></a>KMP匹配</h3><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p> <img src="http://web.wvdon.com/arithmetic/1571297220130.png" alt="1571297220130"></p><p>①从左到右进行匹配,此时 i =0,j=0;如果相同 j++,i++，如果不相同 j进行回溯</p><p>②匹配到最后一个不相同的时候进行回溯，如果暴力进行匹配的时候 i ++，令j=0;<br>但是我们可以借助之前已经比较的字符串T，进行回溯。这样比较的时候就会减少复杂度。j回溯的大小取决于匹配字符串T的next[数组]。Next数组的求解放到下面说.next={0,0,0,0,2,2}<br>$$<br>右移的大小=以经匹配的字符串-next[j]<br>$$<br>所以next[5]=2，右移的大小=5-2，此时j也进行回溯，<br>$$<br>j = next[j-1]<br>$$<br>③以此类推，此时j=2;进行比较 ，不相同，进行回溯 j = 2-next[j-1]=2……..</p><h4 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchKMP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ne[] =getNext(<span class="string">"abcdabd"</span>);</span><br><span class="line">        <span class="keyword">int</span> res = kmp(<span class="string">"ssdfgasdbababa"</span>,<span class="string">"bababa"</span>,ne);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String s,String t,<span class="keyword">int</span>[] next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s.charAt(i)!=t.charAt(j))&#123;</span><br><span class="line">                j=next[j-<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">if</span>(s.charAt(i)==t.charAt(j))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==t.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNext(String t)&#123;</span><br><span class="line">        <span class="keyword">int</span> next[]=<span class="keyword">new</span> <span class="keyword">int</span>[t.length()];</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j=<span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;t.charAt(j)!=t.charAt(i))</span><br><span class="line">                j=next[j-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(t.charAt(i)==t.charAt(j))</span><br><span class="line">                j++;</span><br><span class="line">            next[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求解-next数组"><a href="#求解-next数组" class="headerlink" title="求解 next数组"></a>求解 next数组</h4><ul><li>前缀是除了最后一个字符的集合</li><li>后缀是除了第一个字符的集合<br>a b c a b d的前缀和后缀计算方法<br>a 一个字符的前后缀都为0<br>a b的前缀是 [ a ]  后缀是[ b ] 相同为 0<br>a b c 的前缀是 [a ,a b] 后缀是 [b c,c] 相同为0<br>a b c a 的前缀为 [a,ab,abc] 后缀是[b c a,c a,a] 0<br>a b c a b 的前缀为 [a ,ab,abc,abca]后缀是 [bcab,cab,ab,b] 最大相同为ab  next[4]=2<br>a b c a b d 的前缀为 [a,ab,abc,abcb,abcabd]<br>后缀为 [bcabd,cabd,abd,bd,d]最大共有长度还是ab 故 next[5] = 2;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private static int[] getNext(String t)&#123;</span><br><span class="line">      int next[]=new int[t.length()];</span><br><span class="line">      next[0]=0;</span><br><span class="line">      for (int i = 1,j=0; i &lt; t.length(); i++) &#123;</span><br><span class="line">          while (j&gt;0&amp;&amp;t.charAt(j)!=t.charAt(i))</span><br><span class="line">              j=next[j-1];</span><br><span class="line">          if(t.charAt(i)==t.charAt(j))</span><br><span class="line">              j++;</span><br><span class="line">          next[i]=j;</span><br><span class="line">      &#125;</span><br><span class="line">      return next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>学习KMP算法花了我不少的时间，当时看了一直没有特别理解。后来经过自己画图，瞬间明白了；凡事还是要多动手。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>百度百科 <a href="[https://baike.baidu.com/item/KMP%E7%AE%97%E6%B3%95/10951804](https://baike.baidu.com/item/KMP算法/10951804)">KMP算法</a></p><p>阮一峰的博客 <a href="http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html" target="_blank" rel="noopener">字符串匹配的KMP算法</a></p>]]></content>
    
    <summary type="html">
    
      JAVA数据结构与算法：字符串匹配之KMP
    
    </summary>
    
      <category term="JAVA数据结构与算法" scheme="http://wvdon.com/categories/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wvdon.com/tags/java/"/>
    
      <category term="数据结构" scheme="http://wvdon.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="KMP" scheme="http://wvdon.com/tags/KMP/"/>
    
      <category term="字符串匹配" scheme="http://wvdon.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Java数据结构与算法</title>
    <link href="http://wvdon.com/2019/10/16/arithmetic/arithmetic/"/>
    <id>http://wvdon.com/2019/10/16/arithmetic/arithmetic/</id>
    <published>2019-10-16T09:50:39.000Z</published>
    <updated>2020-03-22T11:13:25.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><p>1.<a href="#first-say">前言</a></p><p>3.<a href="#3">输入输出与基本函数</a></p><p>4.<a href="#usually_function">常用函数</a></p><p>5.<a href="http://wvdon.com/2019/08/02/arithmetic/JAVA_Alg_Math/">数学问题</a></p><p>7.<a href="#sort">排序</a></p><p>8.<a href="#zhan">栈，队列，链表</a></p><p>9.<a href="#search">搜索</a></p><p>10.<a href="#tree">树</a></p><p>11.<a href="#map">图</a></p><p>12.<a href="#drop">动态规划</a></p><p>13.<a href="#English">英文篇</a></p><p>14.<a href="#summary">总结</a></p><p>15.<a href>板子</a></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.  前言"></a><span id="first-say">1.  前言</span></h2><blockquote><p>本文主要以总结自己学习算法的笔记摘要，目的是想记录下自己学习的点点滴滴。</p><p>希望能够与大家进行交流，共同提高，如果有什么问题，欢迎大家提出issue</p><p>参考资料：《算法笔记》 ，《啊哈！算法》，《算法 第四版》，《java 编程思想》，《数学之美》。</p></blockquote><a id="more"></a><h5 id="如何去学习"><a href="#如何去学习" class="headerlink" title="如何去学习"></a>如何去学习</h5><blockquote><p>在学习过程中我一直在想，如果我是一个小孩子，你要怎么样才能对我讲明白这些知识点，</p><p>我不停的反问自己  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 它是什么？</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 它有什么用？</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 如何实现它？</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 还有没有其他的方法呢？</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>人只有在不停的去审视自己的想法的时候才能走的更快，走的更稳。</p></blockquote>]]></content>
    
    <summary type="html">
    
      JAVA数据结构与算法
    
    </summary>
    
      <category term="JAVA数据结构与算法" scheme="http://wvdon.com/categories/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wvdon.com/tags/java/"/>
    
      <category term="数据结构" scheme="http://wvdon.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo:使用记录</title>
    <link href="http://wvdon.com/2019/09/27/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://wvdon.com/2019/09/27/Hexo的使用笔记/</id>
    <published>2019-09-27T15:42:57.000Z</published>
    <updated>2020-03-22T11:13:25.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>快速、简洁且高效的博客框架。一键部署博客到Github Pages，并原生态支持Markdown。</p></blockquote><p>文件头</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; ---</span><br><span class="line">&gt; title: &apos;题目&apos;</span><br><span class="line">&gt; date: 2019-08-02 15:50:39</span><br><span class="line">&gt; tags: </span><br><span class="line">&gt;   - 1</span><br><span class="line">&gt;   - 2</span><br><span class="line">&gt;   - 3</span><br><span class="line">&gt; categories: [分类]</span><br><span class="line">&gt; mathjax: true</span><br><span class="line">&gt; description: 描述</span><br><span class="line">&gt; ---</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><a id="more"></a><blockquote></blockquote><p>备忘：</p><blockquote><p>hexo s 部署到本地</p><p>hexo g 生成静态文件</p><p>hexo d 部署到github上</p></blockquote>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="hexo" scheme="http://wvdon.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop 记录</title>
    <link href="http://wvdon.com/2019/09/27/2019-09-27-%E9%A2%98%E7%9B%AE/"/>
    <id>http://wvdon.com/2019/09/27/2019-09-27-题目/</id>
    <published>2019-09-27T07:50:39.000Z</published>
    <updated>2020-03-22T11:13:25.460Z</updated>
    
    <content type="html"><![CDATA[<h4 id="快捷键记录"><a href="#快捷键记录" class="headerlink" title="快捷键记录"></a>快捷键记录</h4><ul><li><p>抓手工具 可以使用 space+鼠标快速操作</p></li><li><p>ctrl+o 快速打开文件</p></li><li><p>ctrl+w 关闭文件</p></li><li><p>文件–置入嵌入对象   是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层</p></li><li><p>ctrl+n 新建</p></li><li><p>ctrl+Shift+alt +t 重复自由变换</p></li></ul><a id="more"></a><p>#### </p>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="ps" scheme="http://wvdon.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop 记录</title>
    <link href="http://wvdon.com/2019/09/27/Photoshop%20%E8%AE%B0%E5%BD%95/"/>
    <id>http://wvdon.com/2019/09/27/Photoshop 记录/</id>
    <published>2019-09-27T07:50:39.000Z</published>
    <updated>2020-03-22T11:13:25.465Z</updated>
    
    <content type="html"><![CDATA[<h4 id="快捷键记录"><a href="#快捷键记录" class="headerlink" title="快捷键记录"></a>快捷键记录</h4><ul><li>抓手工具 可以使用 space+鼠标快速操作</li><li>ctrl+o 快速打开文件</li><li>ctrl+w 关闭文件</li><li>文件–置入嵌入对象 是直接把文件作为一个对象导入这个图中，如需要编辑的话需要格式化这个图层</li><li>ctrl+n 新建</li><li>ctrl+Shift+alt +t 重复自由变换</li></ul>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="ps" scheme="http://wvdon.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘：Python使用随机森林预测泰坦尼克号生存</title>
    <link href="http://wvdon.com/2019/09/09/machineLearning/titanc/"/>
    <id>http://wvdon.com/2019/09/09/machineLearning/titanc/</id>
    <published>2019-09-09T04:20:00.000Z</published>
    <updated>2020-03-22T11:13:25.481Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><ul><li>Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况</li></ul><p>数据来源kaggle</p><h2 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1 数据预处理"></a>1 数据预处理</h2><h3 id="1-1-读入数据"><a href="#1-1-读入数据" class="headerlink" title="1.1 读入数据"></a>1.1 读入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data_train = pd.read_csv(<span class="string">r'train.csv'</span>)</span><br><span class="line">data_test = pd.read_csv(<span class="string">r'test.csv'</span>)</span><br><span class="line">data_train.head()</span><br></pre></td></tr></table></figure><a id="more"></a><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><h3 id="1-2-训练集与数据集"><a href="#1-2-训练集与数据集" class="headerlink" title="1.2 训练集与数据集"></a>1.2 训练集与数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_test.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>3</td>      <td>Kelly, Mr. James</td>      <td>male</td>      <td>34.5</td>      <td>0</td>      <td>0</td>      <td>330911</td>      <td>7.8292</td>      <td>NaN</td>      <td>Q</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>3</td>      <td>Wilkes, Mrs. James (Ellen Needs)</td>      <td>female</td>      <td>47.0</td>      <td>1</td>      <td>0</td>      <td>363272</td>      <td>7.0000</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>2</td>      <td>Myles, Mr. Thomas Francis</td>      <td>male</td>      <td>62.0</td>      <td>0</td>      <td>0</td>      <td>240276</td>      <td>9.6875</td>      <td>NaN</td>      <td>Q</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>3</td>      <td>Wirz, Mr. Albert</td>      <td>male</td>      <td>27.0</td>      <td>0</td>      <td>0</td>      <td>315154</td>      <td>8.6625</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>3</td>      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>      <td>female</td>      <td>22.0</td>      <td>1</td>      <td>1</td>      <td>3101298</td>      <td>12.2875</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><h3 id="1-2-1-查看数据完整性"><a href="#1-2-1-查看数据完整性" class="headerlink" title="1.2.1 查看数据完整性"></a>1.2.1 查看数据完整性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_train.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns):PassengerId    891 non-null int64Survived       891 non-null int64Pclass         891 non-null int64Name           891 non-null objectSex            891 non-null objectAge            714 non-null float64SibSp          891 non-null int64Parch          891 non-null int64Ticket         891 non-null objectFare           891 non-null float64Cabin          204 non-null objectEmbarked       889 non-null objectdtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><p>总共有891组数据，其中age是714条，Cabin是204条，共计12个变量</p><blockquote><p>乘客ID，存活情况，船票级别，乘客姓名，性别，年龄，船上的兄弟姐妹以及配偶的人数，船上的父母以及子女的人数，船票编号，船票费用，所在船舱，登船的港口</p></blockquote><h3 id="1-2-2-查看训练数据描述信息"><a href="#1-2-2-查看训练数据描述信息" class="headerlink" title="1.2.2 查看训练数据描述信息"></a>1.2.2 查看训练数据描述信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_train.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>    </tr>  </thead>  <tbody>    <tr>      <td>count</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>714.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <td>mean</td>      <td>446.000000</td>      <td>0.383838</td>      <td>2.308642</td>      <td>29.699118</td>      <td>0.523008</td>      <td>0.381594</td>      <td>32.204208</td>    </tr>    <tr>      <td>std</td>      <td>257.353842</td>      <td>0.486592</td>      <td>0.836071</td>      <td>14.526497</td>      <td>1.102743</td>      <td>0.806057</td>      <td>49.693429</td>    </tr>    <tr>      <td>min</td>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.420000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <td>25%</td>      <td>223.500000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>20.125000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>7.910400</td>    </tr>    <tr>      <td>50%</td>      <td>446.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>28.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>14.454200</td>    </tr>    <tr>      <td>75%</td>      <td>668.500000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>38.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>31.000000</td>    </tr>    <tr>      <td>max</td>      <td>891.000000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>80.000000</td>      <td>8.000000</td>      <td>6.000000</td>      <td>512.329200</td>    </tr>  </tbody></table></div><p>mean代表各项的均值，获救率为0.383838</p><h3 id="1-3-1-年龄数据简化分组"><a href="#1-3-1-年龄数据简化分组" class="headerlink" title="1.3.1  年龄数据简化分组"></a>1.3.1  年龄数据简化分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_ages</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="comment">#把缺失值补上，方便分组</span></span><br><span class="line">    df.Age = df.Age.fillna(<span class="number">-0.5</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment">#把Age分为不同区间,-1到0,1-5,6-12...,60以上,放到bins里，八个区间，对应的八个区间名称在group_names那</span></span><br><span class="line">    bins = (<span class="number">-1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">60</span>, <span class="number">120</span>)</span><br><span class="line">    group_names = [<span class="string">'Unknown'</span>, <span class="string">'Baby'</span>, <span class="string">'Child'</span>, <span class="string">'Teenager'</span>, <span class="string">'Student'</span>, <span class="string">'Young Adult'</span>, <span class="string">'Adult'</span>, <span class="string">'Senior'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开始对数据进行离散化，pandas.cut就是这个功能</span></span><br><span class="line">    catagories = pd.cut(df.Age,bins,labels=group_names)</span><br><span class="line">    df.Age = catagories</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>简化Cabin，就是取字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_cabin</span><span class="params">(df)</span>:</span></span><br><span class="line">    df.Cabin = df.Cabin.fillna(<span class="string">'N'</span>)</span><br><span class="line">    df.Cabin = df.Cabin.apply(<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>简化工资，也就是分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_fare</span><span class="params">(df)</span>:</span></span><br><span class="line">    df.Fare = df.Fare.fillna(<span class="number">-0.5</span>)</span><br><span class="line">    bins = (<span class="number">-1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">1000</span>)</span><br><span class="line">    group_names = [<span class="string">'Unknown'</span>, <span class="string">'1_quartile'</span>, <span class="string">'2_quartile'</span>, <span class="string">'3_quartile'</span>, <span class="string">'4_quartile'</span>]</span><br><span class="line">    catagories = pd.cut(df.Fare,bins,labels=group_names)</span><br><span class="line">    df.Fare = catagories</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>删除无用信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify_drop</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.drop([<span class="string">'Name'</span>,<span class="string">'Ticket'</span>,<span class="string">'Embarked'</span>],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>整合一遍，凑成新表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_features</span><span class="params">(df)</span>:</span></span><br><span class="line">    df = simplify_ages(df)</span><br><span class="line">    df = simplify_cabin(df)</span><br><span class="line">    df = simplify_fare(df)</span><br><span class="line">    df = simplify_drop(df)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>执行读取新表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#必须要再读取一遍原来的表，不然会报错,不仅训练集要简化，测试集也要，两者的特征名称要一致</span></span><br><span class="line">data_train = pd.read_csv(<span class="string">r'train.csv'</span>)</span><br><span class="line">data_train = transform_features(data_train)</span><br><span class="line">data_test = transform_features(data_test)</span><br><span class="line">data_train.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Cabin</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>Student</td>      <td>1</td>      <td>0</td>      <td>1_quartile</td>      <td>N</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>Adult</td>      <td>1</td>      <td>0</td>      <td>4_quartile</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>Young Adult</td>      <td>0</td>      <td>0</td>      <td>1_quartile</td>      <td>N</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>Young Adult</td>      <td>1</td>      <td>0</td>      <td>4_quartile</td>      <td>C</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>Young Adult</td>      <td>0</td>      <td>0</td>      <td>2_quartile</td>      <td>N</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#data_train=data_train.drop(["PassengerId","Cabin","Name"],axis=1)</span></span><br><span class="line">data_train.head(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>S</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>195</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>58.0</td>      <td>0</td>      <td>0</td>      <td>PC 17569</td>      <td>146.5208</td>      <td>C</td>    </tr>    <tr>      <td>196</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>NaN</td>      <td>0</td>      <td>0</td>      <td>368703</td>      <td>7.7500</td>      <td>Q</td>    </tr>    <tr>      <td>197</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>42.0</td>      <td>0</td>      <td>1</td>      <td>4579</td>      <td>8.4042</td>      <td>S</td>    </tr>    <tr>      <td>198</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>NaN</td>      <td>0</td>      <td>0</td>      <td>370370</td>      <td>7.7500</td>      <td>Q</td>    </tr>    <tr>      <td>199</td>      <td>0</td>      <td>2</td>      <td>female</td>      <td>24.0</td>      <td>0</td>      <td>0</td>      <td>248747</td>      <td>13.0000</td>      <td>S</td>    </tr>  </tbody></table><p>200 rows × 9 columns</p></div><p>选取我们需要的那几个列作为输入， 对于票价和姓名我就舍弃了，姓名没什么用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'PassengerId'</span>,<span class="string">'Survived'</span>,<span class="string">'Pclass'</span>,<span class="string">'Sex'</span>,<span class="string">'Age'</span>,<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>,<span class="string">'Fare'</span>,<span class="string">'Embarked'</span>]</span><br><span class="line">data_tr=data_train[cols].copy()</span><br><span class="line">data_tr.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'PassengerId'</span>,<span class="string">'Pclass'</span>,<span class="string">'Sex'</span>,<span class="string">'Age'</span>,<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>,<span class="string">'Fare'</span>,<span class="string">'Embarked'</span>]</span><br><span class="line">data_te=data_test[cols].copy()</span><br><span class="line">data_te.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>3</td>      <td>male</td>      <td>34.5</td>      <td>0</td>      <td>0</td>      <td>7.8292</td>      <td>Q</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>3</td>      <td>female</td>      <td>47.0</td>      <td>1</td>      <td>0</td>      <td>7.0000</td>      <td>S</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>2</td>      <td>male</td>      <td>62.0</td>      <td>0</td>      <td>0</td>      <td>9.6875</td>      <td>Q</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>3</td>      <td>male</td>      <td>27.0</td>      <td>0</td>      <td>0</td>      <td>8.6625</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>3</td>      <td>female</td>      <td>22.0</td>      <td>1</td>      <td>1</td>      <td>12.2875</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_tr.isnull().sum()</span><br><span class="line">data_te.isnull().sum()</span><br></pre></td></tr></table></figure><pre><code>PassengerId     0Pclass          0Sex             0Age            86SibSp           0Parch           0Fare            1Embarked        0dtype: int64</code></pre><p>填充数据，，，，，，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age_mean = data_tr[<span class="string">'Age'</span>].mean()</span><br><span class="line">data_tr[<span class="string">'Age'</span>] = data_tr[<span class="string">'Age'</span>].fillna(age_mean)</span><br><span class="line">data_tr[<span class="string">'Embarked'</span>] = data_tr[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br><span class="line">data_tr.isnull().sum()</span><br></pre></td></tr></table></figure><pre><code>PassengerId    0Survived       0Pclass         0Sex            0Age            0SibSp          0Parch          0Fare           0Embarked       0dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_tr.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>    </tr>  </tbody></table></div><p>用数组特征化编码年龄和S C Q等等，，因为随机森林的输入需要数值，字符不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import numpy as np</span></span><br><span class="line">age_mean = data_te[<span class="string">'Age'</span>].mean()</span><br><span class="line">data_te[<span class="string">'Age'</span>] = data_te[<span class="string">'Age'</span>].fillna(age_mean)</span><br><span class="line">age_mean = data_te[<span class="string">'Fare'</span>].mean()</span><br><span class="line">data_te[<span class="string">'Fare'</span>] = data_te[<span class="string">'Fare'</span>].fillna(age_mean)</span><br><span class="line"><span class="comment">#data_te.replace(np.na, 0, inplace=True)</span></span><br><span class="line"><span class="comment">#data_te.replace(np.inf, 0, inplace=True)</span></span><br><span class="line">data_te[<span class="string">'Sex'</span>]= data_te[<span class="string">'Sex'</span>].map(&#123;<span class="string">'female'</span>:<span class="number">0</span>, <span class="string">'male'</span>: <span class="number">1</span>&#125;).astype(int)</span><br><span class="line">data_te[<span class="string">'Embarked'</span>]= data_te[<span class="string">'Embarked'</span>].map(&#123;<span class="string">'S'</span>:<span class="number">0</span>, <span class="string">'C'</span>: <span class="number">1</span>,<span class="string">'Q'</span>:<span class="number">2</span>&#125;).astype(int)</span><br><span class="line">data_te.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>3</td>      <td>1</td>      <td>34.5</td>      <td>0</td>      <td>0</td>      <td>7.8292</td>      <td>2</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>3</td>      <td>0</td>      <td>47.0</td>      <td>1</td>      <td>0</td>      <td>7.0000</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>2</td>      <td>1</td>      <td>62.0</td>      <td>0</td>      <td>0</td>      <td>9.6875</td>      <td>2</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>3</td>      <td>1</td>      <td>27.0</td>      <td>0</td>      <td>0</td>      <td>8.6625</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>3</td>      <td>0</td>      <td>22.0</td>      <td>1</td>      <td>1</td>      <td>12.2875</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_tr[<span class="string">'Sex'</span>]= data_tr[<span class="string">'Sex'</span>].map(&#123;<span class="string">'female'</span>:<span class="number">0</span>, <span class="string">'male'</span>: <span class="number">1</span>&#125;).astype(int)</span><br><span class="line">data_tr[<span class="string">'Embarked'</span>]= data_tr[<span class="string">'Embarked'</span>].map(&#123;<span class="string">'S'</span>:<span class="number">0</span>, <span class="string">'C'</span>: <span class="number">1</span>,<span class="string">'Q'</span>:<span class="number">2</span>&#125;).astype(int)</span><br><span class="line">data_tr.head()</span><br><span class="line"><span class="comment">#data_tr = pd.get_dummies(data_tr=data_tr,columns=['Embarked'])</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>0</td>    </tr>  </tbody></table></div><h2 id="2-数据可视化"><a href="#2-数据可视化" class="headerlink" title="2 数据可视化"></a>2 数据可视化</h2><h3 id="2-1-年龄和生存率之间的关系"><a href="#2-1-年龄和生存率之间的关系" class="headerlink" title="2.1  年龄和生存率之间的关系"></a>2.1  年龄和生存率之间的关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">'Embarked'</span>,y=<span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data=data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5875e3c8&gt;</code></pre><p><img src="http://web.wvdon.com/md/output_35_1.png" alt="png"></p><ul><li>female的获救率大于 male,(应该是男士都比较绅士吧，即使面对死亡，也希望将最后的机会留给女生，，电影感悟）</li><li>获救率 C 男性女性都是最高，Q时男性最低，S 时 女性最低</li><li>男性的获救率低于女性的三分之一</li></ul><h3 id="2-2-所做的位置和生存率之间的关系"><a href="#2-2-所做的位置和生存率之间的关系" class="headerlink" title="2.2 所做的位置和生存率之间的关系"></a>2.2 所做的位置和生存率之间的关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pointplot(x=<span class="string">'Pclass'</span>,y=<span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data=data_train,palette=&#123;<span class="string">'male'</span>:<span class="string">'blue'</span>,<span class="string">'female'</span>:<span class="string">'pink'</span>&#125;,</span><br><span class="line">             marker=[<span class="string">'*'</span>,<span class="string">"o"</span>],linestyle=[<span class="string">'-'</span>,<span class="string">'--'</span>])</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee586f70b8&gt;</code></pre><p><img src="http://web.wvdon.com/md/output_38_1.png" alt="png"></p><ul><li>等级越高获救率越高</li><li>女性大于男性</li></ul><h3 id="2-3-生存率与年龄的关系"><a href="#2-3-生存率与年龄的关系" class="headerlink" title="2.3 生存率与年龄的关系"></a>2.3 生存率与年龄的关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x = <span class="string">'Age'</span>,y = <span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee587238d0&gt;</code></pre><p><img src="http://web.wvdon.com/md/output_41_1.png" alt="png"></p><ul><li>男性大于女性</li><li>student的生存率最低,bady的生存率最高</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x = <span class="string">'Cabin'</span>,y = <span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee585b0748&gt;</code></pre><p><img src="http://web.wvdon.com/md/output_43_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x = <span class="string">'Fare'</span>,y = <span class="string">'Survived'</span>,hue=<span class="string">'Sex'</span>,data = data_train)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee5852b390&gt;</code></pre><p><img src="http://web.wvdon.com/md/output_44_1.png" alt="png"></p><h2 id="3-建立模型"><a href="#3-建立模型" class="headerlink" title="3 建立模型"></a>3 建立模型</h2><h3 id="3-1-随机森林"><a href="#3-1-随机森林" class="headerlink" title="3.1 随机森林"></a>3.1 随机森林</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_all = data_tr.drop([<span class="string">'PassengerId'</span>,<span class="string">'Survived'</span>],axis=<span class="number">1</span>)<span class="comment">#主要是乘客ID也没啥用，删就删了吧</span></span><br><span class="line">y_all = data_tr[<span class="string">'Survived'</span>]</span><br><span class="line">p = <span class="number">0.2</span> <span class="comment">#用 百分之20作为测试集</span></span><br><span class="line"></span><br><span class="line">X_train,X_test, y_train, y_test = train_test_split(X_all,y_all,test_size=p, random_state=<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> make_scorer, accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择分类器的类型，我没试过其他的哦，因为在这个案例中，有人做过试验发现随机森林模型是最好的，所以选了它。呜呜，我下次试试其他的</span></span><br><span class="line">clf = RandomForestClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以通过定义树的各种参数，限制树的大小，防止出现过拟合现象哦，也可以通过剪枝来限制，但sklearn中的决策树分类器目前不支持剪枝</span></span><br><span class="line">parameters = &#123;<span class="string">'n_estimators'</span>: [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>], </span><br><span class="line">              <span class="string">'max_features'</span>: [<span class="string">'log2'</span>, <span class="string">'sqrt'</span>,<span class="string">'auto'</span>], </span><br><span class="line">              <span class="string">'criterion'</span>: [<span class="string">'entropy'</span>, <span class="string">'gini'</span>],        <span class="comment">#分类标准用熵，基尼系数</span></span><br><span class="line">              <span class="string">'max_depth'</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>], </span><br><span class="line">              <span class="string">'min_samples_split'</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">              <span class="string">'min_samples_leaf'</span>: [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是用于比较参数好坏的评分，使用'make_scorer'将'accuracy_score'转换为评分函数</span></span><br><span class="line">acc_scorer = make_scorer(accuracy_score)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动调参，GridSearchCV，它存在的意义就是自动调参，只要把参数输进去，就能给出最优化的结果和参数</span></span><br><span class="line"><span class="comment">#GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。</span></span><br><span class="line">grid_obj = GridSearchCV(clf,parameters,scoring=acc_scorer)</span><br><span class="line">grid_obj = grid_obj.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将clf设置为参数的最佳组合</span></span><br><span class="line">clf = grid_obj.best_estimator_</span><br><span class="line"></span><br><span class="line"><span class="comment">#将最佳算法运用于数据中</span></span><br><span class="line">clf.fit(X_train,y_train)</span><br></pre></td></tr></table></figure><pre><code>/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.  warnings.warn(CV_WARNING, FutureWarning)/home/wvdon/anaconda3/envs/weidong/lib/python3.7/site-packages/sklearn/model_selection/_search.py:814: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.  DeprecationWarning)RandomForestClassifier(bootstrap=True, class_weight=None, criterion=&apos;entropy&apos;,                       max_depth=5, max_features=&apos;sqrt&apos;, max_leaf_nodes=None,                       min_impurity_decrease=0.0, min_impurity_split=None,                       min_samples_leaf=1, min_samples_split=3,                       min_weight_fraction_leaf=0.0, n_estimators=4,                       n_jobs=None, oob_score=False, random_state=None,                       verbose=0, warm_start=False)</code></pre><h3 id="3-2-预测"><a href="#3-2-预测" class="headerlink" title="3.2 预测"></a>3.2 预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">predictions = clf.predict(X_test)</span><br><span class="line">print(accuracy_score(y_test,predictions))</span><br><span class="line">data_tr</span><br></pre></td></tr></table></figure><pre><code>0.8268156424581006</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>22.000000</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>38.000000</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>26.000000</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>35.000000</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>35.000000</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>886</td>      <td>887</td>      <td>0</td>      <td>2</td>      <td>1</td>      <td>27.000000</td>      <td>0</td>      <td>0</td>      <td>13.0000</td>      <td>0</td>    </tr>    <tr>      <td>887</td>      <td>888</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>19.000000</td>      <td>0</td>      <td>0</td>      <td>30.0000</td>      <td>0</td>    </tr>    <tr>      <td>888</td>      <td>889</td>      <td>0</td>      <td>3</td>      <td>0</td>      <td>29.699118</td>      <td>1</td>      <td>2</td>      <td>23.4500</td>      <td>0</td>    </tr>    <tr>      <td>889</td>      <td>890</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>26.000000</td>      <td>0</td>      <td>0</td>      <td>30.0000</td>      <td>1</td>    </tr>    <tr>      <td>890</td>      <td>891</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>32.000000</td>      <td>0</td>      <td>0</td>      <td>7.7500</td>      <td>2</td>    </tr>  </tbody></table><p>891 rows × 9 columns</p></div><h3 id="3-3-预测test文件"><a href="#3-3-预测test文件" class="headerlink" title="3.3 预测test文件"></a>3.3 预测test文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">predictions = clf.predict(data_te.drop(<span class="string">'PassengerId'</span>,axis=<span class="number">1</span>))</span><br><span class="line">output = pd.DataFrame(&#123;<span class="string">'Passengers'</span>:data_te[<span class="string">'PassengerId'</span>],<span class="string">'Survived'</span>:predictions&#125;)</span><br><span class="line">output.to_csv(<span class="string">r'test1.csv'</span>)</span><br><span class="line">output.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Passengers</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="3-4-提交到kaggle官网"><a href="#3-4-提交到kaggle官网" class="headerlink" title="3.4 提交到kaggle官网"></a>3.4 提交到kaggle官网</h3><p>结果是 0.77990<br>hhhhhhhh还是比较满意的<br>下次用深度学习试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Kaggle数据挖掘竞赛：使用随机森林预测泰坦尼克号生存情况&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;数据来源kaggle&lt;/p&gt;&lt;h2 id=&quot;1-数据预处理&quot;&gt;&lt;a href=&quot;#1-数据预处理&quot; class=&quot;headerlink&quot; title=&quot;1 数据预处理&quot;&gt;&lt;/a&gt;1 数据预处理&lt;/h2&gt;&lt;h3 id=&quot;1-1-读入数据&quot;&gt;&lt;a href=&quot;#1-1-读入数据&quot; class=&quot;headerlink&quot; title=&quot;1.1 读入数据&quot;&gt;&lt;/a&gt;1.1 读入数据&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_train = pd.read_csv(&lt;span class=&quot;string&quot;&gt;r&#39;train.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_test = pd.read_csv(&lt;span class=&quot;string&quot;&gt;r&#39;test.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_train.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="http://wvdon.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="随机森林" scheme="http://wvdon.com/tags/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
    
      <category term="kaggle" scheme="http://wvdon.com/tags/kaggle/"/>
    
      <category term="数据挖掘" scheme="http://wvdon.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Git:分布式版本控制</title>
    <link href="http://wvdon.com/2019/08/28/Git-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://wvdon.com/2019/08/28/Git-分布式版本控制/</id>
    <published>2019-08-28T15:42:57.000Z</published>
    <updated>2020-03-22T11:13:25.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><h4 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h4><blockquote><p>git是一种分布式版本控制系统</p></blockquote><h5 id="什么是版本控制系统："><a href="#什么是版本控制系统：" class="headerlink" title="什么是版本控制系统："></a>什么是版本控制系统：</h5><blockquote></blockquote><h5 id="什么是分布式-amp-集中式："><a href="#什么是分布式-amp-集中式：" class="headerlink" title="什么是分布式&amp;集中式："></a>什么是分布式&amp;集中式：</h5><blockquote><p> 优势：</p><p>SVN</p></blockquote><h5 id="Git的历史："><a href="#Git的历史：" class="headerlink" title="Git的历史："></a>Git的历史：</h5><blockquote><p> 2002年大神Linus 为了管理Linux源码，花了两个星期使用c语言编写的。</p></blockquote><a id="more"></a><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><p>windows上在<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网</a>下载安装即可<br>命令行验证一下 git 是否安装完成。</p><p>ubuntu 上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h3><h4 id="1、建立与连接远程仓库"><a href="#1、建立与连接远程仓库" class="headerlink" title="1、建立与连接远程仓库"></a>1、建立与连接远程仓库</h4><p>建立git仓库</p><figure class="highlight plain"><figcaption><span>init```  </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">添加项目中的文件  </span><br><span class="line"></span><br><span class="line">```git add *```  </span><br><span class="line"></span><br><span class="line">提交到仓库</span><br><span class="line"></span><br><span class="line">```git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure><p>与远程仓库建立关联  </p><figure class="highlight plain"><figcaption><span>remote add origin</span><a href="https://github.com/wvdon/learn_tools.git```" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">上传之前pull一下</span><br><span class="line"></span><br><span class="line">```git pull origin master```  </span><br><span class="line"></span><br><span class="line">上传到GitHub远程仓库（master分支）</span><br><span class="line"></span><br><span class="line">```git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="2、git基本操作"><a href="#2、git基本操作" class="headerlink" title="2、git基本操作"></a>2、git基本操作</h4><p>查看仓库状态</p><p><code>git status</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰git教程</a></p><p>精通Git（第2版）</p><p><img src="C:%5CUsers%5Cwvdon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567175758887.png" alt="1567175758887"></p>]]></content>
    
    <summary type="html">
    
      生产力工具
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="git" scheme="http://wvdon.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JAVA数据结构与算法:数学问题</title>
    <link href="http://wvdon.com/2019/08/02/arithmetic/JAVA_Alg_Math/"/>
    <id>http://wvdon.com/2019/08/02/arithmetic/JAVA_Alg_Math/</id>
    <published>2019-08-02T07:50:39.000Z</published>
    <updated>2020-03-22T11:13:25.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数学问题"><a href="#数学问题" class="headerlink" title="数学问题"></a><span id="math">数学问题</span></h2><p>写在前面</p><p>自然数：非负整数，0,1,2,3,4……</p><p>合数：存在a(1&lt;a&lt;n),使得n % a ==0,称n为合数</p><p>素数(质数）：对于任意a(1&lt;a&lt;n),都有n % a !=0,称n为素数。</p><a id="more"></a><p>​    质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。</p><p>约数与倍数：</p><p>整数a能够被整数b整除，那么a就是b的倍数，b就是a的约数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">b/a==<span class="number">0</span>约数又称为因数</span><br></pre></td></tr></table></figure><h3 id="5-1-最大公约数和最小公倍数"><a href="#5-1-最大公约数和最小公倍数" class="headerlink" title="5.1 最大公约数和最小公倍数"></a>5.1 最大公约数和最小公倍数</h3><h4 id="5-1-1-最大公约数"><a href="#5-1-1-最大公约数" class="headerlink" title="5.1.1 最大公约数"></a>5.1.1 最大公约数</h4><p>Q1:什么是最大公约数</p><blockquote><p>最大公约数，又称最大公因数，指两个整数相同的最大约数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">12</span>,b=<span class="number">8</span>;</span><br><span class="line">gcd(<span class="number">12</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//gcd(12,8)=4</span></span><br></pre></td></tr></table></figure><p>Q2:有什么用呢？</p><blockquote><p>欧几里德算法可用于RSA加密等领域。</p></blockquote><p>Q3:如何去求最大公约数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"> <span class="comment">// a&gt;=b</span></span><br><span class="line"> swap(a，b);</span><br><span class="line"> <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> a;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> temp;</span><br><span class="line"> <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">     a=temp;</span><br><span class="line">     a=b;</span><br><span class="line">     b=temp;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>证明：</p><blockquote><p>既证明 gcd(a,b) = gcd(b,a mod b) 的过程</p><p>其计算原理依赖于下面的定理：<br><em>定理：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。最大公约数（Greatest Common Divisor）缩写为GCD。<br>gcd(a,b) = gcd(b,a mod b) (不妨设a&gt;b 且r=a mod b ,r不为0)</em></p><p>a可以表示成a = kb + r（a，b，k，r皆为正整数，且r&lt;b），则r = a % b<br>假设d是a,b的一个公约数，<br>而r = a - kb，两边同时除以d，</p><p> $$ \frac{r}{d}=\frac{a}{d}-\frac{kb}{d}=m $$</p><p>由等式右边可知m为整数，因此d是r的约数<br>因此d也是b,a % b的公约数<br>进而d|a.因此d也是a,b的公约数，由于d的任意性，得a和b的公约数都是a%b的公约数<br>由a = kb + r,同理可证 b 和 a % b的公约数都是 a和b的公约数。<br>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，<br>得证。</p></blockquote></blockquote><p>Q4:还有其他方法吗？</p><blockquote><p>目前求 最大公约数有 质因数分解法、短除法、辗转相除法、更相减损法</p><p>其中最常用的为辗转相除法（又名欧几里得算法）</p><p>有精力的话可以了解一下扩展欧几里得算法</p></blockquote><h4 id="5-1-2-最小公倍数"><a href="#5-1-2-最小公倍数" class="headerlink" title="5.1.2 最小公倍数"></a>5.1.2 最小公倍数</h4><p>最小公倍数建立在最大公约数的基础上，即除了a,b的最大公约数外a与b的成绩除以最大公约数，<br>表示为  lcm(a,b)<br>$$<br>最小公倍数=\frac{a*b}{最大公约数}<br>$$<br>证明：</p><blockquote><p>有集合A，集合B，<br>则知最大公约数 d=A∩B<br>所以最小公倍数=(A-D)∪(B-D)<br>=AB/D</p></blockquote><h3 id="5-2-分数的四则运算"><a href="#5-2-分数的四则运算" class="headerlink" title="5.2 分数的四则运算"></a>5.2 分数的四则运算</h3><p>真分数：分子小于分母</p><p>假分数：分子大于分母</p><p>假分数：fen</p><h4 id="5-2-1-分数的表示和化简"><a href="#5-2-1-分数的表示和化简" class="headerlink" title="5.2.1 分数的表示和化简"></a>5.2.1 分数的表示和化简</h4><p>分数通常写成假分数模式</p><p>Q：如何表示分数</p><ol><li>保证分母为正</li><li>约去公约数</li><li>分子为0，分母为1；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Fractional</span></span>&#123;</span><br><span class="line">Fractional(<span class="keyword">int</span> up,<span class="keyword">int</span> down)&#123;</span><br><span class="line"><span class="keyword">int</span> up;<span class="keyword">int</span> down;</span><br><span class="line">            up=<span class="keyword">this</span>.up;</span><br><span class="line">    down=<span class="keyword">this</span>.down;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Fractional <span class="title">fractional</span><span class="params">(<span class="keyword">int</span> up,<span class="keyword">int</span> down)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(down&lt;<span class="number">0</span>)&#123;</span><br><span class="line">         up=-up;</span><br><span class="line">         down=-down;</span><br><span class="line">         &#125;</span><br><span class="line">      <span class="keyword">if</span>(up==<span class="number">0</span>)&#123;</span><br><span class="line">          down=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">int</span> d = gcd(abs(up),abs(down))</span><br><span class="line">          up/=d;</span><br><span class="line">          down/=d;</span><br><span class="line">            &#125;</span><br><span class="line">   <span class="keyword">return</span> Fractional</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> up=<span class="number">5</span>,down=<span class="number">2</span>;</span><br><span class="line">    f = <span class="keyword">new</span> Fractional(up,down)</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-分数的运算"><a href="#5-2-2-分数的运算" class="headerlink" title="5.2.2 分数的运算"></a>5.2.2 分数的运算</h4><p>分数有加减乘除运算</p><ol><li><p>加法运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Fractional <span class="title">add</span><span class="params">(Fraction f1,Fraction f2)</span></span>&#123;</span><br><span class="line">    Fractional result;</span><br><span class="line">    result.up = f1.up*f2.down + f2.up*f1.down;</span><br><span class="line">    result.down = f1.down*f2.down;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>减法，乘法，除法 同理</li></ol><h4 id="5-2-3-分数的标准输出"><a href="#5-2-3-分数的标准输出" class="headerlink" title="5.2.3 分数的标准输出"></a>5.2.3 分数的标准输出</h4><ol><li>进行化简</li><li>1/1输出为1</li><li>输出真分数，整数部分为 $$ \frac{r.up}{r.down}$$,分数的分母为 r.up%r.down;</li></ol><h3 id="5-3-素数"><a href="#5-3-素数" class="headerlink" title="5.3 素数"></a>5.3 素数</h3><blockquote><p>1 既不是素数也不是合数 </p><p>素数范围（1，n)</p></blockquote><h4 id="5-3-1素数判断"><a href="#5-3-1素数判断" class="headerlink" title="5.3.1素数判断"></a>5.3.1素数判断</h4><p>方法一：对（1，sqrt(n)) 进行遍历 复杂度为 O(sqrt(n))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrame</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqrt(a);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：对于要求复杂度的算法题时可以使用打表的方法解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Prame</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrame(i))&#123;</span><br><span class="line">            a[num++]=i;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三：（埃氏筛法）复杂度为O(nlog(log(n))</p><p>利用从前到后消除的原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">boolean</span> [] b = <span class="keyword">new</span> <span class="keyword">boolean</span> [n];<span class="comment">//如果b[i]=false，是素数，b[i]=true不是素数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Prame</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]=<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;n;j+=i)&#123;</span><br><span class="line">                b[j]=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            b[i]=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：求解100内所有的素数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">boolean</span> [] b = <span class="keyword">new</span> <span class="keyword">boolean</span> [<span class="number">101</span>];</span><br><span class="line">    Find_Prame(b,<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!b[i])&#123;</span><br><span class="line">            System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Find_Prame</span><span class="params">(<span class="keyword">boolean</span>[] b,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!b[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class="line">                b[j]=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            b[i]=<span class="keyword">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-质因子分解"><a href="#5-4-质因子分解" class="headerlink" title="5.4 质因子分解"></a>5.4 质因子分解</h3><p>Q:什么是质因子分解：</p><blockquote><p>将一个正整数写成一个或多个质数乘积的形式<br>6=2<em>3,12=2^2\</em>3</p></blockquote><p>分解过程</p><blockquote><p>构造类 Factor记录 因子x，与因子的个数 cunt</p><p>因为所取最简化的因子一定为素数，直接采取对n进行取模运算。</p><p>对于正整数n，只存在一个因子大于sqrt(n),会存在一个或多个小于n的因子，</p><p>以此入手，如果在前sqrt(n)循环之前，仍然存在n!=1,必定n为素数</p><p>此时算法复杂度降到O(sqrt(n))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n=<span class="number">1997</span>;</span><br><span class="line">  <span class="keyword">int</span> m=n;</span><br><span class="line">  <span class="keyword">boolean</span> []b=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10100</span>];  </span><br><span class="line">  Factor [] fac= <span class="keyword">new</span> Factor[<span class="number">10</span>];  </span><br><span class="line">  <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> [] prime = Find_Prame(b);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;prime[i-<span class="number">2</span>]&lt;Math.sqrt(m);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%prime[i-<span class="number">2</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">fac[num]=<span class="keyword">new</span> Factor();</span><br><span class="line">fac[num].x=prime[i-<span class="number">2</span>];</span><br><span class="line">fac[num].cunt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n%prime[i-<span class="number">2</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">fac[num].cunt++;</span><br><span class="line">n/=prime[i-<span class="number">2</span>];</span><br><span class="line">                    <span class="comment">//每次都除以因子</span></span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">fac[num] = <span class="keyword">new</span> Factor();</span><br><span class="line">fac[num].x=n;</span><br><span class="line">fac[num].cunt=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(m+<span class="string">"="</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line"><span class="comment">//System.out.println(fac[0].x);</span></span><br><span class="line">System.out.print(fac[i].x+<span class="string">"^"</span>+fac[i].cunt+<span class="string">"+"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(fac[num].x+<span class="string">"^"</span>+String.valueOf(fac[num].cunt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">int</span>[] Find_Prame(<span class="keyword">boolean</span>[] b)&#123;</span><br><span class="line"><span class="keyword">int</span> [] prame = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=prame.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!b[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=b.length-<span class="number">1</span>;j+=i)&#123;</span><br><span class="line">b[j]=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">b[i]=<span class="keyword">false</span>;</span><br><span class="line">prame[num++]=i;</span><br><span class="line">            <span class="comment">//记录素数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> prame;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factor</span></span>&#123;</span><br><span class="line"><span class="comment">//素数 x代表因子，cunt代表该因子的次方数</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> cunt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-大数运算"><a href="#5-5-大数运算" class="headerlink" title="5.5 大数运算"></a>5.5 大数运算</h3><h4 id="5-5-1-基本数据类型"><a href="#5-5-1-基本数据类型" class="headerlink" title="5.5.1 基本数据类型"></a>5.5.1 基本数据类型</h4><p>为什么要用大数计算？</p><blockquote><p>当数值大于可以取的范围时就不得不用到大数了。</p></blockquote><blockquote><p>八种基本类型的运算范围如下</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>二进制位数</th><th>范围</th><th>规律</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>8</td><td>-128～127</td><td>-27～27-1</td></tr><tr><td>short</td><td>2</td><td>16</td><td>-32768～32767</td><td>-215～215-1</td></tr><tr><td>int</td><td>4</td><td>32</td><td>-2147483648～2147483647</td><td>-231～231-1</td></tr><tr><td>long</td><td>8</td><td>64</td><td>-9223372036854775808 ~ 9223372036854775807</td><td>-263～263-1</td></tr><tr><td>float</td><td>4</td><td>32</td><td>1.4E-45~3.4028235E38</td><td></td></tr><tr><td>double</td><td>8</td><td>64</td><td>4.9E-324~1.7976931348623157E308</td><td></td></tr><tr><td>char</td><td>2</td><td>16</td><td>0～65535</td><td>0~216-1</td></tr><tr><td>boolean</td><td>1</td><td>8</td><td>true或false</td><td>true或false</td></tr></tbody></table></blockquote><h4 id="5-2-2-BigInteger"><a href="#5-2-2-BigInteger" class="headerlink" title="5.2.2 BigInteger"></a>5.2.2 BigInteger</h4><p>JAVA里面提供了Integer类，专门运用于大数的计算。官方文档这样介绍</p><blockquote><p>不可变的任意精度的整数。所有操作中，都以二进制补码形式表示 BigInteger（如 Java 的基本整数类型）。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。</p></blockquote><p>也就是说</p><blockquote><p>BigInteger 任意大的整数，原则上是，只要你的计算机的内存足够大，可以有无限位的.</p><p>BigInteger属于java.math.BigInteger;</p></blockquote><p>由于biginteger不是基本类型，所以需要 new </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">BigInteger abs()  返回大整数的绝对值</span><br><span class="line">BigInteger add(BigInteger val) 返回两个大整数的和</span><br><span class="line">BigInteger and(BigInteger val)  返回两个大整数的按位与的结果</span><br><span class="line">BigInteger andNot(BigInteger val) 返回两个大整数与非的结果</span><br><span class="line">BigInteger divide(BigInteger val)  返回两个大整数的商</span><br><span class="line">double doubleValue()   返回大整数的double类型的值</span><br><span class="line">float floatValue()   返回大整数的float类型的值</span><br><span class="line">BigInteger gcd(BigInteger val)  返回大整数的最大公约数</span><br><span class="line">int intValue() 返回大整数的整型值</span><br><span class="line">long longValue() 返回大整数的long型值</span><br><span class="line">BigInteger max(BigInteger val) 返回两个大整数的最大者</span><br><span class="line">BigInteger min(BigInteger val) 返回两个大整数的最小者</span><br><span class="line">BigInteger mod(BigInteger val) 用当前大整数对val求模</span><br><span class="line">BigInteger multiply(BigInteger val) 返回两个大整数的积</span><br><span class="line">BigInteger negate() 返回当前大整数的相反数</span><br><span class="line">BigInteger not() 返回当前大整数的非</span><br><span class="line">BigInteger or(BigInteger val) 返回两个大整数的按位或</span><br><span class="line">BigInteger pow(int exponent) 返回当前大整数的exponent次方</span><br><span class="line">BigInteger remainder(BigInteger val) 返回当前大整数除以val的余数</span><br><span class="line">BigInteger leftShift(int n) 将当前大整数左移n位后返回</span><br><span class="line">BigInteger rightShift(int n) 将当前大整数右移n位后返回</span><br><span class="line">BigInteger subtract(BigInteger val)返回两个大整数相减的结果</span><br><span class="line">byte[] toByteArray(BigInteger val)将大整数转换成二进制反码保存在byte数组中</span><br><span class="line">String toString() 将当前大整数转换成十进制的字符串形式</span><br><span class="line">BigInteger xor(BigInteger val) 返回两个大整数的异或</span><br><span class="line">BigInteger compareTo(BigInteger val) 根据该数值是小于、等于、或大于 val 返回 -1、0 或 1；</span><br><span class="line">equals：判断两数是否相等，也可以用compareTo来代替；</span><br><span class="line">intValue，longValue，floatValue，doublue：把该数转换为该类型的数的值。</span><br></pre></td></tr></table></figure><h4 id="5-5-2-Integer"><a href="#5-5-2-Integer" class="headerlink" title="5.5.2 Integer"></a>5.5.2 Integer</h4><p>说到BigIntegerJ就不得说说integer了。</p><blockquote><p><strong>java.lang.Integer</strong></p><p><code>Integer</code> 类在对象中包装了一个基本类型 <code>int</code> 的值。<code>Integer</code> 类型的对象包含一个 <code>int</code> 类型的字段。<br>此外，该类提供了多个方法，能在 <code>int</code> 类型和 <code>String</code> 类型之间互相转换，还提供了处理 <code>int</code> 类型时非常有用的其他一些常量和方法。</p></blockquote><p>概括就是：int与integer范围上是一样的，不过封装了不少的方法可以调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">compareTo(Integer anotherInteger) 在数字上比较两个 Integer 对象</span><br><span class="line">doubleValue(),floatValue() ,intValue(),longValue()以 xx 类型返回该 Integer 的值</span><br><span class="line">parseInt(String s) 将字符串参数作为有符号的十进制整数进行解析</span><br><span class="line">toString() 返回一个表示该 Integer 值的 String 对象。。将该参数转换为有符号的十进制表示形式，并以字符串             的形式返回它。</span><br><span class="line">public static String </span><br><span class="line">将十进制数转换为二进制数（由0 1组成）</span><br><span class="line">public static String </span><br><span class="line">将十进制数转换为八进制数（以0开头）</span><br><span class="line">public static String </span><br><span class="line">将十进制数转换为十六进制数（以0x开头）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">最常用的方法了，进制转换，类型转换。</span><br><span class="line">Integer i = new Integer(10);</span><br><span class="line">int ii = i.intValue();//Integer 转换成 int</span><br><span class="line">Integer kk = Integer.valueOf(ii)//将ii转换为Integer</span><br><span class="line">int iii = Integer.parsetInt(&quot;10&quot;);//字符串转成int类型</span><br><span class="line">k = Integer.parseInt(&quot;110&quot;, 2);//radix进制的字符串转换成int</span><br><span class="line">toBinaryString(int i),toOctalString(int i),toHexString(int i),转换成2,8,16进制</span><br></pre></td></tr></table></figure><h4 id="5-5-3补充："><a href="#5-5-3补充：" class="headerlink" title="5.5.3补充："></a>5.5.3补充：</h4><p>Q: ‘==’,和equals()的区别</p><blockquote><p>众所周知,==比较的是地址,equals比较值。<br>但是在integer中存在一个<strong>IntegerCache</strong>，也就是范围在[-128,127]的数值是直接在IntegerCache里面缓存的，所以当赋值的时候不会重新的new，而是直接的进行调用。<br>那么 有了以下的比较：</p><blockquote><p>a = new Integer(12), Integer b = 12; 由于a是new进行创建对象的，所以a会存在于堆里面，而b是在IntegerCache里获取的.</p><p>所以(a==b)为false</p></blockquote><blockquote><p>当 integer不在该范围的时候，Integer会进行new, 然后自动装箱产生对象;<br>若 Integer a = 128,Integer b=128;<br>也会出现 (a==b)为false<br>但是如果Integer a = 127,Integer b=127;<br>(a==b)为true</p></blockquote><blockquote><p>当int与Integer进行比较的时候回自动的拆箱，转换为int进行比较</p></blockquote><p><a href="https://blog.csdn.net/wangyang1354/article/details/52623703" target="_blank" rel="noopener">参考文章</a></p></blockquote><p>Q：默认值</p><blockquote><p>Integer的默认值是null，int的默认值是0</p></blockquote><p>装箱就是  自动将基本数据类型转换为包装器类型；拆箱就是  自动将包装器类型转换为基本数据类型。</p><p>关于拆箱和分箱可以参考博客文章 <a href="https://www.cnblogs.com/dolphin0520/p/3780005.html" target="_blank" rel="noopener">深入剖析Java中的装箱和拆箱</a></p><h3 id="5-6-组合数"><a href="#5-6-组合数" class="headerlink" title="5.6 组合数"></a>5.6 组合数</h3><blockquote><p>从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；</p><p>从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数。</p><p>公式：<br>$$<br>C_{n}^{m} = \frac{n!}{m!(n-m)!}<br>$$<br>C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;;      C<sub>n</sub><sup>m</sup>=C<sub>n</sub><sup>n-m</sup>;</p></blockquote><h4 id="5-6-1阶乘的质因子"><a href="#5-6-1阶乘的质因子" class="headerlink" title="5.6.1阶乘的质因子"></a>5.6.1阶乘的质因子</h4><p>Q: 什么是阶乘呢？</p><blockquote><p>便于记录连乘，形如 n! =  1*2*3…..*n</p></blockquote><p>Q: n! 中有多少质因子2呢？</p><blockquote><p>最直接的方式就是 套两个for循环，复杂度达到O(N^2)</p><p>但是当n很大时，内存占用的会非常多的。</p></blockquote><p>方法一：</p><p>通过我们的观察</p><p>​                                                   2     n!中2^3的个数</p><p>​                          2                       2    n!中2^2的个数</p><p>​              2          2           2         2            2  n!中2的个数</p><p>10!=1 * 2 * 3* 4 * 5 * 6 * 7 * 8 * 9 * 10</p><p>通过上面得到 在10！中 因子 2的个数为5,2^2 为2个，2^3 1个<br>10！的质因子共 1+2+5=8</p><p>同理 求 n!的质因子为p个数</p><blockquote><p>$$<br>\frac{n}{p}+\frac{n}{p^{2}}+\frac{n}{p^{3}}+\frac{n}{p^{4}}+\frac{n}{p^{5}}+·····<br>$$</p></blockquote><p>求解的终止条件为当int m=log<sub>2</sub>(n),既log(n)的向下取整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=n;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=Math.log(m)/Math.log(<span class="number">2</span>);i++)&#123;</span><br><span class="line">        sum+=n/p;</span><br><span class="line">        n/=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 在java提供的Math函数求对数</p><p>Math.log(m) = log<sub>e</sub>(m)<br>$$<br>log_{2}^{m} = \frac{log_{e}^{m}}{log_{e}{2}}<br>$$<br>然后发现这样也是可以的(判断条件简单多了，用for用的太多了，瞬间感觉while挺好的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">        sum+=n/p;</span><br><span class="line">        n/=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过这个方法也可以求 n!的结果中有多少个0?<br>即是求cal(n,5)<br>这里求的是质因子5的个数，是因为在一个阶乘中每有一个二就会有一个5，2*5会创造一个0,而不是一个10才创造一个0;</p></blockquote><p>方法二：逆向递归<br>从书上的理解是：</p><blockquote><p>10! = 2<sup>5</sup>+5!+1*3*5*7*9</p><p>5! = 2<sup>2</sup> + 2！+ 1*3*5</p><p>和刚刚方法一是一样的原理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> n/p + cal(n/p,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-6-2-组合数的计算"><a href="#5-6-2-组合数的计算" class="headerlink" title="5.6.2 组合数的计算"></a>5.6.2 组合数的计算</h4><p>1，计算 C<sub>n</sub><sup>m</sup><br>$$<br>C_{n}^{m} = \frac{n!}{m!(n-m)!}=\frac{(n-m+1)(n-m+2)····(n-m+m)}{m！}<br>$$<br>通过展开式能够看出，分子分母都为m项的，且C<sub>n</sub><sup>m</sup>的结果都是为整数，故此我们可以边乘边除，而不是每一项分开除再乘的；这样的话就可以避免乘法的溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">          sum=sum*(n-m+i)/i;</span><br><span class="line">          <span class="comment">/**不能写成sum*=(n-m+i)/i;这样是先计算每一项除法的结果，而每一项无法保证为整数，只有先乘后除**/</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>方法二：通过递推公式</p><p>当我们从n个数中取出m个的组合也就是  C<sub>n</sub><sup>m</sup> ,如何我们先不取最后一个数，先从n-1个当中取出m个，然后选取最后一个，再从n-1个当中选取m-1个，既可以得到<br>$$<br>C_{n}^{m} = C_{n-1}^{m}+c_{n-1}^{m-1}<br>$$<br>运用递归可以很快的写出代码，递归的判断条件是当m=0，或者m=n；</p><blockquote><p>写递归一定要先判断好递归终止的条件 C<sub>n</sub><sup>n</sup>=C<sub>n</sub><sup>0</sup>=1;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==m||m==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">return</span> C(n-<span class="number">1</span>,m)+C(n-<span class="number">1</span>,m-<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>​                                                                                                                                             </p>]]></content>
    
    <summary type="html">
    
      JAVA数据结构与算法中有关于数学的问题
    
    </summary>
    
      <category term="JAVA数据结构与算法" scheme="http://wvdon.com/categories/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wvdon.com/tags/java/"/>
    
      <category term="数据结构" scheme="http://wvdon.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数学问题" scheme="http://wvdon.com/tags/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LaTex:排版系统</title>
    <link href="http://wvdon.com/2019/07/19/LaTex-%E6%8E%92%E7%89%88%E7%B3%BB%E7%BB%9F/"/>
    <id>http://wvdon.com/2019/07/19/LaTex-排版系统/</id>
    <published>2019-07-18T16:11:41.000Z</published>
    <updated>2020-03-22T11:18:27.824Z</updated>
    
    <content type="html"><![CDATA[<p>最后更新时间:2019.10.24</p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>LaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。<br>目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。</p><a id="more"></a><blockquote><ol><li>有些站点不支持LaTex语法的我们可以借助<a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">在线 LaTeX 编辑器</a> 进行转换，然后复制为html代码插入进去</li><li>hexo的许多主题都是支持LaTex的，只需在文章头文字部分设置 mathjax: true</li></ol></blockquote><h3 id="LaTex常用语法："><a href="#LaTex常用语法：" class="headerlink" title="LaTex常用语法："></a>LaTex常用语法：</h3><p>$$<br>LaTex公式<br>$$</p><h4 id="分数表示"><a href="#分数表示" class="headerlink" title="分数表示"></a>分数表示</h4><blockquote><p>\frac{1}{2} 代表分数<br>$$<br>\frac{1}{2}<br>$$</p></blockquote><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><blockquote><p>_{}下标  ^{} 上标</p><p>C_{n}^{m}代表<br>$$<br>C_{n}^{m}<br>$$</p></blockquote><p>求和压缩符合</p><blockquote><p>\sum_{i=0}^{n}{(x_i+y_i)}</p><p>\prod_{i=0}^{n}{x_i\cdot{y_i}}_</p><p>\lim_{x\to0}\frac{sinx}{x}_</p><p>\int_{a}^{b}{sinx}dx</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\sum{i=0}^{n}{(x_i&plus;y_i)}\" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\sum{i=0}^{n}{(x_i&plus;y_i)}\" title="\sum{i=0}^{n}{(x_i+y_i)}\"></a></p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\prod{i=0}^{n}{x_i\cdot{y_i}}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\prod{i=0}^{n}{x_i\cdot{y_i}}" title="\prod{i=0}^{n}{x_i\cdot{y_i}}"></a></p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\lim{x\to0}\frac{sinx}{x}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\lim{x\to0}\frac{sinx}{x}" title="\lim{x\to0}\frac{sinx}{x}"></a></p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\int_{a}^{b}{sinx}dx" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\int_{a}^{b}{sinx}dx" title="\int_{a}^{b}{sinx}dx"></a></p></blockquote><p>根号 </p><blockquote><p> \sqrt[x]{y}</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\sqrt[x]{y}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\sqrt[x]{y}" title="\sqrt[x]{y}"></a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/endlesscoding/p/9797237.html" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最后更新时间:2019.10.24&lt;/p&gt;&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;LaTex 是一种基于ΤΕΧ的排版系统，开发之初目的利用这种格式，人们在没有程序设计与排版的情况下也能利用其强大的功能在很短的时间内完成书籍的排版。然而其对于复杂表格和数学公式的展示具有很优秀的表现，在很多文字排版系统都可以看得到LaTex的插件。&lt;br&gt;目前我使用LaTex的原因是，他能够帮助我在MarkDown的书写过程中快速的插入数学公式。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://wvdon.com/categories/tools/"/>
    
    
      <category term="LaTex" scheme="http://wvdon.com/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>PAT_JAVA题解</title>
    <link href="http://wvdon.com/2019/06/06/code/pat/"/>
    <id>http://wvdon.com/2019/06/06/code/pat/</id>
    <published>2019-06-06T12:58:00.000Z</published>
    <updated>2020-03-22T11:13:25.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-1-PAT-甲级题解"><a href="#2-1-PAT-甲级题解" class="headerlink" title="2.1 PAT 甲级题解  "></a><span id="PAT-A">2.1 PAT 甲级题解  </span></h2><table><thead><tr><th align="center">ID</th><th align="center">Title</th><th align="center">链接</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">1025</td><td align="center">PAT Ranking</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93044044" target="_blank" rel="noopener">链接</a></td><td align="center"></td></tr><tr><td align="center">1059</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="2-2-PAT乙级题解"><a href="#2-2-PAT乙级题解" class="headerlink" title="2.2 PAT乙级题解"></a><span id="PAT-B">2.2 PAT乙级题解</span></h2><table><thead><tr><th>ID</th><th align="center">Title</th><th align="center">链接</th><th>备注</th></tr></thead><tbody><tr><td>1001</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td>1002</td><td align="center">写出这个数</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93043998" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td>1003</td><td align="center">我要通过</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93044065" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td>1004</td><td align="center">成绩排名</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93044070" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td></td></tr><tr><td>1007</td><td align="center">素数对猜想</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93044093" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td>1009</td><td align="center">说反话</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93044025" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td>1013</td><td align="center">数素数</td><td align="center"></td><td></td></tr><tr><td>1020</td><td align="center">月饼</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93043969" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td>1022</td><td align="center">D进制的A+B</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93043969" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td>1023</td><td align="center">组最小数</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93043955" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td>1032</td><td align="center">挖掘机技术哪家强</td><td align="center"></td><td></td></tr><tr><td>1036</td><td align="center">跟奥巴马一起编程</td><td align="center"><a href="https://blog.csdn.net/WeDon_t/article/details/93043983" target="_blank" rel="noopener">链接</a></td><td></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      浙江大学PAT甲乙试题题解
    
    </summary>
    
      <category term="JAVA数据结构与算法" scheme="http://wvdon.com/categories/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wvdon.com/tags/java/"/>
    
      <category term="pat题解" scheme="http://wvdon.com/tags/pat%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>《浪潮之巅》计算机行业的发展规律</title>
    <link href="http://wvdon.com/2019/04/01/the-top-of-wave/"/>
    <id>http://wvdon.com/2019/04/01/the-top-of-wave/</id>
    <published>2019-04-01T15:34:19.000Z</published>
    <updated>2020-03-22T11:13:25.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h3><hr><blockquote><p>英特尔公司创始人戈登·摩尔 在1956年提出 ，<strong>至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月</strong>。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展</p></blockquote><a id="more"></a><p>通常我们可以看到，一般新的处理器发布一年半之后，价格会开始大幅下调；</p><p>​       摩尔定律主导着IT行业的发展。首先，为了不断提升芯片的性能，IT公司必须在比较短的时间内完成下一代产品的开发。因此这就要求这些公司必须要投入大量的资金进行研发，这使得每个产品的市场不会有太多的竞争者</p><blockquote><p>这也是这么多年来国内无法生产与国外性能和技术相同的处理器的原因</p></blockquote><h3 id="安迪-比尔定律"><a href="#安迪-比尔定律" class="headerlink" title="安迪-比尔定律"></a>安迪-比尔定律</h3><hr><blockquote><p> 摩尔定律给我们带来了一个希望，即是如果我今天认为计算机太贵买不起，我可以等到18个月之后就可以用一般的价钱买到相同配置的计算机。如果大家都等到几个月之后再买电脑的话，电脑的销量就会降低很多，开发人员也没有动力去更新计算机了</p></blockquote><p>然而事实上是个人电脑的销售一直在持续增长。</p><p><strong>安迪-比尔定律：比尔要拿走安迪所给的（What Andy gives,Bill takes away).</strong></p><blockquote>  安迪：原英特尔CEO安迪·格鲁夫。  比尔：微软公司创始人比尔·盖茨</blockquote><p>​    在过去的几十年里，英特尔的处理器速度每18个月翻一番，计算机的内存和硬盘容量则以更快的速度发展，但是，微软的操作系统和应用软件越来越慢，也越做越大。所以现在的计算机比着10年前快了上百倍，但是软件的运行速度感觉上和之前的差不多。即使是同样功能的软件，今天的比着昨天的占用硬件资源多就在所难免了。</p><p>​    相应的产生了一条生态链：以微软为首的软件开发商吃掉硬件提升带来的全部好处，迫使用户更新计算机，让惠普，戴尔，联想这些公司收益，而这些公司再向英特尔，希捷，三星，金士顿等厂家订购芯片，内存和硬盘等硬件。然后各个公司分别获利，按照摩尔定律预定的速度发展，提升硬件的性能，为微软的下一步更新软件，吃掉硬件性能做准备。</p><p>就这样，安迪-比尔定律把原本属于耐用消费品的电脑，手机等商品变成了消耗性商品，刺激着整个IT行业的发展。</p><h3 id="反摩尔定律"><a href="#反摩尔定律" class="headerlink" title="反摩尔定律"></a>反摩尔定律</h3><hr><p>​     Googel前CEO埃里克·施密特指出：<strong><em>一个IT公司如果今天和18个月之前卖掉同样的产品，他的营业额就要降低一半。对于IT公司反摩尔定律是非常可怕的，因为一个公司付出了相同的劳动，却只得到之前一半的收入，</em></strong></p><blockquote>  反摩尔定律逼着所有的硬件设备公司必须要赶得上摩尔定律规定的更新速度。<p>  反摩尔定律使得IT企业不可能像石油工业或飞机制造业那样只追求量变，而必须要不断的寻找革命性的创造发明。</p><p>  反摩尔定律同时使得新兴的小公司有可能在发展新技术方面和大公司处在同一个起跑线上。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>  苹果公司是一个例外，它是通过硬件实现软件的价值，因此在过去的10多年他的产品成为了一种时尚和潮流。  由于安迪-比尔定律的作用，在IT工业的产业链中，处于上游的是“看不见摸不着”的软件和IT服务业，而下是”看得见摸得着“的硬件和半导体。从事IT业，想要获得高额利润，就得从上游入手，从微软，Google,facebook，无一不是。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摩尔定律&quot;&gt;&lt;a href=&quot;#摩尔定律&quot; class=&quot;headerlink&quot; title=&quot;摩尔定律&quot;&gt;&lt;/a&gt;摩尔定律&lt;/h3&gt;&lt;hr&gt;&lt;blockquote&gt;
&lt;p&gt;英特尔公司创始人戈登·摩尔 在1956年提出 ，&lt;strong&gt;至多在10年内，集成电路的集成度会每两年翻一番。后来人们把这个周期缩短到18个月&lt;/strong&gt;。而现在每18个月，计算机等IT产品的性能会翻一番；换句话来说就是同等性能的计算机等IT产品，每18个月价钱会降一半。乍一看，这个发展速度令人发指，但是几十年来IT行业的发展始终遵循着摩尔定律发展&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://wvdon.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="摩尔定律" scheme="http://wvdon.com/tags/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B/"/>
    
      <category term="安迪比尔定律" scheme="http://wvdon.com/tags/%E5%AE%89%E8%BF%AA%E6%AF%94%E5%B0%94%E5%AE%9A%E5%BE%8B/"/>
    
      <category term="反摩尔定律" scheme="http://wvdon.com/tags/%E5%8F%8D%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B/"/>
    
  </entry>
  
</feed>
